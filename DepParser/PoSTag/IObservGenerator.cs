using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace PoSTag
{
    public interface IObservGenerator
    {
        string[][] GenerateObserv(string[] toks);
    }

    public enum ObElemType
    {
        Tok,
        Prefix,
        Suffix,
        IsCapital,
        IsAllCapital,
        ContainCapital,
        IsDigit,
        ContainDigit,
        IsHW,
        WClustur,
        PrefixTagDict,
        SuffixTagDict,
        LCTok,
        LCWCluster,
        LCPrefix,
        LCSuffix
    }

    public class ObElemGen
    {
        public ObElemType elem;
        public int info;
    }

    public class WordClusterElem
    {
        public int Count { get; private set; }
        public string BitString { get; private set; }

        public WordClusterElem(int Count, string BitString)
        {
            this.Count = Count;
            this.BitString = BitString;
        }
    }

    public class FlexibleGenerator : IObservGenerator
    {
        public FlexibleGenerator(Dictionary<string, List<string>> ExtraInfo)
        {
            List<string> observElm;
            if (!ExtraInfo.TryGetValue("ObservElem", out observElm))
            {
                throw new Exception("Wrong model file!");
            }
            
            elems = new List<ObElemGen>();

            foreach (string s in observElm)
            {
                elems.Add(GetObElem(s));
            }

            LoadTokSet(ExtraInfo);

            LoadWordCluster(ExtraInfo);

            LoadCharDict(ExtraInfo);

            LoadLowerCaseWordCluster(ExtraInfo);
        }

        public int ObLen { get { return elems.Count; } }

        public string[][] GenerateObserv(string[] toks)
        {
            string[][] obs = new string[toks.Length][];

            for (int i = 0; i < toks.Length; ++i)
            {
                obs[i] = GenerateObserv(toks[i]);
            }

            return obs;
        }

        private string[] GenerateObserv(string t)
        {
            string[] ob = new string[elems.Count];
            t = NormalizeDigits(t);
            bool IsRare = tokset == null ? false : !tokset.Contains(t);

            for (int i = 0; i < ob.Length; ++i)
            {               
                ob[i] = GenObElem(t, IsRare, elems[i]);
            }

            return ob;
        }

        private string GenObElem(string t, bool IsRare, ObElemGen eg)
        {
            bool havetokdict = tokset != null;
            switch (eg.elem)
            {
                case ObElemType.Tok:
                    return (havetokdict && IsRare) ? null : t;
                case ObElemType.Prefix:
                    return (havetokdict && !IsRare) ? null : GetPrefix(t, eg.info);
                case ObElemType.Suffix:
                    return (havetokdict && !IsRare) ? null : GetSuffix(t, eg.info);
                case ObElemType.LCPrefix:
                    return (havetokdict && !IsRare) ? null : GetPrefix(t.ToLower(), eg.info);
                case ObElemType.LCSuffix:
                    return (havetokdict && !IsRare) ? null : GetSuffix(t.ToLower(), eg.info);
                case ObElemType.IsDigit:
                    return (havetokdict && !IsRare) ? null : (IsDigit(t) ? "1" : "0");
                case ObElemType.ContainDigit:
                    return (havetokdict && !IsRare) ? null : (ContainDigit(t) ? "1" : "0");
                case ObElemType.IsCapital:
                    return (havetokdict && !IsRare) ? null : (IsCapital(t) ? "1" : "0");
                case ObElemType.IsAllCapital:
                    return (havetokdict && !IsRare) ? null : (IsAllCapital(t) ? "1" : "0");
                case ObElemType.ContainCapital:
                    return (havetokdict && !IsRare) ? null : (ContainCapital(t) ? "1" : "0");
                case ObElemType.IsHW:
                    return (havetokdict && !IsRare) ? null : (IsHPW(t) ? "1" : "0");
                case ObElemType.WClustur:
                    return (wordClusterDict == null || (havetokdict && !IsRare)) ? null : GetCluster(t);
                case ObElemType.LCWCluster:
                    return (lcWordClusterDict == null || (havetokdict && !IsRare)) ? null : GetLCCluster(t);
                case ObElemType.LCTok:
                    return (havetokdict && IsRare) ? null : t.ToLower();
                default:
                    throw new Exception("Not implemented yet!");
            }
        }

        private string GetLCCluster(string t)
        {
            string c;
            if (lcWordClusterDict.TryGetValue(t.ToLower(), out c))
            {
                if (c.Length <= 6)
                {
                    return c;
                }
                else
                {
                    return c.Substring(0, 6);
                }
            }

            return null;
        }

        private string GetCluster(string t)
        {
            string c;
            if (wordClusterDict.TryGetValue(t, out c))
            {
                if (c.Length <= 6)
                {
                    return c;
                }
                else
                {
                    return c.Substring(0, 6);
                }
            }

            return "x";
        }

        private void LoadTokSet(Dictionary<string, List<string>> ExtraInfo)
        {
            List<string> tokList;

            if (!ExtraInfo.TryGetValue("Tokens", out tokList))
            {
                return;
            }

            tokset = new HashSet<string>();

            foreach (string t in tokList)
            {
                if (tokset.Contains(t))
                {
                    continue;
                }

                tokset.Add(t);
            }
        }

        private void LoadWordCluster(Dictionary<string, List<string>> ExtraInfo)
        {
            List<string> tokList;

            if (!ExtraInfo.TryGetValue("WordCluster", out tokList))
            {
                return;
            }

            //tokset = new HashSet<string>();
            wordClusterDict = new Dictionary<string, string>();

            foreach (string t in tokList)
            {
                string[] parts = t.Split(new string[] { " ", "\t" }, StringSplitOptions.RemoveEmptyEntries);

                wordClusterDict[parts[1]] = parts[0];
            }
        }

        private void LoadLowerCaseWordCluster(Dictionary<string, List<string>> ExtraInfo)
        {
            List<string> tokList;

            if (!ExtraInfo.TryGetValue("LCWordCluster", out tokList))
            {
                return;
            }

            //tokset = new HashSet<string>();
            lcWordClusterDict = new Dictionary<string, string>();

            foreach (string t in tokList)
            {
                string[] parts = t.Split(new string[] { " ", "\t" }, StringSplitOptions.RemoveEmptyEntries);

                lcWordClusterDict[parts[0].ToLower()] = parts[1];
            }
        }

        private void LoadCharDict(Dictionary<string, List<string>> ExtraInfo)
        {
            List<string> charPrefix;

            if (ExtraInfo.TryGetValue("CharPrefixDict", out charPrefix))
            {

                charPrefixTagDict = new Dictionary<char, string>();
                foreach (var line in charPrefix)
                {
                    string[] parts = line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length != 2 || parts[0].Length != 1)
                    {
                        continue;
                    }

                    charPrefixTagDict[parts[0][0]] = parts[1];
                }
            }

            List<string> charSuffix;

            if (ExtraInfo.TryGetValue("CharSuffixDict", out charSuffix))
            {

                charSuffixTagDict = new Dictionary<char, string>();
                foreach (var line in charSuffix)
                {
                    string[] parts = line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length != 2 || parts[0].Length != 1)
                    {
                        continue;
                    }

                    charPrefixTagDict[parts[0][0]] = parts[1];
                }
            }
        }

        private string NormalizeDigits(string t)
        {
            return Regex.Replace(t, "[0-9]", "0");
        }

        static string GetPrefix(string t, int n)
        {
            if (t.Length < n)
            {
                return null;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t.Length < n)
            {
                return null;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }

        static bool ContainCapital(string token)
        {
            foreach (var c in token)
            {
                if (char.IsUpper(c))
                {
                    return true;
                }
            }
            return true;
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            bool haveDigit = false;
            //bool haveNonDigit = false;
            foreach (char c in t)
            {
                if (!char.IsDigit(c))
                {
                    //haveNonDigit = true;
                    if (c != '.')
                    {
                        return false;
                    }
                }
                else
                {
                    haveDigit = true;
                }
            }

            return haveDigit;
        }

        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (c != '-')
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }

        ObElemGen GetObElem(string s)
        {
            string[] parts = s.Split(new string[] { " ", "\t" }, StringSplitOptions.RemoveEmptyEntries);

            switch (parts[0].ToLower())
            {
                case "tok":
                    return new ObElemGen{elem = ObElemType.Tok, info = 0};
                case "prefix":
                    return new ObElemGen { elem = ObElemType.Prefix, info = int.Parse(parts[1]) };
                case "suffix":
                    return new ObElemGen { elem = ObElemType.Suffix, info = int.Parse(parts[1]) };
                case "iscapital":
                    return new ObElemGen { elem = ObElemType.IsCapital, info = 0 };
                case "allcapital":
                    return new ObElemGen { elem = ObElemType.IsAllCapital, info = 0 };
                case "containcapital":
                    return new ObElemGen { elem = ObElemType.ContainCapital, info = 0 };
                case "isdigit":
                    return new ObElemGen { elem = ObElemType.IsDigit, info = 0 };
                case "containdigit":
                    return new ObElemGen { elem = ObElemType.ContainDigit, info = 0 };
                case "ishw":
                    return new ObElemGen { elem = ObElemType.IsHW, info = 0 };
                case "wcluster":
                    return new ObElemGen { elem = ObElemType.WClustur, info = 0 };
                case "prefixdict":
                    return new ObElemGen { elem = ObElemType.PrefixTagDict, info = int.Parse(parts[1]) };
                case "suffixdict":
                    return new ObElemGen { elem = ObElemType.SuffixTagDict, info = int.Parse(parts[1]) };
                case "lctok":
                    return new ObElemGen { elem = ObElemType.LCTok, info = 0 };
                case "lcwcluster":
                    return new ObElemGen { elem = ObElemType.LCWCluster, info = 0 };
                case "lcsuffix":
                    return new ObElemGen { elem = ObElemType.LCSuffix, info = int.Parse(parts[1]) };
                case "lcprefix":
                    return new ObElemGen { elem = ObElemType.LCPrefix, info = int.Parse(parts[1]) };
                default:
                    throw new Exception("wrong model file");
            }
        }

        List<ObElemGen> elems;
        HashSet<string> tokset;
        Dictionary<char, string> charPrefixTagDict;
        Dictionary<char, string> charSuffixTagDict;
        Dictionary<string, string> wordClusterDict;
        Dictionary<string, string> lcWordClusterDict;
    }

    public class EnglishObservGenerator : IObservGenerator
    {
        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = tokens[i];//.ToLower();
                obs[i] = new string[14];
                obs[i][0] = t;
                for (int j = 1; j <= 4; ++j)
                {
                    obs[i][j] = GetPrefix(t, j);
                }
                for (int j = 5; j <= 8; ++j)
                {
                    obs[i][j] = GetSuffix(t, j - 4);
                }

                obs[i][9] = IsCapital(t) ? "1" : "0";
                obs[i][10] = (IsAllCapital(t) ? "1" : "0");
                obs[i][11] = (IsDigit(t) ? "1" : "0");
                obs[i][12] = (ContainDigit(t) ? "1" : "0");
                obs[i][13] = (IsHPW(t) ? "1" : "0");
            }

            return obs;
        }

        static string GetPrefix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            int L = t.Length;
            if (L > 3 && (t.EndsWith("st") || t.EndsWith("rd")
                || t.EndsWith("th")))
            {
                L -= 2;
            }
            bool haveDigit = false;
            for (int i = 0; i < L; ++i)
            {
                if (!char.IsDigit(t[i]) && t[i] != '.' && t[i] != ',')
                {
                    return false;
                }
                if (char.IsDigit(t[i]))
                {
                    haveDigit = true;
                }
            }
            return haveDigit;
        }

        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (t != "-")
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }
    }

    public class WSJObservGenerator : IObservGenerator
    {
        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            int quotenum = 0;

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = Normalize(tokens[i]);//.ToLower();

                t = NormalizeEllips(t);
                t = NormalizeEndPunc(t);
                t = NormalizeHyphen(t);

                if (t == "\"")
                {
                    if (quotenum % 2 == 0)
                    {
                        if (i == tokens.Length - 1
                            || (i == tokens.Length - 2 &&
                            (tokens[i + 1] == "."
                            || tokens[i + 1] == "," || tokens[i + 1] == "!"
                            || tokens[i + 1] == "?")))
                        {
                            t = "\'\'";
                        }
                        else
                        {
                            t = "``";
                        }
                    }
                    else
                    {
                        t = "\'\'";
                    }

                    quotenum++;
                }
                obs[i] = new string[15];
                if (WSJCaseSensitiveVocab.Contains(t))
                {
                    obs[i][0] = t;
                    for (int j = 1; j <= 4; ++j)
                    {
                        obs[i][j] = DummyToken;
                    }
                    for (int j = 5; j <= 8; ++j)
                    {
                        obs[i][j] = DummyToken;
                    }

                    obs[i][9] = DummyToken;
                    obs[i][10] = DummyToken;
                    obs[i][11] = DummyToken;
                    obs[i][12] = DummyToken;
                    obs[i][13] = DummyToken;
                    obs[i][14] = DummyToken;
                }
                else
                {
                    obs[i][0] = DummyToken;
                    for (int j = 1; j <= 4; ++j)
                    {
                        obs[i][j] = GetPrefix(t, j);
                    }
                    for (int j = 5; j <= 8; ++j)
                    {
                        obs[i][j] = GetSuffix(t, j - 4);
                    }

                    obs[i][9] = IsCapital(t) ? "1" : "0";
                    obs[i][10] = (IsAllCapital(t) ? "1" : "0");
                    obs[i][11] = (IsDigit(t) ? "1" : "0");
                    obs[i][12] = (ContainDigit(t) ? "1" : "0");
                    obs[i][13] = (IsHPW(t) ? "1" : "0");
                    obs[i][14] = (i > 0 && IsCapital(t)) ? "1" : "0";
                }
            }

            return obs;
        }

        static string Normalize(string t)
        {
            StringBuilder sb = new StringBuilder();
            foreach (char c in t)
            {
                if (c >= '0' && c <= '9')
                {
                    sb.Append('0');
                }
                else
                {
                    sb.Append(c);
                }
            }
            return sb.ToString();
        }

        static string NormalizeEllips(string t)
        {
            if (t.Length > 1)
            {
                foreach (char c in t)
                {
                    if (c != '.')
                    {
                        return t;
                    }
                }

                return "...";
            }
            else
            {
                return t;
            }
        }

        static string NormalizeHyphen(string t)
        {
            if (t.Length <= 2)
            {
                return t;
            }

            foreach (char c in t)
            {
                if (c != '-')
                {
                    return t;
                }
            }

            return "--";
        }

        static string NormalizeEndPunc(string t)
        {
            if (t.Length <= 1)
            {
                return t;
            }

            foreach (char c in t)
            {
                if (c != '!' && c != '?')
                {
                    return t;
                }
            }

            return t[0].ToString();
        }

        static string GetPrefix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            int L = t.Length;
            if (L > 3 && (t.EndsWith("st") || t.EndsWith("rd")
                || t.EndsWith("th")))
            {
                L -= 2;
            }
            bool haveDigit = false;
            for (int i = 0; i < L; ++i)
            {
                if (!char.IsDigit(t[i]) && t[i] != '.' && t[i] != ',')
                {
                    return false;
                }
                if (char.IsDigit(t[i]))
                {
                    haveDigit = true;
                }
            }
            return haveDigit;
        }

        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (t != "-")
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }

        public const string DummyToken = "DUMMY_TOKEN";
    }

    public class MTCaseSensitiveObservGenerator : IObservGenerator
    {
        public MTCaseSensitiveObservGenerator()
        {
           
        }

        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = tokens[i];//.ToLower();
                obs[i] = GenerateObserv(tokens[i]);
            }

            return obs;
        }

        private string[] GenerateObserv(string token)
        {
            int N = 15;
            string[] ob = new string[N];

            if (MTCaseSensitiveVocab.Contains(token))
            {
                ob[0] = token;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = DummyToken;
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = DummyToken;
                }

                //ob[9] = IsCapital(token) ? "1" : "0";
                //ob[10] = (IsAllCapital(token) ? "1" : "0");
                //ob[11] = (ContainDigit(token) ? "1" : "0");
                //ob[12] = (IsHPW(token) ? "1" : "0");
                //ob[13] = (IsDigit(token) ? "1" : "0");
                //ob[14] = (ContainCapital(token) ? "1" : "0");

                ob[9] = DummyToken;// IsCapital(token) ? "1" : "0";
                ob[10] = DummyToken;//(IsAllCapital(token) ? "1" : "0");
                ob[11] = DummyToken;//(ContainDigit(token) ? "1" : "0");
                ob[12] = DummyToken;//(IsHPW(token) ? "1" : "0");
                ob[13] = DummyToken;//(IsDigit(token) ? "1" : "0");
                ob[14] = DummyToken;//(ContainCapital(token) ? "1" : "0");
            }
            else
            {
                ob[0] = DummyToken;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = GetPrefix(token, j);
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = GetSuffix(token, j - 4);
                }

                ob[9] = IsCapital(token) ? "1" : "0";
                ob[10] = (IsAllCapital(token) ? "1" : "0");
                ob[11] = (ContainDigit(token) ? "1" : "0");
                ob[12] = (IsHPW(token) ? "1" : "0");
                ob[13] = (IsDigit(token) ? "1" : "0");
                ob[14] = (ContainCapital(token) ? "1" : "0");
            }
            

            return ob;
        }

        static string GetPrefix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }

        static bool ContainCapital(string token)
        {
            foreach (var c in token)
            {
                if (char.IsUpper(c))
                {
                    return true;
                }
            }
            return true;
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            bool haveDigit = false;
            //bool haveNonDigit = false;
            foreach (char c in t)
            {
                if (!char.IsDigit(c))
                {
                    //haveNonDigit = true;
                    if (c != '.')
                    {
                        return false;
                    }
                }
                else
                {
                    haveDigit = true;
                }
            }

            return haveDigit;
        }
        
        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (c != '-')
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }

        public const string DummyToken = "DUMMY_TOKEN";

    }

    public class WSJCaseSensitiveObservGenerator : IObservGenerator
    {
        public WSJCaseSensitiveObservGenerator()
        {
           
        }

        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = tokens[i];//.ToLower();
                obs[i] = GenerateObserv(tokens[i]);
            }

            return obs;
        }

        private string[] GenerateObserv(string token)
        {
            int N = 15;
            string[] ob = new string[N];

            if (WSJCaseSensitiveVocab.Contains(token))
            {
                ob[0] = token;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = DummyToken;
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = DummyToken;
                }

                //ob[9] = IsCapital(token) ? "1" : "0";
                //ob[10] = (IsAllCapital(token) ? "1" : "0");
                //ob[11] = (ContainDigit(token) ? "1" : "0");
                //ob[12] = (IsHPW(token) ? "1" : "0");
                //ob[13] = (IsDigit(token) ? "1" : "0");
                //ob[14] = (ContainCapital(token) ? "1" : "0");

                ob[9] = DummyToken;// IsCapital(token) ? "1" : "0";
                ob[10] = DummyToken;//(IsAllCapital(token) ? "1" : "0");
                ob[11] = DummyToken;//(ContainDigit(token) ? "1" : "0");
                ob[12] = DummyToken;//(IsHPW(token) ? "1" : "0");
                ob[13] = DummyToken;//(IsDigit(token) ? "1" : "0");
                ob[14] = DummyToken;//(ContainCapital(token) ? "1" : "0");
            }
            else
            {
                ob[0] = DummyToken;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = GetPrefix(token, j);
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = GetSuffix(token, j - 4);
                }

                ob[9] = IsCapital(token) ? "1" : "0";
                ob[10] = (IsAllCapital(token) ? "1" : "0");
                ob[11] = (ContainDigit(token) ? "1" : "0");
                ob[12] = (IsHPW(token) ? "1" : "0");
                ob[13] = (IsDigit(token) ? "1" : "0");
                ob[14] = (ContainCapital(token) ? "1" : "0");
            }
            

            return ob;
        }

        static string GetPrefix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }


        static bool ContainCapital(string token)
        {
            foreach (var c in token)
            {
                if (char.IsUpper(c))
                {
                    return true;
                }
            }
            return true;
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            bool haveDigit = false;
            //bool haveNonDigit = false;
            foreach (char c in t)
            {
                if (!char.IsDigit(c))
                {
                    //haveNonDigit = true;
                    if (c != '.')
                    {
                        return false;
                    }
                }
                else
                {
                    haveDigit = true;
                }
            }

            return haveDigit;
        }
        
        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (c != '-')
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }

        public const string DummyToken = "DUMMY_TOKEN";

        
    }

    public class MTCaseSensitiveWordClusterObservGenerator : IObservGenerator
    {
        public MTCaseSensitiveWordClusterObservGenerator()
        {

        }

        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = tokens[i];//.ToLower();
                obs[i] = GenerateObserv(tokens[i]);
            }

            return obs;
        }

        private string[] GenerateObserv(string token)
        {
            int N = 16;
            string[] ob = new string[N];

            ob[15] = MTCaseSensitiveWordCluster.GetCluster(token);

            if (MTCaseSensitiveVocab.Contains(token))
            {
                ob[0] = token;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = DummyToken;
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = DummyToken;
                }

                //ob[9] = IsCapital(token) ? "1" : "0";
                //ob[10] = (IsAllCapital(token) ? "1" : "0");
                //ob[11] = (ContainDigit(token) ? "1" : "0");
                //ob[12] = (IsHPW(token) ? "1" : "0");
                //ob[13] = (IsDigit(token) ? "1" : "0");
                //ob[14] = (ContainCapital(token) ? "1" : "0");

                ob[9] = DummyToken;// IsCapital(token) ? "1" : "0";
                ob[10] = DummyToken;//(IsAllCapital(token) ? "1" : "0");
                ob[11] = DummyToken;//(ContainDigit(token) ? "1" : "0");
                ob[12] = DummyToken;//(IsHPW(token) ? "1" : "0");
                ob[13] = DummyToken;//(IsDigit(token) ? "1" : "0");
                ob[14] = DummyToken;//(ContainCapital(token) ? "1" : "0");
            }
            else
            {
                ob[0] = DummyToken;
                for (int j = 1; j <= 4; ++j)
                {
                    ob[j] = GetPrefix(token, j);
                }
                for (int j = 5; j <= 8; ++j)
                {
                    ob[j] = GetSuffix(token, j - 4);
                }

                ob[9] = IsCapital(token) ? "1" : "0";
                ob[10] = (IsAllCapital(token) ? "1" : "0");
                ob[11] = (ContainDigit(token) ? "1" : "0");
                ob[12] = (IsHPW(token) ? "1" : "0");
                ob[13] = (IsDigit(token) ? "1" : "0");
                ob[14] = (ContainCapital(token) ? "1" : "0");
                
            }


            return ob;
        }

        static string GetPrefix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t.Length < n)
            {
                return DummyToken;
            }

            return t.Substring(t.Length - n);
        }

        static bool IsCapital(string t)
        {
            return char.IsUpper(t[0]);
        }

        static bool ContainCapital(string token)
        {
            foreach (var c in token)
            {
                if (char.IsUpper(c))
                {
                    return true;
                }
            }
            return true;
        }

        static bool IsAllCapital(string t)
        {
            foreach (char c in t)
            {
                if (!char.IsUpper(c))
                {
                    return false;
                }
            }

            return true;
        }

        static bool IsDigit(string t)
        {
            bool haveDigit = false;
            //bool haveNonDigit = false;
            foreach (char c in t)
            {
                if (!char.IsDigit(c))
                {
                    //haveNonDigit = true;
                    if (c != '.')
                    {
                        return false;
                    }
                }
                else
                {
                    haveDigit = true;
                }
            }

            return haveDigit;
        }

        static bool ContainDigit(string t)
        {
            foreach (char c in t)
            {
                if (char.IsDigit(c))
                {
                    return true;
                }
            }

            return false;
        }

        static bool IsHPW(string t)
        {
            bool haveHP = false;
            bool haveNonHP = false;
            foreach (char c in t)
            {
                if (c != '-')
                {
                    haveNonHP = true;
                }
                else
                {
                    haveHP = true;
                }
            }

            return haveHP && haveNonHP;
        }

        public const string DummyToken = "DUMMY_TOKEN";


    }

    public class CTBMTObservGenerator : IObservGenerator
    {
        public CTBMTObservGenerator()
        {
            charPrefixTagDict = new Dictionary<char, string>();
            foreach (var line in charPrefix)
            {
                string[] parts = line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length != 2 || parts[0].Length != 1)
                {
                    continue;
                }

                charPrefixTagDict[parts[0][0]] = parts[1];
            }

            charSuffixTagDict = new Dictionary<char, string>();
            foreach (var line in charSuffix)
            {
                string[] parts = line.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length != 2 || parts[0].Length != 1)
                {
                    continue;
                }

                charPrefixTagDict[parts[0][0]] = parts[1];
            }
        }

        public string[][] GenerateObserv(string[] tokens)
        {
            string[][] obs = new string[tokens.Length][];

            for (int i = 0; i < obs.Length; ++i)
            {
                string t = tokens[i];//.ToLower();
                obs[i] = GenerateObserv(tokens[i]);
            }

            return obs;
        }

        private string NormalizeDigits(string t)
        {
            return Regex.Replace(t, "[0-9]", "0");
        }

        public string[] GenerateObserv(string t)
        {
            t = NormalizeDigits(t);
            List<string> features = new List<string>();
            features.Add(t);
            for (int j = 1; j < 2; ++j)
            {
                features.Add(GetPrefix(t, j));
            }

            for (int j = 1; j < 2; ++j)
            {
                features.Add(GetSuffix(t, j));
            }

            features.Add(t.Length < 3 ? t : DummyToken);

            features.Add(t.Length == 1 ? t : DummyToken);

            char prechar = GetPrefix(t, 1)[0];
            char suffixchar = GetSuffix(t, 1)[0];
            string tagsetf;
            if (charPrefixTagDict.TryGetValue(prechar, out tagsetf))
            {
                features.Add(tagsetf);
            }
            else
            {
                features.Add(DummyToken);
            }

            if (charSuffixTagDict.TryGetValue(suffixchar, out tagsetf))
            {
                features.Add(tagsetf);
            }
            else
            {
                features.Add(DummyToken);
            }

            int MaxLen = 20;

            for (int j = 0; j < MaxLen - 2; ++j)
            {
                int idx = 1 + j;
                if (idx < t.Length - 1)
                {
                    features.Add(t[idx].ToString());
                }
                else
                {
                    features.Add(DummyToken);
                }
            }

            for (int j = 0; j < MaxLen - 1; ++j)
            {
                int idx = 1 + j;
                if (idx < t.Length)
                {
                    features.Add(t[0].ToString() + t[idx].ToString());
                }
                else
                {
                    features.Add(DummyToken);
                }
            }

            for (int j = 0; j < MaxLen - 1; ++j)
            {
                int idx = j;
                if (idx < t.Length - 1)
                {
                    features.Add(t[t.Length - 1].ToString() + t[idx].ToString());
                }
                else
                {
                    features.Add(DummyToken);
                }
            }

            for (int j = 0; j < MaxLen - 1; ++j)
            {
                int idx = j;
                if (idx < t.Length - 1 && t[idx] == t[idx + 1])
                {
                    features.Add(t[idx].ToString());
                }
                else
                {
                    features.Add(DummyToken);
                }
            }

            return features.ToArray();
            //features.Add(pos[i]);
        }

        static string GetPrefix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(0, n);
        }

        static string GetSuffix(string t, int n)
        {
            if (t == "$number" || t == "$xmlesc"
                || t == "$date" || t == "$url"
                || t == "$time" || t == "$modeltype"
                || t == "$day" || t == "$literal"
              )
            {
                return t;
            }
            if (t.Length <= n)
            {
                return t;
            }

            return t.Substring(t.Length - n);
        }

        Dictionary<char, string> charPrefixTagDict;
        Dictionary<char, string> charSuffixTagDict;

        public const string DummyToken = "DUMMY_TOKEN";

        static string[] charPrefix = 
        {
#region char prefix
            "上 AD_CD_DEC_DT_JJ_LC_M_MSP_NN_NR_NT_OD_VA_VV",
"浦 NN_NR",
"开 AD_JJ_LC_NN_NR_VA_VV",
"与 AD_CC_DT_JJ_NN_NT_P_PN_VA_VV",
"法 JJ_NN_NR_VA_VV",
"建 LC_NN_NR_VV",
"同 AD_CC_CD_DT_JJ_M_NN_NR_NT_P_VA_VV",
"新 AD_CC_JJ_M_NN_NR_NT_VA_VV",
"$ AD_CD_JJ_NN_NR_NT_OD",
"电 JJ_NN_NR_VV",
"( PU",
"记 M_NN_NR_VV",
"谢 JJ_NR_VV",
"、 PU",
"张 M_NN_NR_VV",
") PU",
"近 AD_CD_JJ_LC_M_NN_NR_NT_P_VA_VV",
"颁 NN_VV",
"实 AD_JJ_LC_NN_NR_VA_VV",
"了 AD_AS_NN_NR_P_SP_VE_VV",
"涉 JJ_NN_VV",
"经 AD_JJ_NN_NR_P_VA_VV",
"贸 AD_JJ_NN_NR_VV",
"规 AD_JJ_NN_VA_VV",
"科 AD_JJ_M_NN_NR_VA_VV",
"文 AD_JJ_NN_NR_VA_VV",
"等 CC_ETC_JJ_M_NN_NR_P_VC_VV",
"领 NN_VV",
"的 AD_CD_DEC_DEG_DER_DEV_NN_SP_VE_VV",
"件 JJ_M_NN_VV",
"性 AD_JJ_NN_VV",
", PU",
"确 AD_JJ_NN_NR_VA_VE_VV",
"有 AD_AS_CC_CD_DEC_DEG_DER_DT_JJ_M_MSP_NN_NT_P_PN_SP_VA_VC_VE_VV",
"进 AD_JJ_M_NN_NR_VA_VV",
". PU",
"是 AD_CC_CS_DEC_DT_NN_P_VC_VV",
"一 AD_CD_CS_DT_ETC_JJ_LC_M_NN_NR_NT_OD_PN_VA_VE_VV",
"项 M_NN_NR",
"振 NN_NR_VV",
"现 AD_JJ_NN_NR_NT_VA_VE_VV",
"金 JJ_NN_NR_VA_VV",
"中 AD_AS_JJ_LC_M_NN_NR_NT_VA_VV",
"跨 AD_AS_JJ_M_NN_VV",
"世 JJ_LC_M_NN_NR_VV",
"工 JJ_NN_NR_VA_VV",
"因 AD_CS_DT_NN_NR_P_PN_VV",
"大 AD_AS_CD_JJ_LC_M_NN_NR_NT_PN_VA_VE_VV",
"出 AD_CD_JJ_LC_M_NN_VA_VV",
"以 AD_CC_CS_DT_JJ_LC_MSP_NN_NR_NT_P_PN_VV",
"不 AD_AS_CC_CD_CS_JJ_LC_NN_NR_NT_SP_VA_VC_VE_VV",
"遇 NN_VV",
"过 AD_AS_CD_JJ_LC_NN_NT_P_VA_VV",
"情 JJ_NN_VA_VV",
"问 NN_VV",
"对 AD_CC_JJ_M_NN_NR_P_PN_VA_VV",
"此 AD_DT_M_NN_NT_PN_VV",
"简 AD_JJ_NN_NR_VA_VV",
"采 NN_NR_VV",
"\" PU",
"干 AD_ETC_JJ_NN_VA_VV",
"时 AD_JJ_LC_M_NN_NR_NT_VA_VV",
"积 AD_JJ_NN_VA_VV",
"再 AD_NN_VV",
"制 JJ_NN_VV",
"条 M_NN_NR_VV",
"做 AD_AS_JJ_NN_P_VV",
"而 AD_CC_JJ_MSP_NN_SP_VC_VV",
"借 JJ_NN_VV",
"发 JJ_NN_NR_VA_VV",
"和 AD_CC_ETC_JJ_NN_NR_P_VA_VV",
"深 AD_JJ_NN_NR_VA_VV",
"特 AD_DEC_JJ_NN_NR_VA_VV",
"教 JJ_NN_NR_VV",
"聘 NN_VV",
"国 AD_JJ_LC_NN_NR_VE_VV",
"专 AD_JJ_NN_VA_VV",
"学 JJ_LC_NN_NR_VV",
"及 AD_CC_DT_JJ_NN_PN_VA_VV",
"地 AD_DEC_DER_DEV_JJ_LC_NN_NR_VA_VV",
"推 NN_VV",
"使 NN_VV",
"这 AD_DT_JJ_M_NN_NT_PN_VV",
"活 AD_JJ_NN_NR_VA_VV",
"就 AD_CS_DT_JJ_NN_P_PN_VC_VV",
"被 JJ_LB_NN_SB_VA_VV",
"纳 NN_NR_VV",
"轨 JJ_NN",
"去 MSP_NN_NR_NT_VV",
"初 AD_JJ_LC_M_NN_NT_VV",
"诞 NN_VV",
"第 AD_JJ_M_NN_NR_OD",
"家 JJ_LC_M_NN_NR_VA_VE_VV",
"医 JJ_NN_VV",
"机 JJ_M_NN_NR_VA_VV",
"药 NN_VV",
"服 JJ_NN_VV",
"正 AD_JJ_LC_M_NN_NR_NT_VA_VC_VV",
"比 AD_CC_JJ_NN_NR_P_VA_VV",
"运 JJ_NN_NR_OD_VV",
"至 AD_CC_LC_NN_NR_NT_P_PN_VA_VV",
"成 AD_CD_JJ_NN_NR_VA_VC_VV",
"多 AD_CD_JJ_LC_M_NN_NR_NT_PN_VA_VV",
"元 JJ_M_NN_NR_NT_VA_VV",
"没 AD_DT_NN_SP_VA_VE_VV",
"例 AD_JJ_M_NN_VV",
"回 DER_M_NN_VV",
"主 AD_JJ_NN_VA_VC_VV",
"年 AD_CD_JJ_LC_M_NN_NR_NT_OD_VA_VV",
"公 AD_JJ_LC_M_NN_NR_VA_VC_VV",
"余 CD_JJ_M_NN_NR_VV",
"遍 AD_M_NN_VV",
"在 AD_DT_JJ_LC_NN_P_PN_VE_VV",
"片 AD_LC_M_NN_VA_VV",
"热 AD_JJ_NN_NR_VA_VV",
"为 AD_JJ_LB_LC_MSP_NN_NR_OD_P_PN_VA_VC_VV",
"行 AD_JJ_LC_M_NN_NR_VV",
"防 JJ_NN_NR_VV",
"无 AD_CC_CD_CS_JJ_LC_NN_NR_VA_VC_VE_VV",
"管 BA_M_NN_NR_VC_VV",
"根 AD_JJ_LC_M_NN_NR_P_VV",
"市 JJ_LC_NN_NR_VV",
"结 AD_JJ_NN_NR_VA_VV",
"其 AD_DT_JJ_NN_NT_PN_VV",
"包 AD_JJ_M_NN_NR_P_VV",
"施 NN_NR_VV",
"招 M_NN_NR_VV",
"投 JJ_NN_VA_VV",
"办 NN_NR_VV",
"拆 NN_VV",
"若 CD_CS_P_VC_VV",
"整 AD_DT_JJ_M_NN_VA_VV",
"违 AD_JJ_NN_VA_VV",
"通 AD_JJ_M_NN_NR_P_VA_VV",
"设 JJ_NN_VV",
"配 JJ_NN_VV",
"意 AD_JJ_LC_NN_NR_VA_VV",
"环 JJ_M_NN_NR_VV",
"暂 AD_JJ_NN_VA_VV",
"基 AD_JJ_LC_NN_NR_P_VA_VV",
"每 AD_CD_DT_JJ_M_NN_P_VV",
"都 AD_JJ_NN_NR_VV",
"明 AD_JJ_NN_NR_NT_VA_VV",
"又 AD_CC_NR_VC_VV",
"具 AD_JJ_M_NN_VA_VE_VV",
"区 AD_JJ_M_NN_NR_VV",
"部 AD_CD_JJ_M_NN_NR_VV",
"先 AD_JJ_NN_NR_VA_VC_VV",
"送 NN_VV",
"然 AD_NN_NR_VA_VV",
"队 M_NN_NR",
"监 JJ_NN_VV",
"检 NN_VV",
"尽 AD_CS_NN_VA_VC_VV",
"粗 JJ_NN_NR_VA_VV",
"还 AD_CC_JJ_NN_VA_VV",
"只 AD_CS_M_VC_VE_VV",
"逐 AD_JJ_NN_VV",
"完 AD_AS_JJ_NN_VA_VV",
"但 AD_CC_NR_VC",
"紧 AD_AS_JJ_NN_VA_VV",
"社 JJ_LC_NN_NR_VV",
"受 AS_JJ_LB_NN_P_SB_VA_VV",
"好 AD_CD_JJ_M_MSP_NN_NR_P_VA_VV",
"他 DT_NN_PN_VV",
"认 AD_JJ_NN_VA_VC_VV",
"到 AD_CC_NN_P_PN_VV",
"章 M_NN_NR_VV",
"讲 NN_VV",
"利 JJ_NN_NR_VV",
"能 AD_JJ_NN_NR_VA_VV",
"得 AD_AS_DEC_DER_NN_VA_VV",
"保 AD_AS_DEC_JJ_NN_NR_VA_VV",
"外 AD_JJ_LC_NN_NR_VV",
"企 JJ_NN_NR_VV",
"重 AD_JJ_NN_NR_VA_VV",
"增 JJ_NN_VV",
"北 CC_JJ_LC_NN_NR_VV",
"唐 LC_NN_NR",
"改 AD_JJ_NN_VV",
"商 AD_JJ_NN_NR_VV",
"显 AD_JJ_NN_NR_VA_VV",
"作 NN_NR_P_VV",
"占 AD_NN_VV",
"达 JJ_NN_NR_VV",
"美 JJ_M_NN_NR_VA_VV",
"高 AD_CD_DEG_DEV_JJ_M_NN_NR_VA_VV",
"全 AD_CD_DT_JJ_M_NN_NR_VA_VV",
"平 AD_JJ_M_NN_NR_VA_VV",
"水 ETC_JJ_NN_NR_VA_VV",
"仍 AD_VC",
"轻 AD_JJ_NN_VA_VV",
"产 JJ_NN_VA_VV",
"最 AD_JJ_LB_NN_NT_VA_VV",
"则 AD_M_NN",
"原 AD_JJ_LC_NN_NR_VA_VE_VV",
"个 AD_AS_CD_DER_JJ_M_NN_PN_VA",
"边 AD_JJ_LC_M_NN_NR_VV",
"城 JJ_LC_NN_NR_VV",
"取 JJ_NN_VV",
"可 AD_JJ_NN_NR_VA_VC_VV",
"于 AD_CC_NR_P_VC_VV",
"批 AD_M_NN_VV",
"黑 JJ_NN_NR_VA_VV",
"凭 AD_AS_NN_NR_P_VV",
"珲 NR",
"伊 DEG_NN_NR_VV",
"瑞 M_NR",
"合 AD_JJ_NN_NR_VA_VC_VV",
"三 AD_CD_JJ_LC_M_NN_NR_NT_OD_VV",
"来 AD_DER_DEV_JJ_LC_M_MSP_NN_NR_NT_VA_VV",
"迅 AD_JJ_NN_NR_VA",
"; PU",
"据 AD_JJ_NN_P_PN_VV",
"介 NN_VV",
"步 AD_M_NN_VA_VV",
"加 AD_CC_CD_JJ_LC_M_NN_NR_VV",
"累 AD_JJ_NN_VA_VV",
"固 AD_JJ_NN_NR_VA_VV",
"昔 AD_NN_NR_NT_VV",
"楼 M_NN",
"路 AD_LC_M_NN_NR",
"灯 NN_NR_VV",
"清 AD_JJ_NN_NR_NT_VA_VV",
"畅 AD_NN_VA_VV",
"状 JJ_NN_VV",
"已 AD_JJ_NN_VV",
"内 AD_JJ_LC_NN_NR_VA_VV",
"引 NN_VV",
"联 AD_JJ_NN_NR_P_VV",
"呈 NN_VV",
"格 AD_M_NN_NR_VA_VV",
"统 AD_JJ_NN_NR_VA_VV",
"目 DEC_DEG_NN_NR_NT_VV",
"境 NN",
"承 NN_NR_VV",
"始 AD_JJ_NN_NR_VA_VV",
"代 JJ_LC_M_NN_NR_NT_VV",
"日 AD_JJ_M_NN_NR_NT_VV",
"英 AD_JJ_M_NN_NR_VA_VV",
"德 JJ_NN_NR",
"芬 NN_NR",
"香 JJ_NN_NR_VA_VV",
"台 AD_CD_JJ_LC_M_NN_NR_VV",
"总 AD_JJ_NN_NR_VC_VE_VV",
"或 AD_CC_VV",
"分 AD_CD_JJ_M_NN_OD_VA_VV",
"凡 AD_DT_NN",
"属 NN_P_VV",
"组 JJ_LC_M_NN_VV",
"贷 NN_VV",
"并 AD_CC_NN_NR_VA_VC_VV",
"由 AD_CS_JJ_NN_NR_P_PN_VA_VV",
"赠 NN_VV",
"技 JJ_NN_VV",
"难 AD_NN_NR_VA_VV",
"单 AD_CD_JJ_M_NN_NR_VA_VV",
"审 AD_JJ_M_NN_VA_VV",
"资 JJ_NN_NR_VA_VV",
"证 JJ_NN_NR_VV",
"后 AD_DT_JJ_LC_NN_PN_VV",
"皆 AD_VC_VV",
"《 PU",
"关 JJ_M_NN_NR_P_VA_VV",
"》 PU",
"从 AD_DT_JJ_NN_NR_NT_P_PN_VA_VV",
"允 VV",
"西 AD_JJ_LC_M_NN_NR_VV",
"拉 NN_NR_VV",
"央 NN_NR_VV",
"珍 JJ_NN_NR_VA_VV",
"各 AD_DT_JJ_M_NN_PN_VA_VV",
"存 NN_VA_VV",
"首 AD_DT_JJ_M_NN_NR_OD_VV",
"突 AD_JJ_NN_NR_VA_VV",
"净 AD_JJ_NN_VV",
"体 LC_NN_NR_VA_VV",
"接 AD_AS_JJ_NN_VA_VV",
"售 NN_VV",
"核 JJ_NN_VV",
"流 JJ_NN_NR_VA_VV",
"远 AD_JJ_NN_NR_VA_VV",
"速 AD_JJ_NN_VV",
"提 AD_NN_NR_VV",
"要 AD_CS_NN_VA_VC_VV",
"银 JJ_LC_NN_NR_VV",
"调 JJ_NN_VV",
"信 JJ_NN_NR_VA_VV",
"农 JJ_LC_NN_NR_NT_VV",
"生 AD_JJ_LC_NN_NR_VA_VV",
"交 JJ_NN_NR_NT_VV",
"供 NN_VV",
"量 NN_VV",
"货 JJ_NN_VV",
"物 NN_VV",
"人 AD_JJ_LC_M_NN_NR_PN_VA_VC_VV",
"随 AD_AS_JJ_NN_NR_P_VA_VV",
"华 JJ_LC_NN_NR_VA_VV",
"很 AD_CD_JJ_NN_VA_VV",
"十 AD_CD_JJ_LC_M_NN_NR_NT_OD_VA_VV",
"迄 AD_LC_VV",
"绝 AD_CD_JJ_NN_NR_VA_VC_VV",
"较 AD_JJ_LC_NN_P_VA_VV",
"获 NN_VV",
"仅 AD_DEG_VV",
"向 AD_JJ_NN_NR_P_VA_VV",
"另 AD_DT_JJ_M_NN_VV",
"支 M_NN_VV",
"化 JJ_NN_NR_VV",
"底 AD_LC_NN_NR_VV",
"约 AD_NN_NR_VV",
"立 AD_JJ_M_NN_NR_VA_VV",
"帐 JJ_LC_NN_VV",
"负 CD_JJ_NN_VA_VV",
"透 AD_AS_JJ_NN_P_VA_VV",
"今 AD_DT_NN_NR_NT_VV",
"将 AD_BA_NN_NT_VV",
"继 AD_JJ_NN_P_PN_VV",
"方 AD_JJ_M_NN_NR_VA_VV",
"渠 NN_NR",
"适 AD_JJ_NN_VA_VV",
"倾 AD_NN_VV",
"尤 AD_NN_NR_VC",
"也 AD_CC_NR_SP_VA_VC_VV",
"海 AD_ETC_JJ_LC_NN_NR_VV",
"崇 JJ_NN_NR_VA_VV",
"孔 JJ_NN_NR_VV",
"夏 NN_NR_NT_VV",
"驻 JJ_NN_VV",
"业 AD_JJ_LC_NN_NR_VV",
"奉 NN_NR_VV",
"莘 NR_VV",
"嘉 NN_NR_VV",
"松 AD_JJ_NN_NR_VA_VV",
"青 JJ_NN_NR_VA_VV",
"之 AD_CD_DEC_DEG_JJ_LC_NN_NR_NT_P_PN_VV",
"岛 NN_NR",
"优 AD_JJ_NN_NR_VA_VV",
"悠 AD_JJ_NN_VA_VV",
"历 AD_DT_JJ_M_NN_NT_VV",
"综 AD_JJ_NN_VV",
"百 CD_M_NN_NR_VV",
"强 AD_CD_JJ_NN_NR_VA_VV",
"县 JJ_NN_NR",
"足 AD_JJ_NN_VA_VV",
"手 JJ_LC_M_NN_VV",
"吸 JJ_NN_VA_VV",
"快 AD_JJ_NN_NR_VA_VV",
"把 BA_M_NN_NR_VV",
"港 JJ_M_NN_NR_VV",
"带 AS_MSP_NN_VE_VV",
"航 JJ_M_NN_NR_VV",
"起 AD_JJ_LC_M_NN_P_VV",
"广 AD_JJ_NN_NR_VA_VV",
"南 LC_NN_NR_VV",
"刘 NN_NR_VV",
"数 AD_CD_JJ_M_NN_VV",
"前 AD_DT_JJ_LC_M_NN_NR_NT_VA_VV",
"默 AD_NN_NR_VV",
"小 AD_JJ_M_NN_NR_NT_VA_VV",
"渔 NN_NR_VV",
"框 NN_VV",
"街 LC_NN_NR",
"客 AD_JJ_NN_NR_VA_VV",
"如 AD_CD_CS_DT_JJ_NN_NR_NT_P_PN_VA_VV",
"潮 JJ_NN_VA_VV",
"拔 VV",
"升 NN_NR_VV",
"颗 JJ_M_NN",
"崛 NN_VV",
"卓 JJ_NN_NR_VA",
"标 AS_JJ_M_NN_NR_VA_VV",
"形 AD_JJ_LC_NN_VA_VV",
"沿 AD_NN_P_VV",
"相 AD_JJ_LC_NN_P_PN_VA_VV",
"腹 NN",
"层 AD_JJ_M_NN_VV",
"政 AD_JJ_NN_NR_VV",
"战 BA_JJ_LC_NN_NR_VV",
"布 NN_NR_VV",
"横 JJ_M_NN_NR_VV",
"下 AD_DT_JJ_LC_M_NN_NR_NT_VV",
"放 LC_NN_NR_VV",
"钦 NR_VV",
"充 AD_JJ_NN_VA_VV",
"促 NN_VV",
"柳 NN_NR_VV",
"试 JJ_NN_VV",
"玉 NN_NR",
"桂 NN_NR",
"旅 JJ_NN_NR_OD_VA_VV",
"右 LC_NN_NR_VV",
"江 LC_NN_NR_VV",
"谷 LC_NN_NR_VV",
"扶 JJ_NN_NR_VA_VV",
"红 JJ_NN_NR_VA_VV",
"河 JJ_LC_NN_NR",
"扩 NN_VV",
"创 JJ_NN_NR_VA_VV",
"良 AD_JJ_NN_NR_VA_VV",
"骨 LC_NN_NR_VV",
"雄 JJ_NN_NR_VA_VV",
"藤 NN_NR",
"忠 AD_JJ_NN_NR_VA_VV",
"株 M_NN_NR",
"韩 M_NN_NR_VV",
"宇 NN_NR",
"集 AD_JJ_M_NN_NR_VA_VV",
"长 AD_JJ_LC_NN_NR_VA_VV",
"纷 AD_NN_VA_VV",
"便 AD_JJ_NN_VA_VC_VV",
"四 AD_CD_JJ_LC_M_NN_NR_NT_OD_VV",
"云 JJ_NN_NR_VV",
"贵 NN_NR_VA_VV",
"湖 AD_NN_NR_VV",
"省 JJ_NN_NR_VV",
"协 AD_JJ_NN_NR_VA_VV",
"甘 NN_NR_VA_VV",
"兰 NN_NR",
"曲 JJ_M_NN_NR_VA_VV",
"兴 AD_JJ_NN_NR_VA_VV",
"铝 NN",
"常 AD_JJ_NN_NR_VA_VE_VV",
"汽 NN_NR",
"雇 JJ_NN_VV",
"责 NN_VV",
"险 AD_JJ_NN_VA_VV",
"损 JJ_NN_VV",
"种 JJ_M_NN_VV",
"满 AD_JJ_NN_NR_VA_VV",
"需 NN_VA_VV",
"率 AD_NN_VA_VV",
"入 JJ_NN_VV",
"秦 NN_NR",
"自 AD_DT_JJ_LC_NN_NR_P_PN_VA_VE_VV",
"灌 JJ_NN_NR_VV",
"风 AD_JJ_NN_NR_VA_VV",
"额 JJ_NN_NR",
"安 AD_JJ_NN_NR_VA_VV",
"津 NN_NR_VV",
"石 JJ_M_NN_NR_VV",
"钻 NN_VV",
"限 AD_JJ_NN_NR_VV",
"洽 NN_NR_VV",
"劳 JJ_NN_VV",
"输 NN_VV",
"火 AD_NN_NR_VA_VV",
"债 NN_VV",
"a CD_FW_JJ_NN_NR",
"当 AD_AS_DT_JJ_M_NN_NR_NT_P_VV",
"评 JJ_NN_NR_VV",
"研 NN_NR_VA_VV",
"野 ETC_JJ_NN_NR_VV",
"顾 NN_NR_VV",
"著 AS_JJ_NN_P_VA_VV",
"申 NN_NR_VV",
"决 AD_CD_JJ_NN_VV",
"融 NN_VA_VV",
"准 AD_JJ_NN_VA_VV",
"书 JJ_NN_VV",
"考 NN_NR_VA_VV",
"背 AS_LC_NN_VV",
"杭 NN_NR",
"转 AD_CC_JJ_LC_MSP_NN_NR_VV",
"税 AD_JJ_LC_NN_VV",
"位 JJ_M_NN_VV",
"- NN_NR_PU_VV",
"该 DT_VV",
"列 NN_NR_VV",
"计 AD_NN_VV",
"名 JJ_LC_M_NN_NR_VA_VV",
"应 AD_JJ_NN_NR_P_VE_VV",
"光 AD_JJ_NN_NR_VA_VC_VV",
"浙 NN_NR",
"院 NN_NR",
"毛 CD_JJ_M_NN_NR_VV",
"甲 CD_LC_M_NN_NR_VV",
"减 JJ_NN_VV",
"毒 JJ_NN_NR_VA_VV",
"疫 NN",
"卫 NN_NR_VV",
"普 AD_JJ_NN_NR_VA_VV",
"康 NN_NR_VV",
"份 AD_M_NN_VV",
"控 JJ_NN_VV",
"曾 AD_NN_NR",
"荣 JJ_NN_NR_VV",
"奖 NN_NR_VV",
"氮 NN",
"气 NN_VA_VV",
"直 AD_CC_JJ_NN_NR_VA_VV",
"硅 NN_NR",
"半 AD_CD_JJ_LC_M_NN_NR_NT_VA_VV",
"厂 NN_VV",
"佼 NN",
"吨 CD_M_NN",
"居 AD_M_NN_NR_VV",
"销 AD_NN_VV",
"东 AD_JJ_LC_NN_NR_VA_VV",
"欧 JJ_M_NN_NR",
"许 AD_CD_JJ_LC_NN_NR_VA_VV",
"两 AD_CD_JJ_M_NN_NR_NT_VA_VV",
"顺 AD_AS_JJ_NN_NR_VA_VV",
"祖 JJ_NN_NR",
"趋 NN_VV",
"案 NN_VV",
"共 AD_JJ_NN_NR_VA_VE_VV",
"却 AD_CC_VV",
"京 JJ_NN_NR_VV",
"古 AD_JJ_NN_NR_NT_VA_VV",
"贯 JJ_NN_VV",
"欣 AD_NN_NR_VA_VV",
"走 AS_NN_NR_VV",
"繁 JJ_NN_VA_VV",
"极 AD_JJ_NN_VA_VV",
"看 AD_NN_VA_VV",
"黄 AD_JJ_NN_NR_VA_VV",
"星 JJ_NN_NR_NT_VV",
"万 AD_CD_JJ_M_NN_NR_VA_VV",
"乡 NN_NR_VV",
"给 JJ_NN_P_VV",
"排 JJ_M_NN_NR_VV",
"苏 NN_NR_VC_VV",
"钢 JJ_NN_NR",
"靠 NN_P_VV",
"煤 NN",
"徐 AD_NR",
"陆 AD_JJ_LC_NN_NR_VV",
"节 AD_JJ_LC_M_NN_VA_VV",
"座 M_NN_VV",
"老 AD_BA_JJ_M_NN_NR_VA_VV",
"连 AD_CC_JJ_NN_NR_P_VA_VV",
"范 AD_NN_NR",
"培 NN_NR_VV",
"动 AD_JJ_NN_VA_VV",
"变 DER_JJ_NN_VA_VV",
"七 AD_CD_M_NN_NR_NT_OD_VV",
"均 AD_JJ_NN_VA_VV",
"超 AD_JJ_NN_NR_VA_VV",
"亿 CD_JJ_NR",
"镇 NN_NR_VA_VV",
"扬 NN_NR_VV",
"傍 LC_NN_NT_P",
"依 AD_NN_NR_P_VA_VV",
"独 AD_JJ_NN_NR_VA_VV",
"八 CD_LC_M_NN_NR_NT_OD_VA_VV",
"更 AD_CC_CD_JJ_LB_M_NN_VA_VV",
"即 AD_BA_CS_JJ_NN_VA_VC_VV",
"举 AD_NN_VA_VV",
"双 AD_CD_JJ_M_NN_NR_PN_VV",
"讨 NN_VA_VV",
"它 DT_NN_PN",
"界 JJ_NN_NR_VV",
"往 AD_NN_P_VV",
"截 M_NN_P_VA_VV",
"预 AD_JJ_LC_NN_VV",
"权 JJ_NN_NR_VA_VV",
"会 AD_NN_NR_VV",
"着 AD_AS_NN_P_SP_VA_VV",
"降 JJ_LC_NN_VV",
"退 JJ_LC_NN_VV",
"民 AD_JJ_LC_NN_NR_NT_VA_VV",
"程 JJ_NN_NR",
"谈 NN_NR_VV",
"议 NN_NR_VV",
"亚 DEG_NN_NR",
"司 JJ_NN_NR_VV",
"们 NN_PN",
"沙 NN_NR",
"头 DT_ETC_JJ_LC_M_NN_NR_OD_VA_VV",
"五 CD_JJ_M_NN_NR_NT_OD_VV",
"仓 AD_NN_NR_VA_VV",
"辅 JJ_NN_NR_VV",
"按 AD_NN_P_VV",
"除 CS_JJ_LC_NN_NT_P_VV",
"措 NN_VV",
"予 NR_P_PN_VV",
"真 AD_JJ_NN_NR_VA_VC_VV",
"参 JJ_NN_VV",
"模 AD_JJ_NN_VA_VV",
"硬 AD_JJ_NN_VA_VC_VV",
"软 AD_JJ_NN_VA",
"契 NN_VV",
"站 JJ_M_NN_NR_VV",
"式 AD_JJ_M_NN_VV",
"功 NN_NR_VA_VV",
"传 AD_JJ_NN_NR_VA_VV",
"零 AD_CD_JJ_NN_NT_VA_VV",
"指 JJ_NN_VV",
": PU",
"态 JJ_NN",
"面 JJ_LC_M_NN_P_VA_VV",
"持 AD_JJ_NN_VV",
"稳 AD_JJ_NN_VA_VV",
"二 AD_CD_JJ_M_NN_NR_OD_VV",
"表 NN_VA_VV",
"严 AD_DEG_JJ_NN_NR_VA_VV",
"竣 JJ_NN_VV",
"挑 NN_VA_VV",
"困 JJ_NN_VA_VV",
"薄 AD_JJ_NN_VA_VV",
"必 AD_JJ_NN_NR_VA_VV",
"本 AD_AS_DT_JJ_LC_M_NN_NR_P_PN_VV",
"竞 AD_NN_VV",
"质 JJ_NN_VA_VV",
"拓 NN_NR_VV",
"激 AD_JJ_NN_NR_VA_VV",
"武 CD_JJ_NN_NR_VV",
"事 AD_JJ_LC_NN_VV",
"期 JJ_LC_M_NN_VA_VV",
"偿 NN_VV",
"筹 JJ_NN_VV",
"用 JJ_LC_MSP_NN_P_VV",
"岭 NN_NR",
"澳 JJ_M_NN_NR_VV",
"敏 NN_NR_VA",
"绥 NR",
"力 JJ_NN_NR_VA_VV",
"系 CS_JJ_M_NN_NR_VA_VC_VV",
"胡 NN_NR_VV",
"鼓 NN_NR_VA_VV",
"洋 AD_JJ_NN_NR_VA_VV",
"六 CD_M_NN_NR_NT_OD_VE_VV",
"隔 JJ_NN_NT_P_VV",
"努 AD_NN_NR_VA_VV",
"争 AD_BA_NN_VV",
"琼 NR",
"宁 AD_JJ_NN_NR_VA_VV",
"柴 AD_NN_NR_VV",
"丰 JJ_NN_NR_VA_VV",
"储 NN_VV",
"免 AD_JJ_NN_VV",
"落 JJ_LC_NN_VA_VV",
"众 AD_CD_JJ_NN_VA_VV",
"注 JJ_NN_VV",
"登 AD_NN_NR_VV",
"抓 AD_NN_VA_VV",
"网 JJ_LC_NN_NR_VV",
"太 AD_NN_NR_VV",
"鄯 NR",
"宝 M_NN_NR_VA_VV",
"山 LC_NN_NR_VA_VV",
"陕 NR",
"唯 AD_CD_JJ_NN_VV",
"木 JJ_NN_NR_VV",
"烟 LC_NN_NR_VV",
"粮 JJ_NN",
"林 AD_JJ_LC_NN_NR_VA_VV",
"尾 JJ_LC_M_NN_NR",
"门 LC_M_NN_NR_VV",
"伏 M_NN_NR_VV",
"柠 NN",
"油 NN_NR_VA_VV",
"源 AD_JJ_NN_NR_VA_VV",
"妇 NN",
"儿 JJ_NN_NT_VV",
"财 NN_NR_VV",
"笔 JJ_LC_M_NN_VA_VV",
"宜 NN_NR_VA",
"m JJ_NN_NR",
"赴 VV",
"签 NN_VV",
"定 AD_JJ_M_NN_NR_VA_VV",
"委 JJ_NN_NR_VA_VV",
"曹 NR",
"营 JJ_NN_NR_VA_VV",
"围 AS_NN_NR_VV",
"温 JJ_NN_NR_VA_VV",
"探 AS_NN_VV",
"未 AD_DEC_JJ_NN_NT_VA_VV",
"间 AD_JJ_LC_M_NN_NR_VV",
"龙 JJ_NN_NR_VV",
"启 NN_NR_VV",
"型 JJ_M_NN_VV",
"效 NN_VA_VV",
"闽 LC_NN_NR",
"福 NN_NR_VA_VV",
"厦 NR",
"泉 NR",
"漳 NR",
"莆 NN_NR",
"局 AD_CD_JJ_NN_VA_VV",
"跻 VV",
"涌 NN_NR_VV",
"含 AS_NN_VA_VV",
"晋 NN_NR_VV",
"桥 NN_NR_VV",
"示 NN_VV",
"呼 AD_NN_NR_VV",
"何 AD_DT_M_NN_NR_PN_VV",
"俄 JJ_NN_NR",
"蒙 JJ_NN_NR_VV",
"类 JJ_M_NN_VA_VV",
"口 AD_JJ_LC_M_NN_NR_VV",
"九 CD_JJ_M_NN_NR_NT_OD",
"乱 AD_NN_VA_VV",
"罚 NN_VV",
"勒 NN_NR_VV",
"收 JJ_NN_VV",
"私 AD_JJ_NN_VA_VV",
"缴 NN_VV",
"卡 NN_NR_VV",
"盟 NN_NR",
"撤 JJ_NN_VV",
"掉 NN_VV",
"堵 M_NN_VV",
"低 AD_ETC_JJ_M_NN_VA_VV",
"月 AD_JJ_NN_NR_NT_VV",
"左 AD_JJ_LC_NN_NR_VV",
"天 AD_JJ_LC_M_NN_NR_NT_VA_VV",
"照 AD_DEG_NN_NR_P_VV",
"身 LC_NN_P_VV",
"缩 NN_VV",
"旗 LC_NN_NR_VV",
"里 LC_M_NN_NR_VA_VV",
"宾 NN_NR",
"饭 NN_NR",
"所 AD_DEC_DT_JJ_M_MSP_NN_NR_VE_VV",
"飞 AD_JJ_NN_NR_VA_VV",
"段 M_NN_NR",
"铁 JJ_NN_NR_VV",
"空 AD_JJ_NN_NR_VA_VE_VV",
"观 NN_NR_VV",
"矿 NN_NR",
"铅 JJ_NN",
"锌 NN",
"希 JJ_NN_NR_VV",
"易 AD_JJ_NN_NR_VA_VV",
"倍 CD_M_NN_NR_VV",
"食 JJ_NN_VV",
"塑 JJ_NN_NR_VV",
"价 JJ_NN_VA_VV",
"赵 NN_NR",
"召 NN_VV",
"势 AD_NN_NR_VV",
"幅 JJ_M_NN",
"佳 JJ_NN_NR_VA_VV",
"马 AD_JJ_M_NN_NR_VV",
"斯 DT_NN_NR_VA",
"精 AD_JJ_NN_VA_VV",
"密 AD_JJ_NN_NR_VA_VV",
"档 M_NN_VV",
"越 AD_AS_JJ_LC_NN_NR_VA_VC_VV",
"缅 NR_VV",
"泰 DEG_NN_NR",
"仰 NR_VV",
"抵 NN_VV",
"访 NN_VV",
"班 M_NN_NR_VV",
"恢 AD_NN_VV",
"秩 NN",
"丹 NN_NR",
"仪 JJ_NN_NR_VV",
"吞 NN_NR_VV",
"印 NN_NR_VA_VV",
"孟 NR",
"官 JJ_NN_VV",
"昨 NT",
"器 NN_VV",
"诊 JJ_NN_VV",
"x NN",
"咨 AD_NN_VV",
"租 NN_VV",
"职 JJ_NN_VV",
"购 JJ_NN_VV",
"辽 NN_NR_VA",
"沈 AD_JJ_NN_NR_VA_VV",
"拥 NN_VA_VV",
"钞 JJ_NN_NR",
"股 AD_JJ_M_NN_NR_VV",
"处 AD_JJ_LC_M_MSP_NN_PN_VV",
"陈 JJ_NN_NR_VV",
"称 NN_NR_VA_VC_VV",
"募 AS_NN_VV",
"说 AD_AS_CS_NN_VV",
"车 JJ_LC_NN_NR_VV",
"执 JJ_NN_VV",
"料 JJ_NN_VV",
"焦 AD_NN_NR_VV",
"粤 NN_NR",
"漏 NN_VV",
"健 AD_JJ_NN_NR_VA_VV",
"征 NN_VV",
"费 NN_VV",
"备 JJ_NN_VV",
"略 AD_NN_VV",
"反 AD_JJ_NN_VA_VV",
"周 CD_JJ_M_NN_NR_NT_VA_VV",
"援 JJ_NN_PN_VV",
"度 AS_M_NN_NR_NT_VV",
"线 M_NN_VV",
"微 AD_JJ_M_NN_NR_VA_VV",
"慢 AD_JJ_NN_VA_VV",
"消 JJ_NN_VA_VV",
"惠 NR_VV",
"彩 JJ_NN_NR",
"值 AD_DT_NN_VA_VV",
"蓬 AD_NN_NR_VA_VV",
"尝 NN_VV",
"甜 JJ_NN_NR_VA",
"岸 JJ_LC_NN",
"园 JJ_NN_NR",
"宽 JJ_NN_NR_VA_VV",
"旁 AD_LC_NN_NR_VV",
"映 NN_VV",
"亩 M",
"斥 VC_VV",
"阶 JJ_NN_VV",
"几 AD_CD_LC_M_NN_NR_VV",
"晶 NN_NR_VA",
"材 JJ_NN_VV",
"画 M_NN_VV",
"p CD_NN_NR",
"复 AD_JJ_NN_NR_VA_VV",
"袋 M_NN_VV",
"压 JJ_NN_VA_VV",
"鉴 NN_P_VV",
"珠 NN_NR_VA",
"侨 JJ_NN_VV",
"李 JJ_NN_NR_VV",
"滨 JJ_NN_NR",
"架 M_NN_VV",
"载 JJ_M_NN_VV",
"互 AD_JJ_NN_VV",
"寻 NN_VV",
"亦 AD_CC_VC_VV",
"派 JJ_M_NN_VV",
"展 LC_NN_NR_VV",
"团 AD_JJ_M_NN_VV",
"坚 AD_JJ_NN_VA_VV",
"堪 NR_VV",
"悉 AD_NR",
"点 AD_CD_M_NN_NT_VV",
"阐 NN_VV",
"番 AD_LC_M_NN_NR",
"话 NN_SP_VV",
"拟 NN_VV",
"党 JJ_LC_NN_NR_VV",
"牟 NR_VV",
"凌 NR_NT_VA_VV",
"茂 NN_NR",
"乙 M_NN_NR",
"副 JJ_M_NN",
"梁 NN_NR",
"终 AD_JJ_NN_VV",
"冻 VA_VV",
"级 JJ_M_NN_VV",
"泊 NN_VV",
"装 JJ_NN_VV",
"道 JJ_M_NN_NR_VA_VV",
"邮 NN_VV",
"纵 AD_CS_JJ_NN_NR_VV",
"滕 NR",
"乐 AD_JJ_NN_NR_VA_VV",
"聚 AD_JJ_NN_NR_VE_VV",
"脂 NN_VV",
"切 AD_JJ_NN_NR_VA_VV",
"玻 NN_NR",
"壳 NN",
"郑 AD_NR_VA",
"郭 NR",
"王 NN_NR_VV",
"邹 NN_NR",
"剪 JJ_NN_VV",
"套 M_NN_VV",
"既 AD_CC_CS_JJ_NN_PN_VC_VE_VV",
"厘 CD_M_VV",
"屏 NN_NR_VV",
"打 DEC_NN_NR_P_VV",
"千 AD_CD_M_NN_NR_NT_VV",
"品 M_NN_NR_VV",
"覆 AD_NN_VV",
"返 NN_VV",
"静 AD_JJ_NN_NR_VA_VV",
"我 NN_PN_VV",
"博 JJ_NN_NR_VV",
"别 AD_DEC_DEG_JJ_NN_NR_VV",
"思 AD_NN_VV",
"肯 AD_JJ_NN_NR_VA_VV",
"奇 JJ_NN_NR_VA_VV",
"破 JJ_NN_VA_VV",
"锥 NN",
"炉 NN_VV",
"延 NN_NR_VV",
"白 JJ_NN_NR_NT_VA_VV",
"游 JJ_NN_NR_VV",
"知 AS_JJ_NN_VA_VV",
"i NN_NR_VV",
"波 M_NN_NR_VA_VV",
"麦 NN_NR",
"屋 LC_NN_NR_VV",
"仙 NN_NR",
"妮 NR",
"雷 NN_NR_VV",
"助 JJ_NN_NR_P_VV",
"临 AD_JJ_NN_P_VV",
"担 M_NN_VV",
"写 NN_VA_VV",
"律 NN",
"克 AD_M_NN_NR_VV",
"那 AD_CS_DT_JJ_M_NN_NR_NT_PN_VV",
"宋 CS_NN_NR",
"垄 NN_VV",
"卖 JJ_NN_NR_VV",
"兼 AD_CC_JJ_NN_PN_VV",
"禁 NN_VV",
"巨 JJ_NN_NR_VA",
"岁 M_NN_NT",
"毕 AD_NN_NR_VV",
"怯 JJ_VV",
"勇 AD_NN_VA_VV",
"差 AD_NN_VA_VV",
"课 JJ_NN_VV",
"阻 JJ_NN_VV",
"病 JJ_NN_NR_VV",
"携 JJ_NN_VV",
"者 NN_NR",
"晚 AD_NN_NR_NT_VA",
"疾 NN_VV",
"肝 JJ_NN",
"搞 VV",
"迫 JJ_NN_VA_VV",
"任 AD_DT_JJ_M_NN_NR_VV",
"氨 NN",
"纶 NN",
"丝 AD_JJ_NN_NR",
"伦 NN_NR",
"钟 M_NN_NR_VV",
"纺 NN_NR_VV",
"奠 NN_VV",
"蒋 NR",
"庐 NR",
"脚 LC_M_NN_VV",
"告 NN_NR_VV",
"\' PU",
"修 NN_NR_VA_VV",
"铺 NN_VV",
"选 AS_JJ_LC_NN_VV",
"虽 AD_CS_VV",
"贡 NN_NR_VV",
"晓 NN_NR_VV",
"场 JJ_M_NN_NR_VV",
"视 NN_NR_VV",
"亲 AD_CC_DEC_DEG_JJ_NN_NR_VA_VV",
"题 NN_VC_VV",
"汛 NN",
"造 NN_NR_VV",
"影 JJ_NN_NR_VV",
"轴 JJ_M_NN_NR",
"穿 AS_NN_VV",
"倒 AD_JJ_NN_VC_VV",
"抗 JJ_NN_NR_VV",
"治 JJ_NN_NR_VV",
"请 NN_VV",
"论 NN_VV",
"急 AD_JJ_LC_NN_VA_VV",
"威 AD_JJ_NN_NR_VA_VV",
"填 JJ_NN_VV",
"划 JJ_M_NN_NT_VA_VV",
"土 JJ_NN_NR_VV",
"春 NN_NR_NT_VV",
"子 M_NN_NR_NT_VV",
"壮 BA_JJ_NN_NR_VA_VV",
"房 NN_NR",
"宏 JJ_NN_NR_VA_VV",
"测 NN_VV",
"矛 NN_NR_VA",
"迎 JJ_NN_VV",
"轮 AD_JJ_M_NN_NR_VA_VV",
"董 NN_NR",
"报 AD_JJ_NN_NR_VV",
"欢 JJ_NN_VA_VV",
"霍 NR",
"早 AD_JJ_LC_NN_NR_NT_VA_VV",
"递 NN_VV",
"维 JJ_NN_NR_VV",
"致 AD_JJ_NN_NR_VA_VV",
"稿 NN_VV",
"播 NN_VV",
"号 AD_M_NN_NR_VV",
"迈 VV",
"川 NN_NR",
"缔 NN_NR_VV",
"友 JJ_NN_NR_VA_VV",
"神 JJ_LC_NN_NR_VA_VV",
"逾 AD_VV",
"栗 NN_NR",
"葛 NN_NR_VV",
"餐 M_NN_VV",
"狗 JJ_NN_NR",
"理 AD_JJ_LC_NN_NR_VA_VV",
"店 JJ_NN_NR_VV",
"伙 AD_NN",
"图 JJ_NN_NR_VV",
"署 NN_VV",
"吉 NN_NR_PN_VA",
"冬 NN_NR_NT_VV",
"冰 JJ_NN_NR_VA_VV",
"邀 NN_VV",
"旨 NN_VV",
"朝 NN_NR_P_VV",
"枢 NN",
"丁 NN_NR",
"帮 NN_NR_VA_VV",
"颇 AD_VE_VV",
"师 NN_NR_VV",
"拨 NN_VV",
"扎 NN_NR_VA_VV",
"捐 NN_VV",
"拿 VV",
"厅 NN",
"弥 AD_NN_NR_VV",
"蔬 NN",
"啤 NN_NR",
"鲈 NN",
"罗 NN_NR_SP_VV",
"氏 NN_NR",
"沼 NN",
"虾 NN",
"鸡 NN_VA",
"瘦 NN_VA_VV",
"猪 NN_NR",
"花 JJ_NN_NR_VA_VV",
"贺 JJ_NN_NR",
"柯 NR",
"述 JJ_NN_VV",
"坡 NN_NR",
"吴 NN_NR",
"非 AD_CC_JJ_NN_NR_VA_VC_VV",
"次 AD_JJ_M_NN_NR_NT_VV",
"尚 AD_NN_NR_VV",
"冷 JJ_NN_VA_VV",
"离 JJ_NN_NR_P_VV",
"旧 AD_DEC_DEG_JJ_NN_NR_VV",
"符 JJ_NN_VV",
"求 NN_VC_VV",
"谋 NN_VV",
"才 AD_NN_VC_VE_VV",
"尊 M_NN_NR_VA_VV",
"侵 NN_VV",
"歧 JJ_NN_VV",
"解 LC_NN_NR_VA_VV",
"途 LC_NN_VV",
"妥 AD_JJ_NN_VA_VV",
"估 NN_VV",
"失 JJ_NN_VA_VV",
"轿 NN",
"辆 M",
"奥 NN_NR_VV",
"灵 AD_JJ_NN_NR_VA_VV",
"酝 NN_VV",
"昆 NN_NR",
"令 NN_NR_VV",
"草 NN_VA_VV",
"糖 JJ_NN_NR",
"疗 NN_VV",
"脉 NN_VV",
"抑 CC_NN_VV",
"患 JJ_NN_VV",
"冠 NN_NR_VA_VV",
"脑 AD_NN",
"血 JJ_NN_VA_VV",
"肾 NN",
"坏 JJ_NN_VA_VV",
"癌 NN_VV",
"艾 NN_NR",
"杀 JJ_NN_VV",
"饮 NN_VV",
"习 AD_NN_VA_VV",
"胆 NN_VA",
"胰 NN",
"汇 NN_NR_VV",
"附 AS_JJ_NN_VV",
"钱 JJ_NN_NR_VA_VV",
"务 AD_JJ_NN_VA_VV",
"竭 AD_NN_VA_VV",
"障 JJ_NN_VV",
"心 LC_NN_NR_VA_VV",
"敌 JJ_NN_VV",
"义 AD_JJ_NN_NR_VV",
"朱 JJ_NN_NR_VV",
"归 JJ_NN_VV",
"畜 NN",
"沪 NN_NR",
"船 JJ_NN_NR_VV",
"辐 JJ_NN_VV",
"汕 NN_NR",
"籍 JJ_NN",
"摩 JJ_NN_NR_VV",
"爱 JJ_NN_NR_VA_VV",
"绿 JJ_NN_NR_VA_VV",
"邓 NR_VV",
"少 AD_CD_JJ_NN_VA_VE_VV",
"殊 NN_VV",
"森 JJ_NN_NR",
"树 NN_NR_VV",
"棕 NN",
"植 NN_VV",
"乔 NN_NR",
"叶 M_MSP_NN_NR_VV",
"果 AD_CS_JJ_NN_NR_VA_VV",
"鳄 NN",
"茶 NN_NR_VV",
"景 JJ_NN_NR_VV",
"追 NN_VV",
"窗 LC_NN",
"象 JJ_NN_NR_P_VA_VV",
"潜 JJ_NN_VV",
"甚 AD_CC_DT_NN_VE_VV",
"乃 AD_CC_NR_P_VC",
"缺 NN_VV",
"齐 AD_NR_VA_VV",
"闵 NR",
"季 LC_M_NN_NR_NT",
"住 JJ_LC_NN_NR_VV",
"朗 JJ_NR_VV",
"补 JJ_NN_VA_VV",
"编 NN_VV",
"滞 NN_VV",
"愿 NN_NR_VV",
"敲 NN_VV",
"莫 AD_NR_VA_VV",
"缓 AD_NN_VA_VV",
"绕 JJ_P_VV",
"翟 NR",
"危 AD_JJ_NN_NR_VA_VV",
"菲 NN_NR",
"墨 NN_NR_VV",
"阿 JJ_LC_MSP_NN_NR_VA",
"v CC_NN",
"镍 NN",
"孙 AD_NN_NR_VV",
"耸 VV",
"闪 AD_AS_JJ_NN_VV",
"熔 NN",
"军 AD_JJ_NN_NR_VV",
"钴 NN",
"铂 NN",
"族 M_NN_NR_VV",
"誉 NN_VV",
"踏 NN_NR_VA_VV",
"挖 JJ_NN_VV",
"攻 JJ_NN_VV",
"冶 NN",
"米 JJ_M_NN_NR_VV",
"斜 JJ_NN",
"隧 NN",
"胶 NN_VV",
"杨 NN_NR",
"赶 AD_NN_VV",
"硫 NN",
"铑 NN",
"茅 NN_NR",
"闻 CD_NN_NR_VA_VV",
"庞 JJ_NN_VA",
"酒 AD_NN_NT_VV",
"蒸 JJ_NN_VV",
"赤 JJ_NN_NR_VA",
"酿 NN_VV",
"端 LC_M_NN_NR_VA_VV",
"须 NN_VV",
"陶 AD_JJ_NN_NR_VE_VV",
"贮 VV",
"勾 JJ_NN_VV",
"尼 NN_NR",
"田 LC_NN_NR_VV",
"角 JJ_LC_M_NN_NR_VV",
"授 NN_VV",
"翻 M_NN_VV",
"扣 NN_VV",
"冲 AD_NN_VA_VV",
"享 NN_VV",
"遵 P_VV",
"沟 NN_VV",
"针 JJ_M_NN_P_VV",
"富 JJ_NN_NR_VA_VV",
"亏 NN_VV",
"摆 NN_NR_VV",
"末 BA_LC_M_NN_NT_OD",
"纽 NN_NR",
"构 NN_VV",
"母 AD_JJ_NN",
"郎 NN_NR_VV",
"堆 M_NN_NR_VV",
"渐 AD_JJ_NN_NR_VV",
"衔 NN_VV",
"埃 M_NN_NR",
"荷 NN_NR",
"岩 NN_NR",
"容 AD_JJ_NN_NR_VA_VV",
"移 NN_VV",
"宗 JJ_M_NN_NR_VV",
"胜 NN_NR_VA_VV",
"瓜 NN_NR_VV",
"菜 NN",
"扭 JJ_NN_VV",
"她 NR_PN",
"尿 NN",
"盘 JJ_M_NN_NR_VV",
"员 M_NN_VV",
"码 M_NN_NR_VV",
"群 M_NN_NR_VV",
"畔 LC",
"封 JJ_M_NN_VA_VV",
"矗 VV",
"际 JJ_LC_NN",
"鹿 NN_NR",
"魏 NR",
"毫 AD_M_NN_VA_VE_VV",
"频 AD_JJ_NN_VA_VV",
"爵 NN",
"戴 NN_NR_VV",
"史 JJ_NN_NR_VV",
"圣 NN_NR",
"迪 NR",
"巴 NN_NR_VV",
"蒂 NR",
"俞 NR",
"濮 NR",
"轰 AD_NN_NR_VV",
"谬 NR",
"b CD_FW_JJ_NN_NR_NT",
"续 AD_JJ_NN_VV",
"皮 JJ_NN_NR_VA_VV",
"廖 NR",
"泄 NN_VV",
"永 AD_JJ_NN_NR_VA_VV",
"导 JJ_NN_VV",
"挡 JJ_NN_VV",
"灾 JJ_NN",
"赔 NN_VV",
"欠 NN_VV",
"卢 M_NR",
"拖 NN_VV",
"款 JJ_M_NN_VV",
"查 NN_NR_VV",
"拍 AS_JJ_NN_VV",
"跃 AD_VV",
"雅 NN_NR_VA_VV",
"届 AD_M_VV",
"艰 JJ_NN_VA_VV",
"诉 NN_VC_VV",
"州 JJ_NN_NR",
"托 JJ_NN_NR_VV",
"付 NN_VV",
"票 M_NN_NR_VV",
"寄 NN_VV",
"c CD_FW_JJ_NN_NR",
"索 AD_NN_NR_VV",
"留 JJ_NN_NR_VV",
"硕 JJ_NN_NR_VA_VV",
"庭 NN_NR_VV",
"竟 AD_VC_VV",
"否 AD_NN_VV",
"判 NN_VV",
"嬴 VV",
"禄 NR",
"盐 NN_NR_VV",
"踊 AD_VA",
"旺 NN_NR_VA_VV",
"姚 NR",
"版 M_NN",
"攀 JJ_NN_VV",
"幢 M",
"像 AD_NN_P_VV",
"馆 NN_VV",
"买 JJ_NN_NR_VV",
"隶 NN_VV",
"濒 JJ_VV",
"救 JJ_NN_NR_VV",
"挂 AD_LC_NN_VA_VV",
"戒 NN_VV",
"忍 AD_NN_NR_VV",
"诸 AD_CD_DT_NN_P_VV",
"弊 NN_VV",
"侯 NN_NR",
"缘 NN_VV",
"见 AD_NN_VV",
"愈 AD_VA_VV",
"凸 VV",
"岂 AD_VV",
"? PU",
"想 AD_NN_VV",
"篇 M_NN",
"错 JJ_NN_VA_VV",
"哲 JJ_NN",
"彭 NR",
"换 AD_NN_NR_VV",
"雨 JJ_NN_VV",
"巩 NN_VV",
"浆 NN",
"纸 JJ_M_NN_NR_VV",
"漂 JJ_NN_VA_VV",
"糙 NN",
"橡 NN",
"浮 JJ_NN_VA_VV",
"衡 NN_NR_VV",
"志 NN_NR_VV",
"诚 AD_ETC_NN_NR_VA",
"驱 NN_VV",
"湛 JJ_NR_VA",
"帆 NN_VV",
"卸 NN_VV",
"箱 M_NN_NR",
"断 AD_NN_VV",
"士 NN_NR_VV",
"置 JJ_NN_VV",
"听 NN_NR_VA_VV",
"祝 NN_NR_VV",
"勘 NN_VV",
"塔 NN_NR",
"盆 M_NN_NR",
"跟 AD_AS_CC_NN_P_VV",
"短 AD_JJ_NN_VA_VV",
"盈 JJ_NN_VA_VV",
"稽 NN_VV",
"摇 NN_VV",
"牌 NN_NR_VV",
"捷 NN_NR",
"裂 NN_VV",
"字 AD_M_NN_VV",
"素 AD_NN_NR_VA_VE_VV",
"忙 NN_VA_VV",
"蓝 JJ_NN_NR_VA",
"偏 AD_JJ_NN_VA_VV",
"吻 NN_VV",
"贝 NN_NR",
"尔 AD_M_NN_NR_VV",
"t NN_NR_VV",
"混 CD_JJ_NN_VA_VV",
"削 NN_VV",
"骗 NN_VV",
"伴 AS_NN_P_VV",
"赞 NN_NR_VV",
"刚 AD_NR_VA_VV",
"户 JJ_LC_M_NN",
"岗 NN_NR",
"赫 AD_NR_VA",
"纪 NN_NR_NT_VV",
"盲 AD_JJ_NN_VA_VV",
"隆 AD_JJ_NN_NR_VA_VV",
"似 AD_DEC_DEG_DEV_P_SP_VA_VV",
"瓶 M_NN_VV",
"虎 NN_NR_NT_VV",
"颠 NN_VV",
"宣 NN_NR_VV",
"衰 NN_VA_VV",
"赣 NR",
"散 JJ_NN_NR_VA_VV",
"彻 AD_NN_NR_VA",
"吊 NN_VA_VV",
"─ PU",
"鹰 NN_NR",
"皖 NN_NR",
"闭 NN_VA_VV",
"媒 JJ_NN",
"舒 JJ_NR_VA_VV",
"燃 NN_VV",
"耗 JJ_NN_VV",
"擅 AD_VV",
"避 JJ_NN_VV",
"於 AD_P_VV",
"驶 NN_VV",
"杂 AD_NN_VA_VV",
"滚 AD_JJ_NN_VA_VV",
"库 JJ_NN_NR_VV",
"袁 NR",
"仿 AD_NN_VV",
"筛 NN_VV",
"劝 NN_NR_VV",
"贬 NN_VV",
"陷 NN_VV",
"兑 NN_VV",
"纯 AD_JJ_NN_NR_VA_VV",
"谨 AD_JJ_P_VA",
"桶 M_NN_NR",
"恶 AD_JJ_LC_NN_VA_VV",
"纠 JJ_NN_VV",
"履 NN_NR_VV",
"督 NN_VV",
"辖 NN_VV",
"盛 AD_JJ_NN_NR_VA_VV",
"鞋 LC_NN",
"板 NN_NR_VV",
"济 NN_NR_VV",
"杜 NN_NR_VV",
"夫 NN_NR_VV",
"戈 NR",
"茨 NR",
"帝 NN_NR",
"h CD_NN_NR_VA",
"n NN_NR",
"晨 NN_NR_VV",
"鸣 NN_NR_VV",
"裕 NR",
"鲁 NN_NR",
"顿 AD_M_NN_NR_VV",
"敦 LC_NR_VA_VV",
"炼 NN_VV",
"催 NN_VV",
"氢 JJ",
"狐 NN_NR",
"恩 NN_NR_VV",
"停 NN_VV",
"声 AD_JJ_M_NN_VV",
"披 NN_VV",
"折 JJ_NN_VV",
"牵 AD_JJ_NN_VV",
"鞍 NR",
"瓦 M_NN_NR_VV",
"演 NN_VV",
"替 JJ_NN_P_VV",
"脱 NN_VV",
"哈 IJ_JJ_NN_NR_VV",
"详 AD_JJ_NN_VA_VV",
"顶 AD_JJ_LC_M_NN_NR_VV",
"益 AD_NN_NR_VV",
"榜 NN_VV",
"嫁 NN_VV",
"〈 PU",
"〉 PU",
"待 JJ_NN_VV",
"假 CS_JJ_NN_P_VA_VV",
"赚 NN_VA_VV",
"炒 JJ_NN_VV",
"触 JJ_NN_VV",
"刑 NN",
"皇 JJ_NN_NR",
"操 NN_VV",
"警 JJ_NN_NR_VV",
"喜 AD_JJ_NN_NR_VA_VV",
"忧 JJ_NN_VA_VV",
"庄 AD_JJ_NN_NR_VA_VE",
"逆 AD_NN_VV",
"爆 JJ_NN_VA_VV",
"猛 JJ_NN_VA_VV",
"忽 AD_VV",
"剌 NN_VV",
"死 JJ_LC_NN_VA_VV",
"梯 AD_NN",
"昌 NR_VV",
"粘 NN_NR",
"纤 NN",
"沉 AD_JJ_NN_VA_VV",
"淘 JJ_NN_VV",
"棉 NN_NR",
"锭 M_NN",
"贴 NN_VA_VV",
"呆 JJ_NN_VA",
"细 AD_CD_JJ_NN_VA_VV",
"养 JJ_NN_VV",
"郡 NN_NR",
"隋 NR",
"渝 NR",
"府 NN_NR_VV",
"辟 VV",
"迁 JJ_NN_VV",
"陪 NN_VV",
"赋 NN_VV",
"域 NN",
"涪 NR",
"黔 NN_NR",
"襄 NR",
"浪 JJ_NN_NR_VA_VV",
"穆 NR",
"午 NN_NT",
"眼 AD_LC_NN_NT_VV",
"坦 AD_JJ_NN_NR_VA_VV",
"舞 NN_VV",
"熟 JJ_NN_VA_VV",
"辩 NN_VV",
"扮 NN_VV",
"故 AD_NN_NR_PN_VV",
"毗 VV",
"勤 AD_NN_NR_VA_VV",
"梅 NN_NR",
"掀 VV",
"页 M_NN",
"概 AD_NN_VV",
"阳 JJ_NN_NR",
"邯 NR",
"杰 JJ_NN_NR_VA",
"且 AD_CC_NR_VV",
"豹 NN_NR",
"庆 NN_NR_VV",
"铜 JJ_NN_NR",
"湘 NR",
"窑 NN_VV",
"冀 NR_VV",
"淮 NN_NR",
"夸 JJ_NN_VA_VV",
"误 AD_NN_VA_VV",
"汪 AD_NR",
"惯 DEC_JJ_NN_VV",
"剂 M_NN",
"━ CD_PU",
"薛 NR",
"筑 NN_VV",
"涨 NN_VV",
"怎 AD_PN_VV",
"掌 JJ_NN_VV",
"乘 AD_JJ_NN_VV",
"赢 NN_VV",
"订 M_NN_VV",
"钓 NN_NR",
"嘴 LC_NN_NR",
"址 NN_VV",
"渣 NN_NR",
"臃 VA_VV",
"僵 NN_VA_VV",
"脆 AD_VA_VV",
"贫 JJ_NN_VA_VV",
"剩 JJ_NN_VA_VV",
"郝 NR",
"揭 JJ_NN_NR_VV",
"币 M_NN",
"弱 JJ_NN_VA_VV",
"灭 JJ_NN_VV",
"蚊 JJ_NN",
"霉 NN",
"疟 NN",
"污 NN_VV",
"粉 JJ_NN_VA_VV",
"释 NN_VV",
"秘 AD_JJ_NN_NR_VA_VV",
"乍 NR_VV",
"萨 NN_NR",
"磋 NN",
"弃 NN_VV",
"汉 LC_NN_NR_NT",
"仔 AD_JJ_NN_NR_VA",
"炸 JJ_NN_VV",
"击 JJ_NN_VV",
"悲 JJ_NN_VA_VV",
"谴 NN_VV",
"涂 NN_VV",
"盖 NN_NR_VV",
"伪 JJ_NN_VV",
"躲 VV",
"侦 NN_VV",
"鲍 JJ_NN_NR",
"迹 NN_VV",
"掩 NN_VV",
"丧 NN_VV",
"暖 NN_VA_VV",
"朵 M",
"鲜 AD_JJ_NN_NR_VA_VE_VV",
"摄 M_NN_VV",
"屠 NN_VV",
"佩 NN_NR_VA_VV",
"伤 JJ_NN_VV",
"舆 NN",
"枚 M",
"毁 JJ_NN_VV",
"凶 NN_VA",
"饶 VV",
"愤 NN_VA_VV",
"羊 NN_NR_VV",
"怀 AS_JJ_NN_NR_VA_VV",
"伟 JJ_VA",
"戡 NN",
"让 NN_NR_VV",
"久 AD_NN_VA_VV",
"吕 NR",
"朋 NN_VV",
"愉 JJ_VA_VV",
"感 JJ_NN_VA_VV",
"蔡 NR",
"父 NN_VV",
"纲 NN",
"炎 NN_VA",
"奋 AD_NN_VA_VV",
"录 JJ_MSP_NN_VV",
"宪 NN_VV",
"席 M_NN_NR_VV",
"呢 SP",
"曼 NN_NR",
"撰 VV",
"驳 JJ_NN_VV",
"箴 NN",
"谎 NN",
"刊 NN_VV",
"谭 NN_NR",
"捏 NN_VV",
"讯 NN_NR",
"拷 VV",
"毅 AD_NN",
"烈 NN_VA_VV",
"陵 NN_NR",
"衍 NN_NR_VV",
"顽 AD_NN",
"蓄 AD_NN_VV",
"震 JJ_NN_VV",
"惨 AD_JJ_NN_VA_VV",
"悼 VV",
"牺 NN_VV",
"革 JJ_NN_VV",
"歌 NN_NR_VV",
"痛 AD_NN_VA_VV",
"罪 NN_VV",
"泾 NR",
"殉 JJ_NN_VV",
"镌 VV",
"块 M_NN_VV",
"刻 AD_JJ_NN_NT_VA_VV",
"冤 NN_VA_VV",
"煎 JJ_NN",
"碑 NN_VV",
"塞 NN_NR_VV",
"彼 NN_PN_VV",
"哥 NN_NR",
"颐 NR_VV",
"挥 NN_VA_VV",
"镐 M_NN_VV",
"序 NN",
"厚 JJ_NN_NR_VA_VV",
"冒 AS_VV",
"荒 JJ_NN_VA_VV",
"牛 NN_NR",
"牧 NN",
"村 LC_NN_NR",
"酥 NN",
"惊 JJ_NN_VA_VV",
"床 LC_NN",
"垫 NN_VV",
"藏 LC_NN_NR_VV",
"柜 JJ_LC_NN_NR_VV",
"牦 NN",
"1 CD_NN_NT",
"算 AD_DER_JJ_NN_VC_VV",
"摘 JJ_NN_VV",
"撞 JJ_NN_VV",
"读 NN_NR_VV",
"愚 VV",
"棚 NN_NR_VV",
"礼 AD_NN_VV",
"罐 M_NN",
"亮 JJ_NN_NR_VA_VV",
"陡 VA_VV",
"吃 AS_JJ_NN_VA_VV",
"堡 NN_NR",
"兵 NN_VV",
"弘 NN_VV",
"您 PN",
"吗 SP",
"磁 NN",
"童 JJ_NN_NR_VV",
"女 JJ_NN_NR_VV",
"跳 JJ_M_NN_VV",
"献 JJ_NN_VV",
"洪 NN_NR_VV",
"焕 NR_VV",
"剧 AD_JJ_NN_VA_VV",
"羯 NN",
"艺 NN_VA_VV",
"魅 NN_VV",
"妹 NN",
"找 NN_VV",
"镜 NN_NR_VV",
"某 DT_JJ_M_NN_NR",
"娱 NN_VV",
"织 JJ_NN_NR_VV",
"色 JJ_NN_VV",
"锦 JJ_NN_VA_VV",
"泥 NN_NR_VA",
"簇 NN_VV",
"灿 JJ_VA",
"艳 NN_VA_VV",
"赛 CD_NN_NR_VV",
"杯 M_NN_NR_VV",
"擢 VV",
"识 JJ_NN_VV",
"遗 JJ_NN_VA_VV",
"惋 NN_VA_VV",
"觉 NN_VV",
"耽 VV",
"璧 NN",
"隽 VA",
"襟 NN",
"殷 AD_JJ_NN_NR_VA_VV",
"吟 NN_VV",
"峰 NN_NR",
"鹤 NN_VV",
"馈 NN_VV",
"岳 NN_NR",
"耳 LC_NN_NR_SP_VV",
"语 JJ_NN_VV",
"睹 VV",
"桩 M_NN_VV",
"辉 JJ_NN_VA_VV",
"径 AD_NR",
"浓 DEC_JJ_NN_NR_VA_VV",
"窄 AD_VA_VV",
"悬 VA_VV",
"! PU",
"命 AD_LC_NN_VA_VV",
"趁 AD_AS_NN_P_VV",
"露 AD_JJ_NN_VV",
"笑 NN_VV",
"望 NN_NR_VV",
"壁 NN_VV",
"枯 JJ_NN_VA_VV",
"裸 NN_VV",
"斑 JJ_M_NN",
"紫 JJ_NN_NR_VA",
"褐 JJ",
"砂 NN",
"喷 NN_VV",
"残 JJ_NN_VA_VV",
"徒 AD_NN_VV",
"爬 JJ_NN_VV",
"答 NN_VV",
"曰 VV",
"伸 JJ_NN_NR_VV",
"舌 NN",
"缭 VV",
"峥 NN",
"呀 IJ_SP",
"吧 SP",
"巧 AD_NN_VA_VV",
"恰 AD",
"撕 VV",
"嘲 NN_VV",
"霎 NN",
"酬 VV",
"慨 AD_NN_VV",
"麓 NN",
"豪 NN_NR_VA_VV",
"匆 AD_VA_VV",
"撇 VV",
"旖 NN",
"阴 NN_NR_VA_VV",
"味 NN",
"艘 M",
"峦 NN_NR",
"枝 NN_NR_VV",
"翡 NN_NR",
"鸟 JJ_NN_VV",
"… PU",
"豆 NN_NR",
"休 JJ_NN_NR_VV",
"臭 JJ_NN_VV",
"煮 VV",
"姑 AD_NN",
"烫 NN_VV",
"尖 AD_JJ_NN_NR_VA",
"怪 AD_NN_NR_VA_VV",
"叫 NN_VV",
"遐 VA_VV",
"瀑 NN_NR",
"芦 NN_NR",
"缆 NN",
"你 NN_PN_VV",
"胃 NN",
"寓 NN_VV",
"渴 NN_VV",
"乌 NN_NR",
"皂 NN",
"肄 VV",
"护 NN_NR_VV",
"舰 NN_NR",
"拒 AD_NN_VV",
"偷 AD_NN_VV",
"掐 VV",
"脖 NN",
"菊 NN_NR",
"废 JJ_NN_VV",
"阀 NN",
"椭 NN",
"遥 AD_JJ_NN_VA_VV",
"遭 LB_M_NN_SB_VV",
"圆 AD_JJ_NN_NR_VA_VV",
"响 NN_VA_VV",
"够 AD_VA_VV",
"苦 AD_JJ_NN_VA_VV",
"训 NN_VV",
"莱 NR",
"驯 NN_VV",
"苗 NN_NR",
"淄 NR",
"样 AD_M_NN_VV",
"葱 NN",
"姜 JJ_NN_NR",
"蒜 NN",
"拦 NN_VV",
"抢 AD_DEC_JJ_NN_VA_VV",
"堤 NN_NR",
"袭 M_NN_VV",
"暴 JJ_NN_VV",
"虞 NN_VV",
"坝 NN",
"孤 JJ_NN_NR_VA_VV",
"校 NN_NR_VV",
"麻 NN_NR_VA_VV",
"刮 NN_VV",
"凝 AD_JJ_NN_VV",
"拐 NN_VV",
"慎 AD_NR_VA_VV",
"瓯 NR",
"洞 NN_NR_VV",
"挤 VV",
"昂 VA_VV",
"验 NN_VV",
"迟 AD_NN_NR_VA_VV",
"裴 NR",
"桑 NR",
"阅 NN_VV",
"肖 NN_NR",
"芹 NN",
"鱼 JJ_NN_NR_VV",
"淡 JJ_LC_NN_NR_VA_VV",
"鲳 NN",
"伺 NN_VV",
"郁 NN_NR_VA",
"娇 JJ_NN",
"稀 JJ_NN_VA_VV",
"禽 NN",
"荟 VV",
"耐 NN_VV",
"恐 AD_NN_VA_VV",
"蛋 NN",
"砾 NN",
"肋 NN",
"趾 NN",
"埋 NN_VV",
"罕 JJ_VA_VV",
"秋 NN_NR_NT_VV",
"异 AD_DEV_JJ_NN_VA_VV",
"邬 NR",
"闷 VA_VV",
"吐 VV",
"萌 NN_VV",
"串 JJ_M_NN_VV",
"究 AD_NN_VV",
"什 AD_DEG_DT_JJ_M_NN_PN",
"仲 NN_NR_VV",
"倪 NR",
"廉 AD_NN_VA_VV",
"罢 AD_AS_NN_VV",
"择 VV",
"距 AD_NN_P_VV",
"芳 JJ_NN_NR_VA",
"苑 NR",
"裁 NN_VV",
"睦 JJ_NN_NR_VA",
"羽 JJ_NN",
"鸭 NN_NR",
"仕 NN_NR",
"鹊 VV",
"函 NN_VV",
"盼 VV",
"善 AD_JJ_LC_NN_VA_VV",
"罹 NN_VV",
"犯 NN_VV",
"逮 NN_VV",
"息 NN_VV",
"智 NN_NR",
"侏 NR",
"翅 NN",
"腰 JJ_NN_VV",
"耶 NN_NR",
"脊 NR",
"阵 M_NN_NT_VV",
"漫 JJ_NN_VA_VV",
"策 NN_VV",
"肺 NN",
"肩 NN_VV",
"挫 NN_VA",
"恪 VV",
"谅 NN_NR_VV",
"柬 NR",
"邢 NR",
"诺 NN_NR",
"辛 AD_JJ_NN_NR_VA_VV",
"描 NN_VV",
"屈 AD_NN_NR_VV",
"斗 M_NN_NR_VV",
"匮 NN_VA_VV",
"耕 NN_VV",
"彗 NN",
"碰 NN_VV",
"慧 NN_NR",
"秒 M_NN",
"腾 NR_VV",
"蘑 NN",
"抛 NN_VV",
"谜 NN",
"沔 NR",
"柏 AD_JJ_NN_NR",
"逝 NN_VV",
"遏 NN_VV",
"沦 NN_VV",
"句 M_NN",
"洛 NR_VV",
"· NN_NR_PU",
"玛 NN_NR",
"r NN_NR",
"氰 NN",
"胺 NN",
"滇 NR",
"遣 NN_VV",
"哀 NN_NR_VA_VV",
"慰 NN_VV",
"唁 NN",
"摊 NN_VV",
"俱 AD_NN_NR_VV",
"邻 NN_VA_VV",
"抱 NN_VV",
"覃 NR",
"迭 AD_VV",
"揽 VV",
"佛 NN_NR",
"辞 NN_VV",
"忘 VV",
"幸 AD_NN_NR_VA_VV",
"酷 NN_NR_VA_VV",
"凹 VV",
"犹 AD_NN_P_VV",
"挺 AD_NN_VV",
"肚 NN_NR_VV",
"颈 NN_VA_VV",
"侧 LC_M_VV",
"狭 AD_JJ_VA",
"爪 NN_NR",
"郊 NN",
"拣 VV",
"祥 VA_VV",
"熄 VV",
"锁 NN_VV",
"腊 NN_NR_NT",
"戍 NR_VV",
"阮 NR",
"e CD_FW_NN_NR_VV",
"旭 NN_NR",
"匡 JJ_NR",
"液 JJ_NN",
"循 AD_JJ_NN_NR_VV",
"锅 M_NN_NR_VV",
"抬 NN_VV",
"典 JJ_NN_VA_VV",
"止 CC_JJ_LC_VV",
"崔 NR",
"渤 NR",
"塘 NN_NR",
"瞩 NN_VV",
"钾 NN",
"磷 NN_NR",
"菌 NN",
"肥 JJ_NN_NR_VA_VV",
"芜 NR",
"些 AD_CD_JJ_M_NT",
"堂 AD_M_NN_NR_VV",
"挪 NN_NR_VV",
"邦 NN_NR_VE",
"球 M_NN_NR_VV",
"铬 NN",
"巅 NN",
"滑 NN_VA_VV",
"汲 VV",
"楔 NN",
"轧 NN",
"涵 JJ_NN_VV",
"镀 JJ_NN_VV",
"锡 JJ_NN_NR",
"拳 NN_VV",
"舟 NN_NR",
"勃 VV",
"捕 JJ_NN_VV",
"萎 NN_VV",
"滩 NN",
"浅 JJ_NN_VA_VV",
"梭 NN_NR",
"蛏 NN",
"螺 NN",
"幼 LC_NN_NR_NT_VA",
"潘 NR",
"牢 AD_JJ_NN_VA_VV",
"沃 NR",
"暨 CC_NR",
"冯 NR",
"搬 JJ_NN_VV",
"淹 JJ_NN_VA_VV",
"猫 JJ_NN_NR",
"驰 VV",
"缸 M_NN",
"娃 NN_NR",
"瞄 VV",
"肠 NN",
"翔 NR",
"渡 AS_ETC_NN_NR_VV",
"沥 NN",
"泛 NN_NR_VV",
"澜 NR",
"湄 NN_NR",
"邱 NR",
"疑 JJ_NN_VV",
"衬 NN_VV",
"砌 NN_VV",
"拱 NN_VV",
"咸 NN_NR_VV",
"儒 NN_NR_VV",
"词 NN_VV",
"眉 NN_NR_VA",
"崎 NR_VA",
"梧 NR",
"栽 NN_VV",
"藕 NN",
"汁 NN_VA",
"竹 NN_NR",
"玩 NN_VA_VV",
"媲 VV",
"阔 DEC_JJ_NN_VA_VV",
"淤 NN_VA_VV",
"恒 AD_NN_NR_VV",
"染 NN_VV",
"藉 MSP_NN_P_VV",
"菱 JJ_NN_NR_VV",
"涠 NR",
"候 NN_VV",
"瞬 AD_NN_VV",
"驾 JJ_M_VV",
"厢 NN",
"匹 M_VV",
"穷 JJ_NN_NR_VA_VV",
"雏 NN_VV",
"帕 NR",
"囊 NN_NR_VV",
"狮 NN_NR",
"慈 JJ_NN_NR_VA",
"澄 NN_NR_VA_VV",
"衢 NR",
"萧 AD_NN_NR_VA_VV",
"丛 NN_NR",
"疆 JJ_NN_NR",
"阎 NR",
"肉 NN_NR_VV",
"鲟 NN",
"亨 NR",
"厨 NN",
"g CD_FW_NN_NR",
"姆 NN_NR",
"柑 NN",
"乳 NN",
"肃 NN_VA_VV",
"翼 NN",
"後 AD_JJ_LC_NN_NT_VV",
"奏 NN_VV",
"冉 AD",
"敬 NN_VV",
"沧 NN_VV",
"崭 JJ_VA_VV",
"盾 M_NN",
"誓 NN_VV",
"惧 VA",
"欺 NN_VA_VV",
"衷 AD_VA",
"铭 VV",
"仁 NN_NR",
"梦 JJ_NN_NR_VV",
"睿 NN",
"秉 NR_VV",
"锚 VV",
"坐 NN_VV",
"娓 VA",
"颂 NN_VV",
"翁 NN_NR",
"谘 NN_VV",
"询 NN_VV",
"锺 NR_VV",
"雕 NN_VV",
"绣 NN_VV",
"漆 NN_VV",
"铸 JJ_NN_VV",
"昭 NR_VV",
"骏 NN_NR",
"奔 NN_NR_VA_VV",
"绒 NN",
"镶 JJ_NN",
"砚 NN",
"霞 NN_NR",
"蔚 VV",
"牡 NN",
"瓷 NN",
"巍 JJ_VV",
"珐 NN",
"嵌 VV",
"豫 NR",
"钧 NN",
"蜀 NN_NR_VE",
"雀 NN",
"洮 NN",
"音 NN_NR_VV",
"饱 LB_NN_VA_VV",
"镭 JJ",
"射 JJ_NN_VV",
"唱 NN_VA_VV",
"偶 AD_NN_NR_VA_VV",
"谱 NN_VV",
"墓 NN",
"兽 NN_NR",
"槌 NN_VV",
"炙 JJ_NN_VV",
"骄 JJ_NN_VA_VV",
"黎 NN_NR",
"辑 M",
"幻 JJ_NN_VV",
"祈 NN_VV",
"菩 NN",
"迦 NN",
"勋 JJ_NN_VV",
"* PU",
"溢 NN_VV",
"毋 AD_VV",
"麽 AD_DT_PN_SP",
"扑 NN_VV",
"贪 NN_VV",
"屯 NN_NR",
"湾 NN_NR",
"摺 NN",
"悫 NR",
"轩 NN_NR",
"诗 NN_NR_VA",
"筲 NR",
"荃 NR",
"咀 NR_VV",
"巡 JJ_NN_NT_VV",
"馀 JJ_NN_VA",
"守 NN_VV",
"弹 AD_JJ_NN_VA_VV",
"绘 NN_VV",
"室 M_NN_VC",
"拜 NN_NR_VV",
"册 M_NN_VV",
"/ PU",
"邝 NR",
"谚 NN",
"寮 NN_NR",
"汀 NR",
"塌 VV",
"谁 NN_PN",
"喻 NR_VV",
"葵 NR",
"囚 NN_VV",
"蜚 VV",
"夺 NN_VV",
"插 NN_VV",
"聆 VV",
"惩 JJ_NN_VV",
"狱 NN_VV",
"绅 JJ_NN",
"搜 NN_VV",
"欲 NN_VV",
"膳 NN",
"佣 NN",
"婚 JJ_NN_VV",
"丙 JJ_NN_NR",
"罔 NN_VV",
"蛇 NN",
"谣 NN",
"庸 NN",
"迳 AD_VV",
"卒 AD_NN_VA_VV",
"夥 NN",
"寺 NN_NR_VV",
"庙 NN_NR",
"龛 NN",
"宿 NN",
"己 AD_NN_PN_VV",
"拘 NN_VA_VV",
"男 JJ_NN_NR_VA_VV",
"虚 JJ_NN_VA_VV",
"绰 NN",
"寿 NN_NR_VV",
"券 NN",
"哪 AD_DT_M_PN_SP_VV",
"坑 JJ_LC_NN_NR_VV",
"嫌 AD_NN_VV",
"窳 NN",
"剥 JJ_NN_VV",
"薪 NN_VV",
"牙 NN_VV",
"霜 NN_NR_VV",
"囤 NN_VV",
"胁 VV",
"刁 VV",
"兄 NN",
"咬 NN_VV",
"熬 VV",
"祸 NN_VV",
"宛 AD_VV",
"般 JJ_VA",
"扫 NN_VA_VV",
"浩 NN_VA_VV",
"圜 NN",
"瞎 VV",
"拼 AD_NN_VV",
"帅 NN_NR_VA",
"夹 JJ_NN_VV",
"念 NN_VV",
"捡 VV",
"饰 JJ_NN_VV",
"贩 NN_VV",
"卜 NR",
"蔓 NN_VV",
"胼 VV",
"跌 NN_VV",
"譬 AD_P",
"碗 JJ_M_VA",
"诱 NN_VA_VV",
"杞 NN",
"纱 NN",
"衣 JJ_NN_NR_VV",
"詹 M_NR",
"忿 AD_VA",
"喘 NN_VV",
"汹 VA_VV",
"敷 VV",
"乾 AD_NR",
"飙 NN_VV",
"怕 AD_CS_VV",
"d CD_FW_NN_NR",
"屡 AD_M_VA_VV",
"败 NN_NR_VV",
"寸 CD_M",
"挟 VV",
"o CD_NN_NR_VV",
"蚂 NN",
"垂 AD_JJ_NN_NR_VV",
"迂 AD_NN_VV",
"骤 AD_NN_VV",
"池 M_NN_NR",
"殃 VV",
"押 NN_VV",
"浑 AD_NN_VA_VV",
"夕 NN",
"崩 NN_VV",
"弯 NN_VA_VV",
"跤 NN",
"卷 M_NN_VV",
"碍 NN_VA_VV",
"钜 JJ_NN_NR_VA_VV",
"窃 VV",
"浇 VV",
"逢 VV",
"沸 VV",
"遂 AD_VV",
"敢 VV",
"矣 SP",
"悄 AD_JJ_NN_VA",
"狂 AD_NN_VA_VV",
"倚 VV",
"啊 DER_IJ_SP",
"巫 NN_NR",
"蹉 NN_VV",
"贾 NN_NR",
"摸 NN_VV",
"言 AD_JJ_NN_VA_VV",
"柱 NN",
"遴 VV",
"锑 NN",
"叙 NN_NR_VV",
"聿 NR",
"泷 NR",
"钥 NN",
"2 CD_M_NT",
"汾 NR",
"埸 NN",
"栈 JJ",
"浚 VV",
"凼 NR",
"鸿 NN_NR",
"9 CD_NT",
"葆 NR",
"碳 NN",
"镁 NN",
"钠 NN",
"峡 NN_NR",
"邵 NN_NR",
"蓟 NR",
"厝 NN_NR",
"秀 NN_NR_VA_VV",
"翱 VV",
"埔 NN_NR",
"寂 JJ_NN_VA_VV",
"喧 NN_VV",
"< PU",
"> PU",
"钕 NN",
"硼 NN",
"兆 CD_M",
"洁 JJ_VA",
"寒 NN_VA_VV",
"犬 NN_VV",
"熊 NN_NR_VA",
"圈 LC_M_NN_VV",
"撒 NN_NR_VV",
"抚 NN_VV",
"宠 NN",
"鼾 NN",
"剑 NN_NR",
"缉 NN_VV",
"墙 JJ_NN",
"崽 NN",
"舍 NN_NR_VV",
"睡 JJ_NN_VV",
"跑 NN_VV",
"眺 VV",
"隐 AD_JJ_NN_NR_VA_VV",
"吆 VV",
"窖 NR",
"巾 VV",
"丢 VA_VV",
"锄 M_NN",
"骑 NN_VV",
"犁 NN_NR",
"缝 NN_VV",
"滴 AD_M_NN_VV",
"锲 VV",
"擒 VV",
"焚 NN_VV",
"6 CD",
"捣 NN_VV",
"猖 VA",
"抽 JJ_NN_VV",
"徘 VV",
"害 NN_VV",
"窝 NN_VV",
"葫 NN_NR",
"蹂 NN",
"闸 NN_NR",
"拌 NN",
"w JJ_NN_NR_VV",
"沅 NR",
"澧 NR",
"垭 NR",
"垸 NN",
"育 NN_NR_VV",
"妊 VV",
"胞 M_NN",
"胎 NN",
"夭 VV",
"爸 NN",
"孩 NN_VA",
"脏 NN_VA_VV",
"稍 AD_NN_VE",
"婴 NN_NR",
"泵 NN",
"喂 VV",
"卵 NN",
"烙 NN_VV",
"捧 VV",
"沾 VV",
"挨 AD_VV",
"帽 NN",
"诫 NN",
"坍 VV",
"察 NN_NR_VV",
"曝 NN_VV",
"斡 VV",
"锐 JJ_VA_VV",
"渺 VA_VV",
"喀 NR_VV",
"炮 M_NN_NR_VV",
"蜜 JJ_NN",
"蜂 NN_NR_VV",
"鼠 NN",
"疲 NN_VA_VV",
"笼 AD_M_NN_VV",
"饲 NN_VV",
"肇 NN_NR_VV",
"络 VV",
"觊 NN_VV",
"倡 NN_VV",
"唇 NN_VV",
"蝉 VV",
"滥 NN_VV",
"颜 NN_NR",
"窘 NN_VA_VV",
"旱 NN_VA",
"闯 VV",
"缤 JJ_VA",
"貌 NN_VV",
"鸵 NN",
"矮 JJ_VV",
"妙 JJ_NN_VA_VV",
"穗 NR_VV",
"祭 NN_VV",
"佤 NN",
"傣 NN",
"楚 NN_NR_VV",
"彝 NN",
"吹 NN_VV",
"榕 NN",
"哭 NN_VV",
"魂 NN",
"雪 JJ_NN_NR_VV",
"坛 NN",
"膝 NN_VV",
"敞 AD_VV",
"彪 NN",
"毙 VV",
"捍 NN_VV",
"霸 NN_NR",
"悍 AD",
"摒 VV",
"炫 JJ_NN_VA_VV",
"勉 AD_NN_VV",
"恣 VV",
"厉 JJ_NN_NR_VA_VV",
"幕 JJ_LC_M_NN",
"烂 JJ_NN_VA_VV",
"绍 NR",
"肆 AD_VV",
"弄 DER_NN_VV",
"砖 NN",
"垒 NN_VV",
"涛 NN_NR",
"蚌 NR",
"逃 NN_VV",
"棋 LC_NN_NR_VV",
"彦 NR",
"猜 NN_VV",
"飘 AD_DEV_JJ_NN_VA_VV",
"弈 VV",
"蹈 VV",
"聂 NR",
"聪 NN_NR_VA",
"惜 AD_NN_VV",
"俗 NN_VA_VV",
"畏 JJ_VA",
"搏 VV",
"掠 NN",
"椎 NR",
"瑰 NN_VA",
"` PU",
"酗 JJ_NN_VV",
"醒 VA_VV",
"滋 NN_VA_VV",
"妻 NN",
"挣 NN_VV",
"洗 NN_VV",
"锻 NN_VV",
"篮 NN",
"姓 NN_NR_VV",
"弟 NN",
"弗 AD_NR_VV",
"踢 VV",
"尕 NR",
"噶 NN_NR",
"凯 LC_NN_NR_VV",
"揉 NN_VV",
"牲 NN",
"宰 NN_VV",
"挽 NN_VV",
"纂 NN",
"乒 NN",
"岑 MSP",
"删 VV",
"添 NR_VV",
"苯 NN",
"腈 NN",
"粒 JJ_M_NN",
"烷 NN",
"灰 JJ_NN_NR_VA",
"烧 AS_JJ_NN_VV",
"尸 NN",
"鄂 NR",
"栏 M_NN",
"腐 NN_VV",
"搭 AD_NN_VV",
"舱 NN",
"曙 NN",
"孕 NN_VV",
"戏 NN_NR_VA_VV",
"瞿 NR_VA",
"捆 VV",
"刀 JJ_M_NN_VV",
"懂 DER_VV",
"巷 LC_M_NN_NR",
"刺 DEC_NN_VA_VV",
"踪 NN_VV",
"恍 VV",
"葡 JJ_NN_NR",
"刷 NN_VV",
"凉 NN_NR_VA_VV",
"杉 NN_NR",
"宫 LC_NN_NR",
"弓 NN_NR",
"摔 NN_VV",
"冈 NR",
"嘎 NR",
"慕 NR",
"茉 NR",
"樱 NN_NR",
"丑 JJ_NN",
"郄 NR",
"狠 AD_NN_VA_VV",
"伯 NR",
"佐 NR_VV",
"棒 M_NN_VA_VV",
"劈 NN",
"柔 JJ_NN_NR_VA_VV",
"坠 VV",
"芯 NN",
"沐 NN_VV",
"栉 VV",
"扛 VV",
"慷 AD_NN",
"暌 VV",
"臆 NN_VV",
"帷 NN",
"柚 NN",
"叛 NN_VV",
"搀 VV",
"枪 NN_VV",
"奎 NR",
"劫 NN_VV",
"衫 NN",
"凑 VV",
"缠 VV",
"伧 VA",
"柿 NN",
"君 NN_NR_VA_VV",
"辰 NR",
"丈 NN_NR",
"5 CD",
"脸 M_NN",
"练 NN_VV",
"键 NN",
"兖 NR",
"韦 NR",
"译 NN_VV",
"虫 JJ_NN",
"蚯 NN",
"鹏 NR",
"奶 NN",
"肢 NN",
"肿 NN",
"懈 NN_VV",
"秭 NR",
"砍 NN_VV",
"锂 NN",
"卤 NN",
"胚 NN",
"燕 NN_NR",
"晴 NN_VA",
"f CD_FW_NN_NR_VA",
"昼 NN",
"咽 NN_VV",
"蓉 NN_NR",
"汤 NN_NR",
"姊 NN_NR",
"摧 NN",
"暗 AD_JJ_NN_VV",
"绳 NN_VV",
"壶 M_NN_NR",
"骊 NR",
"颖 NR",
"润 NN_NR_VV",
"夜 LC_NN_NT_VV",
"囿 VV",
"歪 NN_VA",
"橘 JJ_NN",
"讣 NN",
"幽 JJ_NN_VA_VV",
"况 AD_NN",
"芗 NN",
"姐 NN",
"梨 NN_NR",
"霏 JJ",
"炽 JJ",
"纾 VV",
"杠 NN",
"咎 VV",
"躺 VV",
"棺 NN",
"钉 NN_VV",
"笨 JJ_NN",
"奸 NN",
"勺 NN_NR",
"术 NN",
"乎 VV",
"厄 NN_NR",
"劲 NN_VA_VV",
"赈 NN_VV",
"唤 VV",
"溶 NN_VV",
"杆 M_NN_VA_VV",
"翘 AD_VA_VV",
"芝 NN_NR",
"砰 AD",
"姿 NN_NR",
"碧 M_NN_NR_VV",
"荡 NN_VV",
"辜 NR",
"贿 NN_VV",
"傅 NR",
"蝴 JJ_NN",
"屹 VV",
"绩 JJ_NN",
"矶 NR",
"祠 NR",
"洼 NN",
"岚 NR",
"臼 NR",
"坪 M_NN_NR",
"陇 NR",
"蕴 NN_VV",
"疼 NN_VV",
"氯 NN",
"酸 JJ_NN_VA",
"蚕 NN_NR_VV",
"铃 NN_NR",
"亟 AD_VV",
"践 VV",
"羚 NN",
"垃 NN",
"猎 NN_VV",
"藐 NN_VV",
"暧 AD_JJ_NN_VA",
"滔 NN_VV",
"斧 JJ_VV",
"旷 VV",
"硝 NN_VV",
"耻 NN",
"奈 NR",
"橄 NN",
"猩 NN",
"骚 NN_VV",
"l JJ_NN_NR_VV",
"娣 NR",
"闰 NN",
"账 NN",
"嫩 JJ_NR",
"殖 NN_VV",
"冗 NN_VA",
"链 NN",
"陌 JJ_NN_VA_VV",
"喝 AS_NN_VA_VV",
"咖 JJ_NN",
"逛 VV",
"闹 NN_VV",
"甄 NN_VV",
"凤 NN_NR",
"侃 VV",
"渊 JJ_NN_NR_VV",
"铲 VV",
"讳 VV",
"吾 NN_NR_PN",
"渥 JJ_NR_VA_VV",
"赌 NN_VV",
"揖 NN",
"妈 NN_NR",
"莲 NN_NR",
"藩 NN",
"坊 NN",
"闲 AD_NN_VA_VV",
"鼎 NN_NR_VA_VV",
"挞 NN",
"聊 NN_VV",
"哩 M_NN",
"煲 NN",
"鬼 NN_NR_VV",
"禧 NN_NR_NT",
"赏 NN_VV",
"罩 VV",
"肌 NN",
"敝 VV",
"蟹 NN",
"掺 VV",
"遮 NN_VV",
"扯 VV",
"裤 NN",
"痒 NN_VA",
"皱 NN_VV",
"褪 VV",
"魔 JJ_NN",
"蹒 VV",
"踯 VV",
"茁 VV",
"彰 NR_VV",
"仗 AS_NN",
"浸 NN_VV",
"淫 NN_VV",
"桦 NR",
"泳 NN",
"膨 VA_VV",
"寡 NN_VV",
"k NN_NR",
"拚 AD_NN_VV",
"韧 NN_VA",
"渗 NN_VV",
"嗅 NN_VV",
"瑕 NN",
"糟 VA",
"割 VV",
"兢 AD",
"汗 JJ_NN_VV",
"黏 VA_VV",
"绑 VV",
"y JJ_NN_NT",
"琢 NN_VV",
"蜘 NN",
"症 NN",
"叹 NN_VV",
"龟 NN_NR_VV",
"疋 NN",
"偌 JJ",
"斐 NR_VV",
"畦 M",
"稻 NN_VV",
"栋 M",
"鬈 NN",
"碱 NN",
"尘 JJ_NN_VV",
"谦 NN_NR_VA_VV",
"潭 NR",
"惹 NN_VV",
"孳 NN",
"哗 VV",
"蛰 VV",
"痕 NN",
"凄 VA",
"烤 NN_VV",
"猴 NN",
"啼 NN_VV",
"浊 NR_VA",
"溪 NN_NR",
"溺 VV",
"碾 NN_VV",
"煽 NN_VA_VV",
"锣 NN_VV",
"q NR_VA",
"憨 NR_VA",
"喇 AD_NN",
"仇 NN_VV",
"莎 VV",
"哟 VV",
"蝤 NR",
"辈 M_NN",
"鹭 NN",
"挚 NN_VV",
"泪 NN_VV",
"噙 VV",
"疏 NN_VA_VV",
"慌 VA",
"揣 NN_VV",
"磨 NN_VV",
"恨 NN_VV",
"啦 SP_VV",
"赐 NN_VV",
"吼 NR_VV",
"虐 NN_VV",
"阖 AD_NN",
"鄙 VA",
"珂 NR",
"崖 NN",
"骂 NN_NR_VV",
"萤 NN",
"贤 JJ_NN_VV",
"叱 VV",
"吒 VV",
"媳 NN",
"婆 NN_VA_VV",
"鼻 NN_NR_VV",
"洒 JJ_NN_VV",
"撑 NN_VV",
"嫦 NN_NR",
"钰 NR",
"茹 VV",
"捉 VV",
"嬷 NN",
"芸 NN_NR",
"握 NN_VV",
"趣 JJ_NN_VA_VV",
"桃 NN_NR_VV",
"眷 NN_VV",
"斤 M_VV",
"腌 VV",
"熏 NN_VV",
"晒 NN_VV",
"绞 NN",
"碎 NN_VV",
"搅 VV",
"搓 VV",
"丸 NN_NR_VV",
"裹 VV",
"娘 NN",
"札 NN",
"萝 NN_NR",
"糕 NN",
"糯 NN",
"饼 NN",
"妨 VV",
"盏 M",
"讽 NN_VV",
"粟 NN",
"笙 NN",
"逼 LC_NN_VA_VV",
"鬻 VV",
"桌 M_NN_VV",
"烹 NN_VV",
"泡 JJ_NN_VV",
"伶 NN_VA",
"斩 JJ_NN_VV",
"阉 NN",
"镖 NN",
"颓 AD_VV",
"椅 NN",
"颤 VV",
"哑 NN_VA_VV",
"宴 NN_VV",
"愧 VV",
"潇 VA",
"捞 NN_VV",
"厌 NN_VA_VV",
"嗜 NN",
"凋 NN_NT_VV",
"韶 NN_NR",
"巢 NN",
"乏 NN_VA_VV",
"羁 NN_VV",
"甫 AD",
"锾 NN",
"荔 NN",
"觥 VV",
"彷 AD_NN_P_VV",
"耀 VA_VV",
"伫 VV",
"黍 NN",
"嘛 AD_SP",
"槟 NN",
"殡 NN",
"猝 VV",
"鹅 NN_NR",
"鹄 VV",
"伎 NN",
"盗 NN_VV",
"攸 VV",
"诡 NN_VA_VV",
"恼 VA_VV",
"孚 VV",
"咳 VV",
"痰 NN",
"匪 NN_VV",
"烦 NN_VA_VV",
"俩 NN_PN",
"靖 NN_NR",
"挹 NN_VV",
"潢 NR",
"棵 CD_M",
"楹 NN",
"俨 AD",
"耿 NN_NR_VA_VV",
"垦 NR_VV",
"吓 NN_VV",
"赖 MSP_NR_VV",
"雾 NN_NR_VV",
"辨 NN_VV",
"溯 NN_VV",
"蕃 JJ_NN_NR",
"冢 NR",
"佑 NR",
"迷 JJ_NN_VA_VV",
"淀 NN_VV",
"侄 NN",
"束 M_NN_VV",
"嶙 NR_VV",
"井 NN_NR_VV",
"坟 NN",
"晕 VV",
"澎 NN_NR_VA_VV",
"涟 NN",
"御 NN_VV",
"役 AD_NN_VV",
"瘫 VA_VV",
"妄 VV",
"厮 NN_VV",
"傲 JJ_NN_VV",
"扁 NN_NR_VA_VV",
"喊 VV",
"袍 NN",
"抨 VV",
"粹 NN_VV",
"菁 NN_NR",
"宵 NN_NR",
"铎 NR",
"朔 NR",
"逻 NN",
"尴 NN_VA",
"诟 VV",
"晦 NN",
"阁 NN",
"揆 NN",
"卯 VV",
"氛 NN",
"苹 NN",
"洲 NN_NR",
"涅 NR",
"谊 NN_NR",
"殿 NN",
"愁 NN_VV",
"稚 NN_VA",
"蜡 NN",
"跷 NN_VV",
"矽 NN_NR",
"僧 NN_VV",
"瞧 VV",
"竿 NN_NR",
"隘 NR",
"垮 VV",
"趟 M",
"蹲 NN_VV",
"峨 NR",
"橥 VV",
"亭 NN",
"嬉 JJ_NN_VV",
"凳 NN",
"览 NN",
"妆 VV",
"妩 VA",
"腿 NN",
"纹 NN",
"膜 NN",
"肤 NN_VA",
"倩 NR",
"奢 NN_VA_VV",
"媚 NN_VA_VV",
"纨 NN",
"叩 VV",
"= VV",
"j NR_VA",
"翰 NR",
"梳 NN_VV",
"俊 JJ_VA",
"甯 NR",
"臀 NN",
"雌 JJ_NN_VV",
"腻 VA_VV",
"撷 VV",
"镂 NN",
"裙 NN",
"侬 NN_NR",
"俏 VA",
"枣 JJ_NN",
"懒 DER_JJ_VA",
"丽 JJ_NR_VA",
"搔 NN",
"嫉 VV",
"苍 JJ_NN_VA",
"窥 VV",
"姣 JJ",
"桎 NN_VV",
"悦 VV",
"铄 VA_VV",
"爽 AD_JJ_VA",
"忏 NN",
"冕 NN",
"勿 AD",
"捻 NN_VV",
"讥 VV",
"唉 IJ_NN_SP_VV",
"忌 NN_NR_VV",
"鞭 NN_VV",
"鸽 NN",
"剖 NN_VV",
"淋 VA_VV",
"僻 AD_VV",
"丘 NR",
"旋 AD_JJ_NN_VV",
"褒 NN_NR",
"妯 NN",
"萦 VV",
"哦 IJ_SP",
"眯 VA_VV",
"亡 NN_VV",
"拮 VA_VV",
"怜 VV",
"瘠 VA",
"晃 VV",
"蔗 NN",
"镰 NN",
"吵 NN_VV",
"俭 VA",
"辗 AD_NN_VV",
"眠 VV",
"讪 VV",
"虔 JJ_NN_VA",
"汞 NN",
"饿 NN_VV",
"怨 NN_VV",
"帛 NN_NR",
"琉 NN_NR",
"诈 NN_VV",
"缇 NR",
"珊 NN",
"谙 VV",
"洄 NN",
"礁 NN",
"鲨 NN",
"绮 JJ",
"绵 AD_JJ_VA_VV",
"伞 NN",
"鲔 NN",
"鲣 NN",
"蠢 NN_VA_VV",
"棍 NN",
"缜 VA",
"玺 NN",
"竖 NN_VV",
"弭 VV",
"锤 VV",
"庶 NN",
"蹴 VV",
"璀 VA",
"漠 VV",
"抹 VV",
"坎 NR_VA",
"佃 NN",
"卑 NR_VA",
"蕞 NN",
"褓 NN",
"娜 NR",
"嚎 NN_VV",
"黯 AD_VA_VV",
"矫 VA_VV",
"叔 NN_PN",
"婉 VV",
"励 NN",
"怡 NR",
"暑 NN",
"砸 VV",
"攒 VV",
"甥 NN",
"舅 NN",
"懵 VV",
"呛 VV",
"昏 VA_VV",
"潦 AD_VA_VV",
"蔽 NN_VV",
"惶 VV",
"筷 NN",
"怂 NN_VV",
"漩 NN",
"懊 VV",
"涓 NN",
"z NR",
"兔 NN",
"酵 NN",
"龚 NR",
"莉 NR",
"茄 NN",
"擘 NN_VV",
"兀 AD_VE_VV",
"穴 JJ_NN",
"妖 VA_VV",
"苟 VV",
"裘 NR_PN",
"躁 VV",
"帖 M_NN",
"晤 NN",
"寰 NR",
"掏 NN_VV",
"掣 VV",
"锯 NN_VV",
"羡 VV",
"妒 VV",
"辣 JJ_NN_VV",
"湿 NN_VA_VV",
"栖 NN_NR_VV",
"楠 NR",
"梓 NR",
"搁 VV",
"痞 NN",
"泱 JJ",
"邑 NN_VV",
"佬 NN",
"囝 NN",
"乖 AD_NN_VA_VV",
"乞 NN_VV",
"踞 VV",
"廊 NN",
"窜 NN_VV",
"剀 VA",
"弦 NN_NR",
"咪 NR",
"昙 VV",
"邰 NR",
"庾 NR",
"& CC_NN",
"伍 NN_NR",
"佰 NR",
"皿 NN",
"倘 CS",
"佚 NN_VV",
"掂 VV",
"沛 AD",
"憧 NN_VV",
"磅 M_VA",
"碟 JJ_NN",
"括 VV",
"箝 NN_VV",
"傻 AD_JJ_NN_VA_VV",
"扼 VV",
"氧 NN",
"剽 NN_VV",
"诀 NN",
"鳗 NN",
"焉 AD_SP_VV",
"锋 NN_VA",
"稠 NN_VA_VV",
"鳌 NN",
"鲑 NN",
"烽 NN",
"啧 VV",
"歹 VA_VV",
"谍 NN",
"歉 NN",
"磐 NN",
"莺 NN_NR",
"渎 NN_VV",
"慑 VV",
"掘 NN_VV",
"爷 NN_NR",
"铠 NN",
"赭 JJ",
"鬃 NN",
"俑 NN",
"尺 M_NN",
"盯 VV",
"喔 SP",
"箭 NN",
"煦 VA_VV",
"豁 VA",
"宅 NN",
"婶 NN_PN",
"瘾 NN",
"蝇 NN",
"俐 VA",
"萍 NN",
"熙 VV",
"倏 AD_DEV",
"拾 VV",
"诙 VA",
"3 NT",
"俯 VV",
"忆 NN_VV",
"寨 NN",
"偕 NN_NR",
"蛭 NN",
"嘻 VV",
"怒 NN_VV",
"庇 NN_VV",
"蹦 VV",
"腔 NN",
"篙 NN",
"霓 NN",
"恋 JJ_NN_VV",
"呜 NN_VV",
"戎 NN",
"凿 VV",
"舢 NN",
"籽 NN",
"鄞 NR",
"浴 NN",
"哉 AD_VA",
"橱 NN",
"擦 VV",
"恬 NN_VA",
"谧 VA",
"慵 NN",
"坌 NR",
"蛤 NN",
"贼 NN",
"阡 NR",
"舶 NN",
"孰 PN_VV",
"罟 NR",
"翠 NN_VA",
"葬 NN",
"爹 NN",
"惟 AD_VV",
"疯 AD_NN_VV",
"盎 M_VA",
"娟 NR",
"睁 VV",
"徨 VV",
"莓 NN",
"嚣 NN",
"耍 VV",
"悟 VV",
"馒 NN",
"卧 NN_VV",
"u NN_NR",
"缪 NR",
"峄 NR",
"撮 VV",
"胸 NN_VV",
"孺 NN_NR",
"孝 NN_NR_VV",
"殴 VV",
"楷 NN",
"臣 NN",
"杏 NR",
"畸 JJ",
"铼 NR",
"盒 NN",
"s NN_NR",
"凛 VA",
"拄 VV",
"町 NR",
"遽 NN_VV",
"韵 NN",
"瑜 NN",
"珈 NN",
"匀 VA_VV",
"踩 NN_VV",
"妃 NN_NR",
"澡 NN",
"薰 NN",
"檀 NN",
"玫 NN",
"犒 VV",
"琳 VV",
"蟾 NN",
"呵 AD_SP_VV",
"谐 VV",
"毓 NR",
"汰 NN_VV",
"鲤 NN_NR",
"鹦 NN",
"恭 AD_NR_VV",
"噢 IJ",
"篷 NN",
"莅 VV",
"拎 VV",
"啃 VV",
"哇 NR",
"耆 NN",
"呷 NN",
"啄 VV",
"裳 VV",
"噪 VV",
"伐 NN_VV",
"椰 NN",
"溘 VV",
"抖 NN",
"憾 NN",
"夙 NN_VV",
"睾 NN",
"抄 NN",
"欷 NN_VV",
"嘘 IJ_NN_VV",
"芮 NR",
"夷 NN",
"迢 VV",
"篆 NN_VV",
"辍 VV",
"冥 NN",
"轶 JJ",
"觅 VV",
"醺 NN",
"奕 NN_VV",
"笛 NN",
"蛮 JJ_NN_VA",
"瘴 VA",
"疠 VA",
"夔 JJ",
"蜷 VV",
"儆 VV",
"涩 VA",
"绢 NN",
"氤 JJ_VV",
"窠 NN",
"悔 VA_VV",
"斋 NN_NR",
"叟 NR",
"呕 VV",
"朴 VA",
"臻 VV",
"瓮 NN",
"娴 NN",
"茑 NR",
"刨 NN_VV",
"炖 VV",
"毂 NN",
"辘 NN",
"坯 VV",
"嚼 VV",
"绸 NN_NR",
"砥 VV",
"哨 NN",
"祁 LC",
"逗 VA_VV",
"雍 VA",
"蝮 NN",
"蟒 NN",
"侠 NN",
"孵 VV",
"抒 VV",
"歇 NR_VV",
"愣 AD",
"枕 NN_VV",
"琦 NR",
"嗨 IJ",
"惘 VA",
"痴 NN",
"睥 DT",
"绚 NN",
"狼 NN_VV",
"怅 NN_VV",
"蜕 NN_VV",
"茫 VA_VV",
"筋 NN_VV",
"毯 NN",
"窒 NN_VV",
"枷 NN",
"甩 VV",
"徭 NN",
"奴 NN",
"孑 VV",
"憎 VV",
"谆 AD",
"皈 VV",
"醉 NN_VA",
"嚷 VV",
"哽 VV",
"秃 VV",
"漾 VV",
"鬓 NN",
"抿 VV",
"匠 NN",
"憋 VV",
"诠 NN_VV",
"忒 AD",
"孜 AD_VV",
"迸 VV",
"昧 VV",
"娶 VV",
"糊 VV",
"桧 NN_VV",
"芥 NN",
"匍 VV",
"蕨 NN",
"蚀 NN",
"狩 NN_VV",
"叉 VV",
"槽 NN",
"榉 NN",
"叨 VV",
"奄 VV",
"绫 NN",
"躯 NN",
"匿 NN",
"袜 NN",
"梵 NR",
"翩 AD_JJ",
"喃 VV",
"谛 NR_VV",
"斫 VV",
"侮 NN",
"裔 JJ",
"浏 VV",
"抉 NN",
"棘 NN_VA_VV",
"藻 NN",
"鞘 NN",
"舀 VV",
"銮 NR",
"腥 JJ_NN",
"钩 NN",
"刹 AD",
"ㄅ NN",
"阑 VV",
"聒 VV",
"黛 NN",
"蜿 VA_VV",
"瞪 NN_VV",
"榨 VV",
"熠 AD_VV",
"劣 JJ_NN",
"窟 NN_NR",
"烘 NN_VV",
"纰 NN",
"贱 NN",
"茧 NN",
"芎 NR",
"髻 NR",
"徜 VV",
"溜 M",
"飓 NN",
"妓 NN",
"瞠 VV",
"玄 NR",
"禅 NN_VV",
"剃 VV",
"哄 VV",
"岔 NN",
"芭 NN_NR",
"璞 VV",
"撩 VV",
"鞑 VV",
"笈 NN",
"呱 VV",
"搂 VV",
"饥 VA_VV",
"撼 VV",
"趸 NN",
"篓 M",
"尹 NR",
"驿 VV",
"拙 VV",
"镉 NN",
"莞 VV",
"哎 IJ",
"喟 NN_VV",
"弑 VV",
"惰 NN",
"蜗 NN",
"攫 VV",
"趴 VV",
"% CD_NN",
"澹 AD",
"咋 VV",
"缕 VV",
"斟 VV",
"笃 VA",
"傩 NN",
"菸 MSP_NN_VV",
"屎 NN",
"粪 NN",
"牯 NR",
"釉 NN",
"筒 NN",
"赎 NN",
"屁 NN",
"邪 NR",
"捶 NN_VV",
"缀 VV",
"杓 NN",
"殆 AD_VV",
"杖 NN_VV",
"跋 NN",
"丫 NN",
"簪 VV",
"甸 NR",
"琵 NN_VV",
"隅 NN",
"梆 NN",
"唢 NN",
"嘹 JJ",
"湍 VA",
"嗓 NN",
"泫 VV",
"泣 VV",
"淌 VV",
"淙 VV",
"箫 NN",
"陀 NN",
"鲸 NR",
"呐 NN",
"螟 NN",
"哺 VV",
"亘 NN",
"臂 NN_VV",
"篡 VV",
"匈 NR",
"卿 NN",
"尉 NR",
"侍 NN",
"吏 NN",
"丞 NN",
"靡 VV",
"芫 NN",
"菠 NN",
"禾 NN",
"扰 NN_VV",
"晁 NR",
"桓 NR",
"泽 NN_NR",
"痼 NN",
"谶 NN",
"槛 NN",
"槐 NN",
"佞 NN",
"赦 VV",
"吩 VV",
"蒺 NN",
"壕 NN",
"煞 AD",
"汴 NR",
"虹 NN",
"驴 NN",
"骆 NN",
"孱 VV",
"闺 NN",
"叠 M_VV",
"癞 NN",
"蟆 NN",
"羹 NN",
"谓 VV",
"汝 PN",
"拗 JJ",
"辙 NR",
"诌 VA",
"萃 NN",
"抡 VV",
"擂 VV",
"宦 NN",
"蛊 VV",
"搪 VV",
"弧 NN",
"迥 VV",
"炯 NR",
"猥 JJ",
"骇 NN_VV",
"衙 NN",
"樟 NN",
"芒 NN",
"汐 NR",
"绊 NN",
"笳 NN",
"朦 VV",
"咆 NN",
"湮 VV",
"嵯 VV",
"茵 NR_VV",
"嘈 VA",
"艇 NN",
"碉 NN",
"唏 VV",
"咒 VV",
"囹 NN",
"脍 VV",
"魁 NR",
"芽 NN",
"犀 NN",
"榭 NR",
"嘿 IJ",
"屿 NR",
"桨 NN",
"苎 NN",
"粼 JJ",
"缎 NN",
"袖 NN",
"盔 NN",
"梗 NN",
"鲫 NN",
"膘 NN",
"峪 NR",
"钙 NN",
"嘀 VV",
"咕 VV",
"拽 VV",
"悻 VV",
"沮 VA",
"逞 VV",
"粽 NN",
"窦 NR",
"眩 VA",
"悸 NN",
"戚 NR",
"0 CD",
"朽 VV",
"杳 VV",
"+ CD",
"噱 VV",
"喽 NN",
"喉 NN_VV",
"逊 VA_VV",
"拯 VV",
"雯 NR",
"厕 NN",
"吝 VV",
"胳 NN",
"傀 NN",
"娼 NN",
"绯 NN",
"螳 VV",
"蟑 NN",
"膀 NN",
"痊 VV",
"泌 NN",
"腼 VV",
"暮 NN",
"焊 VV",
"膺 VV",
"胖 JJ_NN_VA",
"忐 VV",
"惭 NN",
"帘 NN",
"噘 VV",
"叮 NN",
"殛 NN",
"敛 VV",
"仆 VV",
"黝 VA",
"渚 NR",
"夯 VV",
"讶 DEV",
"亢 NN",
"酹 NN",
"诧 NN",
"燎 NN",
"咧 VV",
"腮 NN",
"凫 NN_NR",
"跪 VV",
"瓣 NN",
"羌 NN",
"墩 NR",
"柄 NN",
"辫 NN",
"箍 NN",
"跺 VV",
"诛 VV",
"溃 VV",
"咱 PN",
"戊 NN",
"寇 NR",
"恃 VV",
"芋 NN",
"唛 AD",
"滤 NN",
"吁 VV",
"糗 NN",
"溽 NN",
"堑 NR",
"炊 NN",
"馅 NN",
"薯 NN",

#endregion
        };

        static string[] charSuffix = 
        {
#region char suffix
            "海 AD_JJ_NN_NR_VV",
"东 AD_JJ_LC_NN_NR_VA_VV",
"发 AD_JJ_NN_NR_VA_VV",
"与 CC_NN_P_VV",
"制 AD_JJ_NN_VV",
"设 JJ_NN_VV",
"步 AD_JJ_M_NN_NR_VA_VV",
"社 JJ_NN_NR_VV",
"y NN_NR_NT_VA",
"电 JJ_NN_NR_VV",
"( PU",
"者 AD_CC_NN_NR_PN",
"虎 NN_NR_VV",
"、 PU",
"坚 NN_NR_VV",
") PU",
"来 AD_CD_JJ_LC_M_MSP_NN_NR_NT_VV",
"布 NN_NR_VV",
"行 AD_JJ_M_NN_NR_VA_VV",
"了 AD_AS_NN_NR_P_SP_VV",
"及 AD_CC_JJ_NN_NR_VA_VV",
"济 JJ_NN_NR_VA_VV",
"易 AD_JJ_NN_NR_VA_VV",
"划 M_NN_VV",
"技 JJ_NN_NR_VV",
"教 JJ_NN_NR_VV",
"等 AD_CC_ETC_JJ_M_NN_NR_P_VA_VC_VV",
"域 JJ_NN",
"的 AD_CD_DEC_DEG_DER_DEV_DT_JJ_NN_PN_SP_VE_VV",
"r AD_CD_NN_NR_NT_OD",
"件 JJ_M_NN_VV",
"规 AD_JJ_NN_VA_VV",
"性 AD_JJ_NN_VA_VV",
", PU",
"保 AD_AS_DEC_JJ_NN_NR_VV",
"序 AD_JJ_NN_VA_VV",
". PU",
"放 JJ_NN_NR_VA_VV",
"是 AD_CC_CS_DT_JJ_NN_P_VA_VC_VV",
"一 AD_CD_JJ_LC_NN_NR_NT_OD_VA_VE_VV",
"项 AD_M_NN_NR_VV",
"兴 AD_JJ_NN_NR_VA_VV",
"化 JJ_LC_NN_NR_VA_VV",
"融 NN_VA_VV",
"心 AD_JJ_NN_NR_VA_VV",
"跨 AD_JJ_M_VV",
"纪 JJ_NN_NR_NT_VV",
"程 AD_JJ_NN_NR_VV",
"此 AD_DT_NN_PN_VV",
"量 AD_CD_JJ_NN_VV",
"现 AD_JJ_NN_NR_VV",
"前 AD_DEC_DT_JJ_LC_NN_NR_NT_VA_VV",
"曾 AD_NR",
"到 AD_CC_NN_P_VA_VV",
"过 AD_AS_NN_P_VV",
"新 AD_JJ_NN_NR_VA_VV",
"况 AD_NN",
"题 JJ_NN_VV",
"对 AD_CC_JJ_M_NN_P_VA_VV",
"单 AD_CC_CD_JJ_NN_VA_VV",
"取 NN_VV",
"\" PU",
"干 AD_CD_JJ_NN_NR_VA_VV",
"段 M_NN_NR_VA_VV",
"间 AD_LC_M_NN_NR_NT_VA_VV",
"累 NN_VA_VV",
"验 AD_JJ_NN_VV",
"后 AD_DT_JJ_LC_NN_NT_VA_VV",
"再 AD_JJ_NN_VV",
"定 AD_JJ_NN_NR_VA_VV",
"例 M_NN_VA_VV",
"法 AD_JJ_NN_NR_VA_VV",
"鉴 NN_P_VV",
"家 AD_JJ_M_NN_NR_PN_VE_VV",
"和 CC_ETC_JJ_NN_NR_P_VA_VV",
"圳 NN_NR",
"区 AD_JJ_M_NN_NR_VV",
"训 JJ_NN_VV",
"请 NN_VV",
"外 AD_DT_JJ_LC_NN_NR_PN_VA_VE_VV",
"关 JJ_M_NN_NR_P_VA_VV",
"极 AD_JJ_NN_NR_VA_VV",
"时 AD_JJ_LC_M_NN_NR_NT_PN_VA_VV",
"地 AD_DEC_DER_DEV_JJ_NN_NR_VA_VV",
"出 AD_JJ_LC_M_NN_VA_VV",
"使 AD_CS_NN_NR_VV",
"些 AD_CD_DT_JJ_M_NT_PN",
"动 AD_JJ_NN_NR_VA_VV",
"就 AD_NN_P_VV",
"被 JJ_LB_NN_SB_VV",
"入 AD_JJ_NN_VA_VV",
"道 AD_JJ_M_NN_NR_VA_VV",
"年 AD_CD_JJ_LC_M_NN_NR_NT_VV",
"初 AD_JJ_LC_NN_NR_NT_VV",
"生 AD_JJ_M_NN_NR_VA_VV",
"国 AD_JJ_LC_NN_NR_VA_VE_VV",
"疗 NN_VV",
"构 NN_VV",
"品 M_NN_NR_VV",
"购 JJ_NN_VV",
"务 AD_JJ_NN_VV",
"正 AD_JJ_LC_NN_NR_VA_VV",
"为 AD_CS_JJ_LB_MSP_NN_NR_P_VA_VC_VV",
"始 AD_JJ_LC_NN_NR_VA_VV",
"较 AD_JJ_LC_NN_P_VV",
"范 NN_NR_VA_VV",
"转 AD_JJ_NN_OD_VA_VV",
"今 AD_DT_NN_NR_NT_VV",
"交 NN_NR_NT_VE_VV",
"多 AD_CD_JJ_NN_NR_NT_VA_VV",
"元 AD_JJ_M_NN_NR_VA",
"有 AD_CC_CS_DEC_DT_JJ_NN_NR_SP_VA_VE_VV",
"扣 AD_NN_VV",
"筑 NN_VV",
"要 AD_CS_JJ_NN_VA_VV",
"司 JJ_M_NN_NR_VV",
"个 AD_AS_CD_DER_DT_JJ_M_NN_PN",
"在 AD_JJ_NN_NR_NT_P_VA_VV",
"这 AD_DT_PN",
"片 AD_CD_M_NN_VV",
"土 JJ_NN_NR_VV",
"上 AD_CC_CD_DT_JJ_LC_M_NN_NR_NT_PN_VV",
"止 AD_CC_JJ_LC_NN_NR_P_VV",
"象 JJ_NN_NR_P_VA_VV",
"会 AD_JJ_NN_NR_VV",
"据 JJ_NN_P_VA_VV",
"市 JJ_LC_NN_NR_VV",
"合 AD_JJ_NN_NR_VA_VC_VV",
"际 AD_JJ_LC_NN_VA_VV",
"台 CD_JJ_M_NN_NR_VV",
"列 JJ_M_NN_NR_VV",
"场 AD_JJ_M_NN_NR_VV",
"中 AD_AS_JJ_LC_NN_NR_NT_VV",
"括 AD_NN_P_VV",
"工 AD_JJ_LC_NN_NR_VV",
"招 M_NN_NR_VV",
"标 JJ_M_NN_NR_VV",
"理 AD_JJ_NN_NR_VA_VC_VV",
"迁 JJ_NN_VV",
"作 JJ_NN_NR_VV",
"治 AD_JJ_NN_NR_VV",
"章 JJ_M_NN_NR_VV",
"施 NN_NR_VV",
"信 NN_NR_VA_VV",
"线 JJ_M_NN_NR_VV",
"套 AD_JJ_M_NN_VA_VV",
"见 AD_JJ_LC_NN_VA_VV",
"境 NN_VV",
"本 AD_DT_JJ_M_MSP_NN_NR_VV",
"节 AD_M_NN_NR_NT_VV",
"都 AD_NN_NR_VV",
"确 AD_JJ_NN_NR_VA_VV",
"而 AD_CC_JJ_MSP_VV",
"又 AD_CC_NR_VV",
"体 AD_DT_JJ_NN_NR_VA_VV",
"进 JJ_NN_NR_VA_VV",
"门 AD_JJ_LC_M_NN_NR_VA_VV",
"先 AD_JJ_NN_NR_VA_VV",
"送 JJ_NN_VV",
"伍 NN_NR_VA_VV",
"督 NN_NR_VV",
"查 NN_NR_VV",
"管 AD_BA_CC_CS_M_NN_VV",
"粗 JJ_NN_NR_VA_VV",
"还 AD_CC_NN_VV",
"待 AD_NN_VV",
"践 NN_NR_VV",
"善 AD_JJ_LC_NN_NR_VA_VV",
"但 AD_CC",
"种 JJ_M_NN_VV",
"跟 CC_NN_P_VV",
"评 NN_NR_VV",
"们 NN_PN",
"资 AD_JJ_NN_NR_VV",
"事 AD_JJ_NN_VV",
"讲 NN_VV",
"矩 NN",
"益 AD_JJ_NN_NR_VA_VV",
"能 AD_JJ_NN_NR_VA_VV",
"障 JJ_NN_VV",
"完 NN_VV",
"商 NN_NR_VV",
"业 AD_JJ_NN_NR_VA_VV",
"贸 JJ_NN_NR",
"点 AD_CD_JJ_M_NN_NT_VV",
"京 JJ_NN_NR_VV",
"虹 NN_NR",
"口 AD_JJ_LC_M_NN_NR_VA_VV",
"挥 NN_VV",
"著 AD_AS_JJ_NN_P_VA_VV",
"用 AD_CC_JJ_LC_NN_NR_P_VA_VE_VV",
"占 NN_VV",
"达 JJ_NN_NR_VA_VV",
"比 AD_CC_JJ_M_NN_NR_P_VA_VV",
"长 AD_JJ_NN_NR_VA_VV",
"显 AD_JJ_NN_NR_VA_VV",
"于 AD_CC_CS_NN_P_VV",
"均 AD_JJ_NN_VA_VV",
"平 AD_JJ_NN_NR_VA_VV",
"仍 AD_VV",
"以 AD_LC_MSP_NR_P_PN_VA_VV",
"纺 NN_NR_VV",
"主 AD_JJ_NN_NR_VA_VC_VV",
"额 AD_JJ_NN_VV",
"大 AD_JJ_LC_NN_NR_VA_VV",
"装 AD_JJ_NN_VV",
"则 AD_JJ_M_NN_VV",
"械 JJ_NN",
"备 JJ_NN_VA_VV",
"料 AD_JJ_NN_VV",
"e CD_FW_JJ_NN_NR_NT_VV",
"得 AD_DEC_DER_DEV_NN_NR_VA_VV",
"喜 AD_JJ_NN_NR_VA_VV",
"果 AD_CS_NN_NR_VV",
"院 NN_NR",
"准 JJ_NN_VA_VV",
"河 JJ_NN_NR",
"祥 JJ_NN_NR_VA_VV",
"春 JJ_NN_NR_NT_VV",
"宁 AD_NN_NR_VA",
"丽 JJ_NN_NR_VA",
"立 AD_JJ_NN_NR_VA_VV",
"三 AD_CD_JJ_LC_NN_NR_NT_OD_VV",
"展 JJ_LC_NN_NR_VV",
"速 AD_JJ_NN_VA_VV",
"方 AD_JJ_M_NN_NR_PN_VA_VV",
"力 AD_JJ_NN_NR_VA_VV",
"强 AD_CD_JJ_NN_NR_VA_VV",
"; PU",
"度 AD_JJ_M_NN_NR_NT_VA_VV",
"绍 NN_NR_VV",
"伐 NN_VV",
"快 AD_JJ_NN_NR_VA_VV",
"计 AD_JJ_NN_VV",
"成 CD_JJ_NN_NR_P_VV",
"产 JJ_NN_VA_VV",
"日 AD_JJ_M_NN_NR_NT_VV",
"楼 M_NN_VV",
"不 AD_JJ_NN_NR_VA_VC_VV",
"高 AD_CD_JJ_NN_NR_VA_VV",
"路 AD_LC_M_NN_NR_VV",
"灯 NN_NR_VV",
"明 AD_JJ_NN_NR_NT_VA_VV",
"水 ETC_JJ_LC_NN_NR_VA_VV",
"清 NN_NR_NT_VA_VV",
"讯 NN_NR_VV",
"畅 NN_NR_VA",
"已 AD_NN_SP_VV",
"变 NN_VA_VV",
"内 AD_JJ_LC_NN_NR_VV",
"里 AD_LC_M_NN_NR_PN_VA_VV",
"联 AD_JJ_NN_NR_P_VV",
"目 AD_JJ_NN_NR_VA_VV",
"局 NN_NR_VV",
"包 M_NN_VV",
"最 AD_JJ_NN_VV",
"模 AD_JJ_NN_NR_VV",
"近 AD_CD_JJ_M_NN_NT_P_VA_VV",
"代 JJ_M_NN_NR_NT_VV",
"兰 NN_NR",
"利 AD_JJ_NN_NR_VA_VV",
"坡 JJ_NN_NR_VV",
"港 JJ_NN_NR_VV",
"湾 LC_NN_NR",
"总 AD_JJ_NN_NR_VA_VE_VV",
"或 AD_CC_VV",
"分 AD_CD_JJ_M_NN_VA_VV",
"界 JJ_NN_NR_VV",
"少 AD_CD_JJ_NN_VA_VV",
"部 AD_CD_DT_JJ_M_NN_NR",
"凡 AD_DT_JJ_NR_VA_VV",
"织 JJ_NN_NR_VV",
"款 JJ_M_NN_VV",
"并 AD_CC_NN_NR_VV",
"由 AD_JJ_NN_NR_P_VA_VV",
"开 AD_JJ_NN_VA_VV",
"术 JJ_NN_VA_VV",
"独 AD_JJ_NN_VA_VV",
"批 AD_CD_M_NN_VV",
"质 JJ_NN_VA",
"证 JJ_NN_NR_VV",
"皆 AD_VC_VV",
"可 AD_JJ_NN_NR_VA_VV",
"《 PU",
"》 PU",
"从 AD_NN_NR_P_VV",
"许 AD_CD_DT_JJ_NN_VV",
"办 NN_NR_VV",
"藏 LC_NN_NR_VA_VV",
"绩 JJ_NN",
"萨 NN_NR",
"央 JJ_NN_NR",
"珍 NR_VV",
"全 AD_DT_JJ_NN_NR_VA_VV",
"次 AD_JJ_M_NN_NR_VV",
"破 JJ_NN_VA_VV",
"增 JJ_NN_NR_VV",
"汇 JJ_NN_NR_VV",
"革 NN_NR_VV",
"轨 JJ_NN_VV",
"结 JJ_NN_VA_VV",
"售 NN_VV",
"销 NN_VV",
"面 AD_JJ_LC_M_NN_VA_VV",
"效 AD_JJ_NN_VA_VV",
"失 NN_VV",
"幅 AD_JJ_M_NN",
"远 AD_JJ_NN_NR_VA_VV",
"议 NN_NR_VA_VV",
"求 NN_VV",
"整 AD_DT_JJ_NN_VA_VV",
"贷 NN",
"源 AD_JJ_NN_NR_VV",
"通 AD_JJ_M_NN_NR_VA_VV",
"常 AD_JJ_NN_NR_VA_VV",
"金 JJ_M_NN_NR_VV",
"应 AD_JJ_NN_NR_P_VA_VV",
"加 AD_CC_JJ_NN_NR_VV",
"币 M_NN_VV",
"笼 M_NN_VV",
"抑 NN_VA_VV",
"价 AD_JJ_NN_VA_VV",
"解 JJ_NN_VV",
"着 AD_AS_JJ_NN_P_VA_VE_VV",
"断 AD_JJ_NN_VA_VV",
"华 JJ_NN_NR_VA_VV",
"情 AD_JJ_NN_VA_VV",
"很 AD_JJ_NN_VV",
"且 AD_CC_NR_VV",
"营 JJ_NN_NR_VV",
"好 AD_CD_JJ_M_MSP_NN_NR_VA_VV",
"半 AD_CD_JJ_NN_NR_NT_VA_VV",
"供 NN_VV",
"仅 AD_CC_DEG_VV",
"向 AD_JJ_NN_NR_P_VA_VV",
"持 AD_NN_VV",
"础 JJ_NN",
"底 AD_LC_NN_NR_NT_VA_VV",
"约 AD_JJ_NN_NR_VA_VV",
"户 AD_JJ_M_NN_NR_VV",
"人 JJ_LC_M_NN_NR_PN_VA_VV",
"露 NN_VV",
"将 AD_BA_NN_VV",
"续 AD_JJ_NN_VA_VV",
"其 AD_CC_DT_NN_NR_PN_VV",
"斜 JJ_NN_VV",
"型 AD_JJ_M_NN_VA_VV",
"税 AD_JJ_NN_VV",
"也 AD_CC_NR_SP",
"处 AD_LC_M_NN_PN_VV",
"员 AD_M_NN_VV",
"良 JJ_NN_NR_VA_VV",
"阁 JJ_NN_NR_VV",
"经 AD_JJ_NN_NR_P_VV",
"署 NN_VV",
"驻 JJ_NN_VV",
"式 AD_JJ_M_NN",
"郊 NN_NR",
"继 AD_JJ_NN_P_VV",
"贤 NN_NR_VV",
"庄 NN_NR",
"江 NN_NR",
"浦 NR",
"山 LC_NN_NR_VV",
"d CD_FW_NN_NR_OD",
"岛 JJ_NN_NR",
"越 AD_JJ_LC_NN_NR_VA_VV",
"久 AD_JJ_NN_NR_NT_PN_VA_VV",
"史 JJ_NN_NR",
"县 NN_NR",
"猛 AD_JJ_VA",
"物 JJ_NN_VV",
"百 CD_NN_NR_VV",
"位 AD_DT_JJ_M_NN_PN_VV",
"足 AD_JJ_NN_NR_VA_VV",
"切 AD_DT_JJ_NN_PN_VA_VV",
"引 NN_VA_VV",
"便 AD_CC_CS_JJ_NN_VA_VV",
"捷 JJ_NR_VA_VV",
"把 BA_CD_M_NN_VV",
"运 JJ_NN_NR_VA_VV",
"起 AD_LC_M_NN_P_VV",
"西 AD_JJ_LC_M_NN_NR_VV",
"然 AD_CS_JJ_NN_NR_VA_VC_VV",
"玉 NN_NR",
"数 AD_CD_JJ_NN_VA_VV",
"闻 NN_NR_VA_VV",
"小 AD_JJ_NN_NR_VA_VV",
"村 NN_NR",
"架 M_NN_VV",
"流 AD_JJ_M_NN_NR_VA_VV",
"如 AD_CC_CS_NR_P_VA_VV",
"潮 JJ_NN_NR_VA_VV",
"房 JJ_NN",
"颗 M_NN",
"星 AD_JJ_NN_NR_VA_VV",
"志 NN_NR_VV",
"镇 JJ_NN_NR",
"相 AD_JJ_LC_NN_NR_VV",
"沿 NN_P_VV",
"边 AD_JJ_LC_M_NN_NR_PN_VV",
"府 JJ_NN_NR_VV",
"略 AD_JJ_NN_NR_VV",
"下 AD_DT_JJ_LC_M_NN_NR_NT_PN_VV",
"权 AD_JJ_NN_NR_VV",
"州 JJ_NN_NR",
"城 JJ_NN_NR_VV",
"乡 CC_NN_NR_VV",
"林 JJ_LC_NN_NR_VV",
"游 NN_NR_OD_VV",
"右 AD_LC_NN_NR_VV",
"谷 NN_NR_VV",
"贫 JJ_NN_VA_VV",
"带 AD_JJ_M_NN_VV",
"红 JJ_NN_NR_VA_VV",
"亿 CD_JJ_NR",
"造 JJ_LC_NN_NR_VV",
"策 JJ_NN_VV",
"当 AD_DT_JJ_LC_NN_P_VA_VV",
"跃 AD_JJ_NN_NR_VA_VV",
"厚 JJ_NN_VA_VV",
"伊 DEG_NR",
"藤 NN_NR",
"忠 NR_VA_VV",
"宇 NN_NR",
"团 AD_JJ_M_NN_NR_VV",
"纷 AD_JJ_NN_VA_VV",
"南 LC_NN_NR_VC_VV",
"川 NN_NR",
"省 JJ_NN_NR_VV",
"肃 AD_JJ_NN_NR_VA_VV",
"直 AD_JJ_NN_NR_VA_VV",
"铝 NN",
"输 NN_VV",
"险 JJ_NN_VA_VV",
"车 JJ_LC_NN_NR_VV",
"任 AD_JJ_M_NN_NR_VA_VV",
"润 NN_NR_VA_VV",
"率 AD_NN_VA_VV",
"秦 JJ_NN_NR",
"溉 NN",
"类 AD_JJ_M_NN_VV",
"厂 NN_NR_VV",
"改 AD_NN_VV",
"建 JJ_NN_NR_VV",
"拓 NN_NR_VV",
"韦 NR",
"油 NN_NR_VA_VV",
"井 NN_NR_VV",
"获 NN_VV",
"券 NN",
"级 AD_DEG_JJ_M_NN_VA_VV",
"- CD_FW_NN_PU_VV",
"债 JJ_NN_VV",
"所 AD_DEC_JJ_M_MSP_NN_NR_VV",
"致 AD_JJ_MSP_NN_NR_VA_VV",
"问 AD_NN_VV",
"名 AD_JJ_M_NN_NR_VA_VV",
"察 NN_NR_VV",
"景 JJ_NN_NR_VV",
"状 JJ_NN_VV",
"之 AD_CD_DEC_DEG_LC_NN_NR_NT_P_PN_VV",
"深 AD_JJ_NN_NR_VA_VV",
"该 DT_VV",
"至 AD_CC_LC_NN_NR_P_VV",
"炬 NN_VV",
"茅 NN_VV",
"药 NN_VV",
"机 AD_DEG_JJ_M_NN_NR_VA_VV",
"实 AD_JJ_NN_NR_VA_VV",
"科 JJ_M_NN_NR_VV",
"学 AD_JJ_LC_NN_NR_VA_VV",
"士 JJ_NN_NR_VV",
"森 JJ_NN_NR",
"究 AD_NN_VA_VV",
"功 AD_JJ_NN_NR_VA_VV",
"肝 JJ_NN",
"减 JJ_NN_VV",
"毒 JJ_NN_NR_VA_VV",
"活 AD_JJ_NN_NR_VA_VV",
"苗 NN_NR",
"普 NN_NR",
"康 AD_JJ_NN_NR_VA_VV",
"份 AD_CD_M_NN_NR_VV",
"义 JJ_NN_NR_VA_VV",
"奖 NN_NR_VV",
"氮 NN",
"护 JJ_NN_NR_VV",
"气 AD_JJ_NN_VA_VV",
"拉 IJ_NN_NR_VV",
"硅 NN",
"晶 NN_NR_VA",
"吨 CD_M",
"居 JJ_M_NN_NR_VV",
"亚 NN_NR",
"美 JJ_NN_NR_VA_VV",
"岸 JJ_NN_VV",
"差 NN_NR_VA_VV",
"示 NN_VV",
"陆 AD_NN_NR_VV",
"案 NN_VV",
"共 AD_JJ_NN_NR_VV",
"却 AD_CC_VV",
"杭 NR",
"老 AD_JJ_NN_NR_VA_VV",
"北 AD_JJ_LC_NN_NR_VV",
"条 M_NN_NR_VA_VV",
"荣 JJ_NN_NR_VA_VV",
"廊 NN",
"贾 NN_NR",
"集 AD_JJ_M_NN_NR_VA_VV",
"万 AD_CD_M_NN_NR_VV",
"脉 NN_VV",
"给 AD_JJ_NN_P_VV",
"命 AD_JJ_NN_VA_VV",
"苏 NN_NR_VV",
"钢 JJ_NN_NR_VV",
"靠 JJ_NN_P_VA_VV",
"炭 NN_NR",
"走 NN_VV",
"费 AD_JJ_NN_VV",
"每 AD_DT",
"宜 AD_NN_NR_VA_VV",
"筹 JJ_NN_VV",
"座 M_NN_VV",
"桥 JJ_NN_NR_VV",
"连 AD_JJ_NN_NR_P_VV",
"铁 JJ_NN_NR_VV",
"材 JJ_NN_NR_VV",
"柱 NN_NR",
"围 AD_NN_NR_VV",
"矿 NN_NR_VV",
"育 JJ_NN_NR_VV",
"七 CD_NN_OD",
"超 AD_JJ_NN_NR_VA_VV",
"值 JJ_NN_VV",
"傍 LC_P",
"牌 JJ_NN_NR_VV",
"势 AD_JJ_NN_NR_VA_VV",
"托 JJ_NN_NR_VV",
"八 CD_LC_NN_NR_NT_OD_VV",
"韩 NN_NR",
"论 AD_CC_CS_JJ_NN_VV",
"它 DT_PN",
"悉 AD_NN_VA_VV",
"委 JJ_NN_NR_VV",
"威 JJ_NN_NR_VA_VV",
"重 AD_JJ_M_NN_NR_VA_VV",
"低 JJ_NN_VA_VV",
"消 NN_VV",
"帐 JJ_LC_NN_VV",
"注 NN_VV",
"空 AD_JJ_NN_NR_VA_VV",
"视 JJ_NN_NR_VV",
"判 NN_VV",
"洲 JJ_NN_NR",
"馆 NN_NR_VV",
"称 AD_NN_VA_VV",
"沙 NN_NR",
"角 JJ_LC_M_NN_NR_VV",
"五 CD_JJ_NN_NR_NT_OD_VV",
"导 JJ_NN_VA_VV",
"储 NN_VV",
"助 AD_JJ_NN_NR_P_VA_VV",
"按 P_VV",
"殊 JJ_NN_VA",
"述 JJ_NN_VV",
"除 LC_NN_P_VV",
"才 AD_JJ_NN_NR_VV",
"照 AD_NN_NR_P_VV",
"接 AD_JJ_NN_VA_VV",
"硬 AD_JJ_NN_VA_VV",
"站 JJ_M_NN_NR_VV",
"龙 NN_NR_VV",
"即 AD_JJ_NN_VC_VV",
"统 AD_JJ_NN_VA_VV",
"散 AD_JJ_NN_NR_VA_VV",
"态 JJ_NN_VV",
"早 AD_JJ_NN_NR_NT_VA_VV",
"测 JJ_NN_VV",
": PU",
"球 M_NN_NR_VV",
"遇 NN_VV",
"胜 AD_JJ_NN_NR_VA_VV",
"临 JJ_NN_NR_P_VV",
"析 NN_VV",
"两 AD_CD_M_NN_NR_VV",
"二 AD_CD_JJ_M_NN_NR_NT_OD_VA_VV",
"严 AD_JJ_NN_NR_VA_VV",
"竣 JJ_VV",
"战 JJ_NN_NR_VV",
"难 AD_JJ_NN_NR_VA_VV",
"胀 NN_VV",
"弱 NN_VA_VV",
"须 AD_NN_VA_VV",
"身 AD_JJ_M_NN_PN_VA_VV",
"齐 AD_NR_VV",
"无 AD_JJ_NN_NR_VA_VE_VV",
"争 AD_NN_VV",
"烈 AD_JJ_NN_NR_VA_VV",
"限 AD_JJ_NN_NR_VA_VV",
"十 CD_M_NN_OD",
"期 AD_JJ_LC_M_NN_NR_NT_VA_VV",
"惠 AD_JJ_NN_NR_VA_VV",
"岭 NN_NR",
"澳 M_NN_NR_VV",
"敏 NR_VA",
"自 AD_JJ_NN_P_PN_VV",
"做 AD_AS_JJ_P_VV",
"辛 NN_NR_VA",
"置 JJ_NN_VV",
"太 AD_NN_NR_VV",
"励 NN_VV",
"洋 AD_JJ_NN_NR_VV",
"六 CD_NN_NR_NT_OD_VE",
"别 AD_JJ_NN_NR_P_VA_VV",
"离 JJ_NN_P_VA_VV",
"琼 NR",
"胆 AD_VA",
"波 M_NN_NR_VV",
"伟 JJ_NR_VA",
"骥 NR_VV",
"积 AD_JJ_NN_VV",
"硕 JJ_NR_VA_VV",
"各 AD_DT_NN_NR_VV",
"库 NN_NR_VV",
"米 JJ_M_NN_NR_VV",
"月 AD_JJ_M_NN_NR_NT_VV",
"免 AD_CS_JJ_MSP_NN_VV",
"册 JJ_M_NN_VV",
"记 JJ_M_NN_NR_VV",
"息 NN_VV",
"络 JJ_NN_VV",
"系 CS_JJ_NN_NR_VC_VV",
"原 AD_JJ_LC_NN_NR_VV",
"鄯 NR",
"宝 JJ_M_NN_NR_VA_VV",
"渡 JJ_NN_NR_VV",
"草 NN_VV",
"声 AD_JJ_M_NN_NR_VA_VV",
"话 NN_SP_VV",
"伏 M_NN_VV",
"压 JJ_NN_VV",
"檬 NN",
"漆 NN_VV",
"诊 NN_VV",
"谈 NN_NR_VV",
"峡 NN_NR",
"笔 AD_JJ_M_NN_VV",
"昌 NR",
"峰 NN_NR",
"i NN_NR",
"同 AD_CC_DT_JJ_NN_NR_P_VA_VV",
"楣 NR",
"赴 VV",
"签 NN_VV",
"子 AD_JJ_M_NN_NR_NT_VV",
"订 M_NN_VV",
"绕 JJ_P_VV",
"索 NN_NR_VV",
"头 AD_DT_JJ_LC_M_NN_NR_OD_VA_VV",
"让 NN_NR_VV",
"辟 NN_VV",
"闽 LC_NR",
"霆 NR_VV",
"田 NN_NR_VV",
"创 JJ_NN_NR_VV",
"佳 JJ_NN_NR_VA_VV",
"劲 AD_JJ_NN_NR_VA_VV",
"福 NN_NR_VA_VV",
"古 AD_JJ_NN_NR_NT_VA_VV",
"盟 NN_NR_VV",
"特 AD_DEC_JJ_M_NN_NR_VA_VV",
"涛 NN_NR",
"疆 JJ_NN_NR",
"陲 NN",
"斯 DT_JJ_NN_NR",
"壤 NN_NR_VV",
"九 CD_JJ_NN_NR_NT_OD",
"缘 AD_JJ_NN_VV",
"真 AD_JJ_NN_NR_VA_VV",
"乱 AD_NN_NR_VA_VV",
"卡 NN_NR_VV",
"令 AD_NN_NR_VV",
"白 AD_JJ_NN_NR_VA_VV",
"撤 NN_VV",
"掉 NN_VV",
"堵 M_NN_NR_VV",
"抓 NN_VA_VV",
"顿 JJ_M_NN_NR_VA_VV",
"天 AD_JJ_M_NN_NR_NT_VV",
"张 AD_JJ_M_NN_NR_VA_VV",
"格 AD_JJ_M_NN_NR_VA_VV",
"检 NN_VV",
"短 AD_JJ_NN_VA_VV",
"黑 JJ_NN_NR_VA_VV",
"旗 NN_NR",
"拨 JJ_NN_VV",
"网 JJ_LC_NN_NR_VV",
"尔 AD_M_NN_NR_VV",
"店 JJ_NN_NR_VV",
"余 CD_DT_JJ_LC_NN_NR_VV",
"航 AD_NN_NR_VV",
"光 AD_LC_NN_NR_VA_VV",
"意 AD_JJ_NN_NR_VA_VV",
"铅 JJ_NN",
"锌 NN",
"希 NN_NR_VV",
"勒 NR_VV",
"组 M_NN_VV",
"货 JJ_NN_VV",
"倍 AD_CD_JJ_M_NR_VV",
"般 AD_JJ_NN_VA",
"降 JJ_LC_NN_VV",
"升 M_NN_NR_VV",
"糖 JJ_NN_NR",
"军 JJ_NN_NR_VV",
"室 JJ_M_NN_VC",
"芝 NN_NR",
"密 AD_JJ_NN_NR_VA_VV",
"精 JJ_NN_VA_VV",
"只 AD_CC_M_NN_VV",
"缅 NR",
"泰 DEG_NN_NR",
"飞 NN_NR_VV",
"甸 NR",
"午 LC_NN_NT",
"复 AD_JJ_NN_NR_VA_VV",
"律 AD_NN_NR_VV",
"席 M_NN_VV",
"瑞 M_NR",
"字 AD_M_NN_NR_VV",
"吞 NN_NR_VV",
"基 NN_NR_VV",
"表 NN_VV",
"汉 NN_NR",
"闭 NN_VA_VV",
"医 JJ_NN_VV",
"叫 NN_VV",
"x NN_NR",
"询 AD_NN_VV",
"箱 M_NN_NR",
"赁 NN_VV",
"买 NN_VV",
"阳 NN_NR",
"钞 JJ_NN_NR",
"文 AD_JJ_NN_NR_VA_VV",
"族 JJ_M_NN_NR_VV",
"说 AD_CS_NN_VV",
"措 NN_VV",
"蕙 NR",
"调 AD_NN_VA_VV",
"属 JJ_NN_VV",
"粤 NR",
"容 AD_NN_NR_VA_VV",
"塞 JJ_NN_NR_VA_VV",
"洞 NN_NR_VV",
"收 JJ_NN_VA_VV",
"轻 AD_JJ_NN_VA_VV",
"担 M_NN_VV",
"莞 NR",
"受 JJ_LB_NN_P_SB_VA_VV",
"遍 AD_JJ_M_NN_VA_VV",
"亮 JJ_NN_NR_VA_VV",
"去 MSP_NN_NR_NT_P_VV",
"观 AD_JJ_NN_NR_VA_VV",
"存 JJ_NN_NR_VV",
"味 AD_JJ_M_NN_VA_VV",
"慢 AD_JJ_NN_VA_VV",
"脑 AD_NN_VV",
"往 AD_JJ_NN_NT_P_VV",
"移 NN_NR_VA_VV",
"录 JJ_NN_VV",
"响 NN_VV",
"尝 AD_VV",
"终 AD_JJ_NN",
"阔 DEC_JJ_NN_VA_VV",
"旁 AD_LC_M_NN_NR",
"像 AD_NN_P_VV",
"亩 M",
"色 AD_JJ_M_NN_NR_VA_VV",
"试 JJ_NN_VV",
"研 NN_NR_VA_VV",
"画 AD_M_NN_VV",
"s CC_NN_NR",
"泥 NN_NR_VA_VV",
"袋 M_NN_VV",
"厦 NN_NR",
"四 CD_NN_NR_NT_OD_VV",
"图 JJ_NN_NR_VA_VV",
"己 AD_NN_PN_VV",
"递 NN_VV",
"换 JJ_NN_NR_VV",
"津 NN_NR_VV",
"邦 NN_NR",
"俄 JJ_NN_NR",
"载 AD_JJ_M_NN_VV",
"档 JJ_NN_VA_VV",
"亦 AD_CC_VC_VV",
"紧 AD_JJ_NN_VA_VV",
"遣 NN_VV",
"纳 NN_NR_VV",
"尼 NN_NR",
"番 AD_LC_M_NN_NR",
"他 DT_NN_PN_VV",
"拟 JJ_NN_VV",
"选 AS_JJ_LC_NN_VV",
"党 JJ_NN_NR_VV",
"烯 NN",
"副 JJ_M_NN",
"样 AD_DT_JJ_M_NN_PN_VA_VV",
"马 NN_NR_VV",
"冻 NN_VA_VV",
"泊 NN_VA_VV",
"卸 NN_VV",
"政 NN_NR_VV",
"纵 CS_NN_NR_VV",
"横 M_NN_NR_VV",
"趋 AD_JJ_VV",
"火 NN_NR_VV",
"滕 NR",
"乐 AD_JJ_NN_NR_VA_VV",
"德 JJ_LC_NN_NR_VA_VV",
"聚 AD_JJ_NN_NR_VV",
"脂 NN_VV",
"望 AD_NN_NR_VA_VV",
"安 AD_JJ_NN_NR_VA_VV",
"玻 NN_NR",
"壳 NN",
"耕 JJ_NN_NR_VV",
"彩 JJ_NN_VA_VV",
"既 AD_CC_CS",
"屏 NN_NR",
"宽 JJ_NN_NR_VA_VV",
"幕 JJ_M_NN_VV",
"千 CD_NN_NR_NT_VV",
"回 AD_DER_M_NN_VV",
"我 AD_PN_VA_VV",
"泛 AD_JJ_NN_NR_VA_VV",
"迹 JJ_NN_VV",
"锥 NN_VV",
"炉 NN_VV",
"谦 NR_VV",
"宫 LC_NN_NR",
"周 M_NN_NR_NT",
"t NN_NR_VV",
"m NN_NR",
"音 JJ_NN_NR_VV",
"屋 LC_NN_NR_VV",
"仙 NN_NR",
"妮 NR",
"手 AD_JJ_M_NN_NR_VA_VV",
"派 AD_JJ_M_NN_VV",
"杂 JJ_NN_VA_VV",
"裔 JJ_NN",
"震 NN_NR_VV",
"师 NN_VV",
"守 AD_JJ_NN_VA_VV",
"健 AD_JJ_NN_NR_VA_VV",
"雷 NN_NR",
"器 NN",
"兼 AD_CC_VV",
"岁 JJ_M_NN_NT_VV",
"服 JJ_NN_VA_VV",
"攀 VV",
"懦 JJ",
"想 JJ_NN_VA_VV",
"键 JJ_NN_VA",
"距 AD_NN_P_VV",
"排 JJ_M_NN_VV",
"箭 NN_VV",
"返 NN_VV",
"举 AD_NN_VV",
"a CD_FW_NN_NR",
"素 AD_NN_NR_VV",
"病 JJ_NN_NR_VV",
"癌 NN_VV",
"否 AD_VV",
"搞 VV",
"败 NN_NR_VA_VV",
"衰 NN_VA_VV",
"氨 NN",
"纶 NN_VV",
"丝 JJ_NN_NR",
"伦 NN_NR",
"协 NN_NR_VA_VV",
"裁 JJ_NN_VV",
"职 AD_JJ_NN_VV",
"翔 NR_VV",
"诉 NN_VC_VV",
"\' PU",
"修 JJ_NN_NR_VV",
"智 JJ_NN_NR_VA_VV",
"择 NN_VV",
"虽 AD_CS_VV",
"沛 JJ_VA",
"维 NN_NR",
"献 NN_VV",
"晓 NR_VV",
"投 JJ_NN_NR_VV",
"民 JJ_LC_NN_NR_NT_VV",
"写 NN_VV",
"姓 NN_NR_VV",
"穿 NN_VV",
"涨 NN_VV",
"灌 NN_NR_VV",
"洪 NN_NR_VV",
"知 AD_NN_VA_VV",
"泽 NN_NR_VV",
"世 JJ_M_NN_NR_VV",
"尽 AD_NN_VA_VV",
"汛 JJ_NN",
"街 NN_NR_VV",
"园 JJ_NN_NR",
"言 AD_JJ_NN_NR_VA_VV",
"历 DT_JJ_LC_NN_NR_NT_VV",
"秋 NN_NR_NT_VV",
"末 LC_NN_NT_OD",
"蓉 NN_NR",
"斌 NR",
"住 AD_JJ_LC_NN_NR_VV",
"迪 NR",
"控 JJ_NN_VV",
"更 AD_CC_JJ_M_NN_NT_VV",
"撑 NN_VV",
"算 AD_CS_JJ_NN_VA_VV",
"剧 AD_NN_NR_VV",
"盾 M_NN_NR_VA",
"扰 NN_VV",
"轮 M_NN_NR_VV",
"阶 JJ_NN_VV",
"官 NN_VV",
"告 AD_NN_NR_VV",
"迎 NN_VA_VV",
"茨 NR",
"晨 NN_NR_NT",
"领 NN_NR_VV",
"报 NN_NR_VV",
"层 AD_JJ_M_NN_VA_VV",
"认 NN_VV",
"归 AD_NN_NR_VV",
"稿 NN_VV",
"播 NN_VV",
"号 AD_M_NN_NR_VV",
"敬 NN_NR_VV",
"侨 JJ_NN",
"卫 JJ_NN_NR_VA_VV",
"松 AD_NN_NR_VA_VV",
"软 AD_JJ_NN_NR_VA_VV",
"厅 NN",
"罗 NN_NR_SP_VV",
"谊 NN_NR_VV",
"逾 AD_VV",
"饮 NN_VV",
"膳 NN",
"吃 AS_NN_VA_VV",
"狗 JJ_NN_NR",
"锁 JJ_NN_VV",
"伴 AS_NN_VV",
"庆 JJ_NN_NR_VV",
"季 M_NN_NR_NT",
"雪 JJ_NN_NR_VV",
"估 NN_VV",
"予 NR_P_PN_VV",
"鲜 AD_JJ_NN_NR_VA_VE_VV",
"纽 NN_NR",
"晟 NR",
"朝 NN_NR_P_VV",
"崴 NR",
"典 JJ_NN_NR_VA",
"蒙 JJ_NN_NR_VV",
"邀 NN_VV",
"仁 NN_NR_VA_VV",
"貌 NN_PN",
"拿 NN_VV",
"洙 NR",
"补 NN_VA_VV",
"菜 NN",
"酒 JJ_NN_NT_VV",
"麦 NN_NR",
"鱼 JJ_NN_NR_VV",
"氏 NN_NR",
"沼 NN",
"虾 NN",
"鸡 NN_VA",
"肉 NN_VV",
"猪 NN_NR",
"卉 NN",
"互 AD_NN_PN_VV",
"辞 NN_VV",
"叶 M_NN_NR_VV",
"需 AD_JJ_NN_VA_VV",
"晤 NN_VV",
"端 AD_JJ_LC_M_NN_NR_VA_VV",
"隆 AD_NN_NR_VA_VV",
"柏 NN_NR",
"恩 NN_NR_VV",
"尚 AD_NN_NR_VA_VV",
"束 M_NN_VV",
"谋 AD_NN_NR_VV",
"旧 AD_DEC_DEG_JJ_NN_NR_VA_VV",
"念 NN_VV",
"促 NN_VA_VV",
"识 JJ_NN_VV",
"谐 AD_JJ_NN_VA",
"讨 NN_VV",
"提 NN_NR_VV",
"何 AD_DT_JJ_NN_PN_VA_VV",
"犯 NN_VV",
"涉 JJ_NN_VV",
"诺 NN_NR_VV",
"决 AD_JJ_NN_VV",
"歧 NN_VA_VV",
"径 NN_NR_VV",
"够 AD_JJ_VA_VV",
"非 AD_CC_CS_JJ_NN_NR_VC_VV",
"衡 AD_JJ_NN_NR_VA_VV",
"异 AD_JJ_NN_VA_VV",
"荡 NN_VA_VV",
"辆 M_NN",
"奥 NR",
"杰 NN_NR",
"酿 NN_VV",
"介 NN_NR_VV",
"广 AD_JJ_NN_NR_VA_VV",
"症 NN",
"肢 NN",
"死 JJ_NN_VA_VV",
"食 JJ_NN_VV",
"惯 DEC_NN_VA_VV",
"粒 JJ_M_NN",
"醇 NN",
"冀 NR_VV",
"授 NN_VV",
"血 JJ_NN_VA_VV",
"未 AD_DEC_JJ_NN_VA_VV",
"琛 NR",
"满 AD_JJ_NN_NR_VA_VV",
"握 NN_VV",
"访 NN_VV",
"紊 VV",
"针 M_NN",
"胞 M_NN",
"谓 AD_JJ_VA_VV",
"吹 NN_VV",
"碍 NN_VA_VV",
"愿 AD_NN_NR_VA_VV",
"裂 NN_VV",
"吁 NN_VV",
"亏 AD_NN_VV",
"股 AD_JJ_M_NN_NR_VV",
"沪 NN_NR",
"舶 NN",
"射 JJ_NN_VV",
"籍 JJ_NN",
"顷 M",
"树 NN_NR_VV",
"木 JJ_NN_NR_VV",
"依 NR_P_VV",
"植 NN_VV",
"榈 NN",
"花 JJ_LC_NN_NR_VA_VV",
"坪 M_NN_NR",
"香 JJ_NN_NR_VA_VV",
"湖 NN_NR_VV",
"茶 NN_NR_VV",
"贵 JJ_NN_NR_VA_VV",
"孚 NR_VV",
"乏 NN_VA_VV",
"翼 JJ_NN_VA_VV",
"首 AD_DT_M_NN_OD_VV",
"因 JJ_LC_NN_NR_P_VV",
"菱 NR_VV",
"友 NN_NR_VV",
"朗 JJ_M_NR_VA_VV",
"克 AD_M_NN_NR_VV",
"毕 NN_NR_VV",
"渐 AD_NN_NR_VV",
"看 NN_VA_VV",
"莫 AD_NR_VV",
"宾 NN_NR",
"哥 NN_NR",
"廷 NN_NR",
"v NN_NR",
"形 AD_JJ_NN_VA_VV",
"么 AD_DT_JJ_PN",
"镍 NN",
"申 NR_VV",
"班 AD_M_NN_NR_VV",
"闪 AD_JJ_NN",
"炼 NN_VA_VV",
"钴 NN",
"铂 NN",
"赖 NN_NR_VA_VV",
"潜 NN_VV",
"冶 NN",
"艺 NN",
"填 NN_VV",
"伸 NN_NR_VV",
"纯 AD_JJ_NN_NR_VA",
"酸 JJ_NN_VV",
"铑 NN",
"英 JJ_M_NN_NR_VV",
"酋 NR",
"伯 JJ_NN_NR",
"票 JJ_M_NN_NR_VV",
"忌 NN_NR",
"馏 NN",
"扩 NN_VV",
"砂 JJ_NN",
"梁 NN_NR",
"酵 NN_VV",
"煮 NN_VV",
"坛 NN",
"封 M_NN_NR_VV",
"富 JJ_NN_NR_VA_VV",
"兑 VV",
"菊 NN_NR",
"书 NN_VV",
"船 ETC_JJ_NN_NR_VV",
"留 JJ_NN_NR_VA_VV",
"突 JJ_NN_VV",
"馈 NN_VV",
"责 NN_VV",
"映 NN_NR_VV",
"棉 NN_NR",
"损 NN_VV",
"脱 VV",
"顺 JJ_NN_NR_VA_VV",
"郎 M_NN_NR",
"配 NN_VV",
"堆 M_NN_NR_VV",
"眼 AD_JJ_NN_VA_VV",
"偿 AD_JJ_NN_VA_VV",
"支 M_NN_VV",
"稳 AD_JJ_NN_VA_VV",
"暖 JJ_NN_VA_VV",
"珠 NN_NR",
"鼓 NN_VA_VV",
"臻 AD_JJ_VV",
"岩 NN_NR",
"吐 NN_VV",
"客 NN_NR_VV",
"缆 NN",
"宗 AD_JJ_M_NN_NR_VA_VV",
"彻 NN_NR_VA_VV",
"瓜 NN_NR",
"牧 NN",
"胶 NN",
"彤 NR",
"盈 JJ_NN_NR_VA_VV",
"莲 NN_NR",
"旨 NN",
"滑 NN_VA_VV",
"峻 AD_JJ_NN_VA",
"她 NR_PN",
"肥 JJ_NN_NR_VV",
"企 JJ_NN_NR_VV",
"仑 NR",
"迅 NN_NR",
"群 M_NN_NR_VV",
"畔 LC",
"睐 NN",
"几 AD_CD_NN_OD_VV",
"毯 NN",
"芽 NN_VV",
"坊 NN",
"牙 NN_NR_VV",
"腊 JJ_NN_NR",
"塑 JJ_NN_NR_VV",
"勇 AD_JJ_NN_NR_VA_VV",
"览 NN_VV",
"徽 NR",
"届 M_VV",
"疑 AD_NN_VA_VV",
"繁 AD_JJ_NN_VA_VV",
"欧 M_NN_NR",
"敦 NR",
"坦 NN_NR_VA",
"仪 NN_NR_VV",
"埃 M_NN_NR",
"君 NN_NR_VV",
"衔 NN_VV",
"琪 NR",
"冈 NN_NR",
"奇 JJ_NN_NR_VA_VV",
"拜 NN_NR_VV",
"岫 NR",
"那 AD_CS_DT_NN_NR_PN",
"武 CD_JJ_NN_NR_VA_VV",
"轰 NR_VV",
"寿 NN_NR_VA_VV",
"谬 NR_VA",
"财 JJ_NN_NR_VE_VV",
"彦 NR",
"曦 NN_NR",
"随 AD_NN_NR_P_VA_VV",
"参 NN_VV",
"付 JJ_NN_VV",
"似 AD_JJ_P_VA_VV",
"承 NN_NR_VV",
"坝 NN_NR",
"陵 NN_NR",
"闸 NN_NR",
"石 M_NN_NR_VV",
"堰 NN",
"渠 NN_NR",
"挡 JJ_NN_VV",
"害 JJ_NN_VA_VV",
"故 AD_JJ_NN_VV",
"若 CS_P_VV",
"欠 NN_VV",
"缴 VV",
"铭 NN_NR",
"征 JJ_NN_VV",
"缓 AD_JJ_NN_VA_VV",
"抵 NN_VV",
"停 AD_NN_VA_VV",
"押 NN_VV",
"卖 JJ_NN_NR_VV",
"核 JJ_NN_VV",
"哈 NR_VV",
"雄 JJ_NN_NR_VV",
"讼 NN",
"恒 AD_JJ_NR_VA_VV",
"绸 NN_NR",
"寄 NN_VV",
"凭 NN_P_VV",
"延 AD_NN_NR_VA_VV",
"赔 NN_VV",
"祺 NR",
"审 JJ_M_NN_VV",
"竟 AD_NN_VV",
"盘 AD_JJ_M_NN_NR_VV",
"苦 AD_JJ_NN_VA_VV",
"码 AD_JJ_M_NN_NR_VV",
"楚 AD_NN_NR_VA_VV",
"反 AD_JJ_NN_VA_VV",
"打 JJ_NN_NR_P_VV",
"嬴 VV",
"禄 NR",
"徐 AD_NR",
"盐 NN_NR_VV",
"盛 JJ_NN_NR_VA_VV",
"炜 NR",
"添 NR_VV",
"版 M_NN_VV",
"登 AD_JJ_NN_NR_VV",
"幢 M",
"b CD_FW_JJ_NN_NR",
"找 NN_VV",
"姻 NN_VV",
"亲 JJ_NN_NR_VA_VV",
"零 CD_NN_NT_VV",
"龄 JJ_NN_NR_VA",
"暂 AD_JJ_NN_VA",
"贴 NN_VA_VV",
"陈 NN_NR_VV",
"挂 LC_NN_VV",
"罚 JJ_NN_VV",
"戒 NN_VV",
"忍 NN_NR_VA_VV",
"驹 NR",
"暴 JJ_NN_VA_VV",
"愈 AD_VV",
"? PU",
"借 NN_P_VV",
"纸 JJ_M_NN_NR",
"篇 JJ_M_NN",
"误 AD_JJ_NN_VA_VV",
"p NN_NR",
"农 JJ_LC_NN_NR_VV",
"膜 NN",
"盖 NN_VV",
"雨 JJ_NN_NR_VV",
"斤 M",
"饱 NN_VV",
"净 AD_JJ_NN_VA_VV",
"骤 AD_NN_VV",
"固 AD_JJ_NN_NR_VA_VV",
"浆 NN",
"橡 NN",
"板 NN_NR_VV",
"浮 JJ_NN_VV",
"璃 NN",
"汽 NN_NR",
"昆 NN_NR",
"诚 AD_ETC_JJ_NN_NR_VA",
"忙 AD_NN_VA_VV",
"帆 NN_VV",
"竞 NN_VV",
"晚 AD_NN_NR_NT_VA",
"预 NN_VV",
"贺 NN_NR_VV",
"探 AS_NN_VV",
"巨 JJ_NN_NR_VA",
"岗 NN_NR_VV",
"鲲 NR",
"凯 NN_NR",
"细 AD_CD_JJ_NN_NR_VA_VV",
"妥 AD_JJ_VA_VV",
"银 JJ_NN_NR_VV",
"刻 AD_JJ_M_NN_NT_VA_VV",
"双 AD_CD_JJ_M_NN_NR_VV",
"篮 NN",
"餐 M_NN_VV",
"碗 JJ_M_NN_VA",
"渔 NN_NR",
"挺 AD_NN_NR_VA_VV",
"指 AD_NN_VV",
"习 AD_JJ_NN_VV",
"偏 AD_VA",
"虑 NN_VV",
"倡 VV",
"养 JJ_NN_VA_VV",
"贝 ETC_NN_NR_VV",
"众 AD_CD_JJ_NN_NR_VV",
"l JJ_NN_NR",
"鹏 NR",
"堂 AD_M_NN_NR_VV",
"击 JJ_NN_VV",
"私 AD_JJ_NN_VA_VV",
"骗 NN_VV",
"神 JJ_LC_NN_NR_VA_VV",
"钱 JJ_NN_VA_VV",
"影 MSP_NN_NR_VV",
"刚 AD_JJ_NN_NR_VV",
"落 NN_VA_VV",
"醒 JJ_NN_VA_VV",
"驶 NN_VV",
"乎 AD_NN_VV",
"推 NN_VV",
"颈 NN_VA_VV",
"缺 JJ_NN_VA_VV",
"迫 JJ_NN_VA_VV",
"困 JJ_NN_VA_VV",
"簸 NN",
"佩 NR_VV",
"采 NN_NR_VA_VV",
"块 CD_M_NN_VV",
"温 NN_NR_VV",
"疫 NN",
"赣 NR",
"候 AD_JJ_NN_NT_VV",
"─ PU",
"浙 NN_NR",
"鹰 NN_NR",
"皖 NN_NR",
"错 JJ_NN_NR_VA_VV",
"佑 NN_NR_VV",
"擎 NN",
"耗 JJ_NN_VV",
"风 AD_JJ_NN_NR_VV",
"於 AD_P_VV",
"防 JJ_NN_NR_VV",
"滚 AD_JJ_NN_VA_VV",
"粮 JJ_NN",
"晔 NR",
"剂 JJ_M_NN_VV",
"默 AD_NN_NR_VA_VV",
"编 JJ_NN_VV",
"床 NN_VV",
"欣 NN_NR",
"劝 NR_VV",
"夫 NN_NR_VV",
"顾 NN_NR_VV",
"负 CD_JJ_NN_VV",
"弃 JJ_NN_VV",
"慎 AD_JJ_NR_VA_VV",
"瑛 NR",
"必 AD_NR_VV",
"黎 NR",
"桶 M_NN_NR",
"晖 NR",
"宅 JJ_NN",
"祖 NN_NR_VV",
"觉 AD_JJ_NN_NR_VA_VV",
"辖 VV",
"狮 NN_NR",
"颇 AD_VV",
"鞋 NN",
"瓷 NN",
"雕 NN_VV",
"泉 NN_NR_VV",
"漳 NR",
"谢 JJ_NN_NR_VV",
"圣 JJ_NN_NR_VA",
"戈 NR_VV",
"n NN_NR_VA_VV",
"鸣 NN_NR_VV",
"骑 NN_VV",
"裕 AD_JJ_NN_NR_VA_VV",
"传 JJ_NN_NR_VV",
"煌 JJ_NN_NR_VA_VV",
"氢 JJ",
"瓦 M_NN_NR",
"狐 NN_NR",
"呈 VV",
"途 AD_JJ_NN_VV",
"忧 NN_VA_VV",
"灵 JJ_NN_NR_VA",
"忘 JJ_NN_VA_VV",
"誉 JJ_NN_VV",
"牵 NN_VV",
"沈 JJ_NN_NR_VA_VV",
"轴 JJ_M_NN_NR",
"租 NN_VV",
"佛 AD_NN_NR_P_VV",
"另 AD_DT",
"演 NN_VV",
"夷 NN_NR",
"芸 NR",
"晰 VA",
"丰 NR_VA",
"顶 LC_M_NN_NR_VV",
"傅 NN_NR",
"莘 NR_VV",
"挠 NN_VV",
"具 M_NN_VV",
"〈 PU",
"〉 PU",
"惩 NN_VV",
"假 JJ_NN_P_VA_VV",
"肯 NR_VA_VV",
"永 AD_JJ_NR_VV",
"琴 NN_NR",
"墨 NN_NR_VV",
"剌 NN_VV",
"激 NN_VA_VV",
"燃 NN_VV",
"跌 NN_VV",
"岚 NR",
"童 NN_NR",
"煤 NN",
"廉 NN_NR_VA_VV",
"粘 NN_NR",
"纤 NN",
"氟 JJ",
"袱 NN",
"缩 JJ_NN_VV",
"汰 NN_VV",
"锭 M_NN",
"呆 JJ_NN_VA_VV",
"坏 JJ_NN_VA_VV",
"帽 NN",
"纱 NN",
"庭 JJ_NN_NR_VV",
"揭 NN_NR_VV",
"巴 NN_NR",
"郡 NN_NR",
"隋 NR",
"唐 LC_NR",
"宋 NN_NR",
"丘 NN_NR",
"渝 NR_VA",
"黔 NR",
"襄 NR",
"校 NN_NR_VV",
"鲁 NR",
"左 AD_JJ_NN_VA",
"浪 NN_NR_VV",
"滩 NN_NR_VV",
"扬 NN_NR_VA_VV",
"穆 NR_VA",
"睹 VV",
"怀 NN_NR_VV",
"夕 NN_NT",
"荐 NN_VV",
"邻 NN_VV",
"母 AD_JJ_NN_NR",
"勤 AD_NN_NR_VA_VV",
"梅 NN_NR",
"页 M_NN",
"男 JJ_NN_NR_VA_VV",
"郸 NR",
"魁 NN_NR_VV",
"含 VV",
"隔 JJ_NN_NT_P_VV",
"豹 NN_NR",
"璞 NR_VV",
"窑 NN_VV",
"g CD_FW_JJ_NN_NR",
"曲 JJ_M_NN_NR_VA_VV",
"振 NN_NR_VV",
"胎 NN",
"冷 JJ_NN_NR_VA_VV",
"━ CD_PU",
"柯 NR",
"鸿 NR",
"溢 VV",
"热 JJ_NN_NR_VA_VV",
"踪 NN_VV",
"循 NN_NR_VV",
"泗 NR",
"嘴 NN_NR_VV",
"址 NN_VV",
"渣 NN_NR",
"符 NN_VV",
"公 JJ_NN_NR_VC_VV",
"胁 NN_VV",
"肿 NN_VA_VV",
"辄 AD",
"剩 VA_VV",
"绪 NN_NR_VV",
"彬 NR",
"菲 NN_NR_VA",
"根 M_NN_NR_VV",
"灭 JJ_NN_VV",
"蚊 JJ",
"霉 NN_VV",
"虫 JJ_NN",
"殖 NN_VV",
"杀 NN_VV",
"染 JJ_NN_VV",
"粉 JJ_NN_NR",
"第 M_NN_NR_OD",
"兹 NN_NR_VV",
"姆 NN_NR",
"刊 NN_VV",
"队 M_NN_NR_VV",
"袭 M_NN_VV",
"亡 JJ_NN_VV",
"炸 JJ_NN_VV",
"涂 NN_VV",
"避 NN_VV",
"毁 JJ_NN_VV",
"驳 JJ_NN_VV",
"朵 M_NN",
"扎 NN_VV",
"奏 NN_VV",
"摄 NN_VV",
"痛 JJ_NN_VA_VV",
"辜 JJ_NN_NR_VA",
"感 JJ_NN_VA_VV",
"枚 M",
"弹 JJ_NN_VV",
"躲 VV",
"女 JJ_NN_NR_VV",
"没 AD_JJ_NN_VA_VE_VV",
"恶 JJ_LC_NN_VA_VV",
"恕 NN_VV",
"旦 CS_NN_NR_NT_VV",
"曼 NN_NR",
"怒 NN_VA_VV",
"青 JJ_NN_NR_VA_VV",
"旅 JJ_NN_NR_VV",
"援 NN_VV",
"杨 NN_NR",
"旺 JJ_NN_NR_VA_VV",
"滨 NN_NR",
"摩 NN_NR_VV",
"杯 M_NN_NR_VV",
"祝 NN_VV",
"铸 JJ_NR_VV",
"翻 M_VV",
"赞 NN_VV",
"氛 NN",
"蔡 NR",
"弟 NN",
"爱 JJ_NN_NR_VA_VV",
"孙 NN_NR_VV",
"斗 JJ_M_NN_VV",
"昕 NR",
"祯 NR",
"朱 JJ_NR",
"呢 SP",
"舍 NN_NR_VV",
"召 NN_NR_VV",
"斥 NN_VV",
"词 AD_NN_VV",
"侵 NN_VV",
"王 NN_NR_VV",
"彪 NR",
"赚 VV",
"碑 NN_VV",
"衍 NN_NR_VV",
"惊 JJ_NN_VA_VV",
"牲 NN_VV",
"颂 NN_VV",
"朽 VA_VV",
"冤 NN",
"煎 JJ_NN",
"急 AD_JJ_NN_VA_VV",
"歌 NN_NR_VV",
"蓬 NR",
"淤 JJ_VA_VV",
"腾 NN_VA_VV",
"镐 M_NN_NR_VV",
"汗 JJ_NN_NR_VV",
"冰 JJ_NN_NR_VV",
"寒 JJ_NN_VA_VV",
"拔 NN_VA_VV",
"颜 NN_NR",
"牛 NN_NR",
"羊 NN_NR_VV",
"倒 AD_JJ_NN_VA_VV",
"讶 DEV_NN_VA_VV",
"摆 NN_VV",
"烟 AD_NN_VV",
"铺 NN_VV",
"垫 NN",
"吉 NR_VA_VV",
"毛 CD_JJ_M_NN",
"绒 NN",
"仓 AD_NN_NR",
"慨 AD_NN_VA_VV",
"彰 NN_VV",
"环 AD_JJ_M_NN_NR_VV",
"甫 AD_NN_NR",
"撞 JJ_NN_VV",
"甚 AD_DT_NN_VE_VV",
"孩 NN",
"惕 NN_VV",
"弄 NN_VV",
"辉 JJ_NR_VA_VV",
"棚 NN_NR_VV",
"劣 JJ_NN_VA",
"戚 NN",
"罐 M_NN",
"儿 AD_JJ_NN_NR_PN",
"峭 VA_VV",
"崖 NN",
"绿 JJ_NN_NR_VA",
"秀 JJ_NN_NR_VA_VV",
"坤 NR",
"怕 AD_CS_NN_VA_VV",
"屈 NN_NR_VV",
"垒 NN_VV",
"兵 NN_NR_VV",
"栏 M_NN",
"语 JJ_NN_VV",
"您 PN",
"吗 SP",
"c CD_FW_JJ_NN_NR",
"听 NN_NR_VA_VV",
"甲 CD_M_NN_NR_VV",
"霞 NN_NR",
"练 NN_VA_VV",
"旬 NN_NT",
"锦 NN_NR_VV",
"锡 JJ_NN_NR",
"焕 NR",
"戏 NN_VV",
"奴 NN_NR",
"妹 NN_NR",
"帝 NN_NR",
"泳 NN_VV",
"赛 CD_NN_NR_VV",
"簇 VV",
"羡 NN_VV",
"腔 JJ_M_NN",
"忱 AD_NN",
"烂 JJ_NN_VA_VV",
"擢 VV",
"优 JJ_NN_NR_VA_VV",
"洽 NN_NR_VA_VV",
"憾 NN_VA_VV",
"救 LC_NN_NR_VV",
"惜 AD_NN_VA_VV",
"璧 NN",
"恳 AD_NN_VA",
"邃 VA",
"隽 VA",
"雅 AD_JJ_NN_NR_VA_VV",
"辈 M_NN_VV",
"吟 NN_VV",
"芳 NN_NR",
"玛 NR",
"赠 NN_VV",
"岳 NN_NR",
"耳 NN_NR_SP_VV",
"逢 VV",
"桩 M_NN_VV",
"舟 NN_VV",
"坐 NN_VV",
"荫 NN",
"窄 VA_VV",
"悬 VV",
"腰 JJ_NN_NR_VV",
"! JJ_NN_PU",
"操 NN_VV",
"趁 P_VV",
"脸 AD_M_NN_VA_VV",
"赏 NN_VV",
"伙 AD_NN_VV",
"壁 NN_NR_VV",
"斑 JJ_M_NN_VV",
"紫 JJ_NN_VA",
"砾 NN",
"灰 JJ_NN",
"催 VV",
"爬 VV",
"答 NN_VV",
"曰 VV",
"巅 NN",
"雾 NN_NR",
"嵘 NN",
"翩 JJ",
"呀 IJ_SP",
"吧 NN_SP",
"睛 NN_VV",
"窗 NN_NR",
"巧 AD_NN_NR_VA_VV",
"笑 NN_NR_VA_VV",
"酬 JJ_NN_VV",
"叹 NN_VV",
"孔 JJ_NN_NR_VV",
"麓 NN",
"敞 VA",
"匆 AD_VA_VV",
"沉 NN_VA_VV",
"静 AD_JJ_NN_NR_VA_VV",
"镜 NN_VV",
"沟 NN_NR",
"秘 JJ_NN_NR_VA_VV",
"艘 M",
"艇 NN",
"峦 NN_NR",
"枝 NN_NR_VV",
"茂 NN_NR",
"恰 AD",
"翠 NN_NR",
"链 NN",
"鸟 JJ_NN",
"啭 NN",
"… PU",
"豆 NN_NR",
"眠 NN_VV",
"澈 VA",
"烫 NN_VA_VV",
"漫 JJ_NN_VA_VV",
"磺 NN",
"熟 JJ_NN_VA_VV",
"蛋 NN",
"娘 NN_NR",
"尖 AD_JJ_NN_NR",
"怪 AD_NN_NR_VA_VV",
"迩 VA_VV",
"瀑 NR",
"梭 NN_NR_VV",
"圆 JJ_NN_VA_VV",
"脆 AD_JJ_VA",
"你 JJ_NN_PN_VV",
"吊 NN_VA_VV",
"钦 NR",
"皂 NN",
"休 JJ_NN_NR_VV",
"浩 NR",
"舰 JJ_NN_NR",
"绝 AD_CD_NN_VA_VV",
"臣 NN_NR_VV",
"掐 VV",
"钟 M_NN_NR_VV",
"歉 NN_VV",
"宙 NN_NR",
"阀 NN",
"2 CD",
"遭 JJ_LB_M_NN_SB_VV",
"池 M_NN_NR",
"迟 AD_NN_VA_VV",
"伪 JJ",
"畴 NN",
"蓄 NN_VV",
"培 NN_NR_VV",
"株 M_NN",
"薯 NN_NR",
"葱 NN",
"姜 JJ_NN_NR",
"蒜 NN",
"截 M_VV",
"塔 NN_NR",
"旱 JJ_NN_VA_VV",
"堪 VV",
"虞 NN_VV",
"冬 NN_NR_NT_VV",
"豪 NN_NR_VA_VV",
"幼 NN_NR_VA_VV",
"疾 JJ_NN_VV",
"跳 JJ_M_NN_VV",
"烧 AS_JJ_NN_VV",
"痹 NN",
"读 NN_NR_VV",
"课 JJ_NN_VV",
"考 NN_NR_VV",
"椅 NN",
"杖 NN_VV",
"灾 JJ_NN_VV",
"专 AD_NN_VV",
"捐 NN_VV",
"囊 AD_NN_VV",
"释 JJ_NN_VV",
"桑 NN_NR",
"宛 NR",
"罕 JJ_NR",
"塘 NN_NR",
"鲈 NN",
"淡 JJ_NN_NR_VA_VV",
"鲳 NN",
"鹃 NN",
"娇 JJ_VA_VV",
"稀 AD_JJ_NN_VA_VV",
"禽 NN",
"畜 NN",
"萃 NN_VV",
"哲 NN_NR",
"猷 NR",
"慈 NN_NR_VA",
"夜 AD_NN_NT_VV",
"媒 JJ_NN",
"骼 NN",
"骨 JJ_NN_NR_VV",
"碎 NN_VA_VV",
"艳 JJ_NN_NR_VA_VV",
"蕾 NN",
"串 JJ_M_NN",
"赋 JJ_NN_VV",
"棠 NR",
"罪 NN_VA_VV",
"牒 NN",
"苑 NN_NR",
"触 JJ_NN_VV",
"悖 VA",
"割 NN_VV",
"鸭 NN_NR",
"仕 NN_NR",
"函 NN_VV",
"贯 AD_JJ_NN_NR_VA_VV",
"伤 JJ_NN_VA_VV",
"诸 CD_DT_NN_P_VV",
"盼 NN_VV",
"谅 VV",
"嫌 AD_JJ_NN_VV",
"捕 NN_VV",
"叉 JJ_NN_VV",
"辽 NR",
"侏 NR",
"膀 NN",
"椎 NR",
"趣 JJ_NN_VA_VV",
"垩 NR",
"懈 AD_JJ_VV",
"肺 NN",
"枢 NN",
"云 JJ_NN_NR_VA_VV",
"翰 NR",
"宴 NN_VV",
"钧 NN_NR",
"折 JJ_NN_NR_VA_VV",
"陷 NN_VV",
"鹅 NN_NR",
"蓝 JJ_NN_NR_VA",
"柬 NR",
"寨 NN_NR",
"奉 NN_NR_VV",
"潘 NR",
"穷 JJ_NN_NR_VA_VV",
"蚀 NN_VV",
"漠 NN_VA",
"圭 NN_NR",
"衷 NN_VA_VV",
"彗 NN",
"慧 NN_NR_VA",
"秒 M_NN",
"冲 NN_NR_VV",
"遥 AD_NN_VA_VV",
"谜 NN",
"沔 NR",
"瞬 AD",
"堡 NN_NR",
"峙 NN_VV",
"帜 NN_VV",
"泪 NN_VV",
"印 JJ_NN_NR_VV",
"璇 NR",
"楠 NN_NR",
"洛 NN_NR",
"丁 NN_NR",
"· NN_NR_PU",
"h CD_NN_NR_VA",
"氰 NN",
"胺 NN",
"充 AD_NN_NR_VV",
"叠 AD_JJ_M_NN_VV",
"滇 NR",
"挝 NR",
"悼 NN_VV",
"逝 NN_VV",
"乌 NN_NR",
"俱 AD_NR_VV",
"雀 NN_VV",
"聘 NN_VV",
"揽 VV",
"粹 AD_JJ_NN_VA_VV",
"攻 NN_VV",
"宵 AD_NN_NR",
"耸 VV",
"胸 NN_VV",
"肚 NN_NR_VV",
"侧 LC_M_NN_VV",
"爪 NN_NR",
"拣 VV",
"踞 VV",
"纹 NN",
"莱 NR",
"戍 NR",
"旭 NN_NR",
"幸 AD_NN_NR_VA_VV",
"蔑 NN",
"背 NN_VV",
"瑶 NR",
"犁 NN_NR",
"俊 NN_NR",
"枫 NR",
"沽 NR",
"婵 NR",
"拢 VV",
"涵 JJ_NN_NR",
"微 AD_JJ_NN_NR_VA_VV",
"钾 NN",
"菌 NN_VV",
"昂 NR_VA_VV",
"阴 NN_NR_VA_VV",
"铜 JJ_NN_NR",
"溯 NN_VV",
"杜 NR",
"羽 NR",
"铬 NN",
"栋 M_NR",
"拆 NN_VV",
"危 AD_JJ_VV",
"卷 M_NN_VV",
"楔 NN",
"轧 NN",
"郁 JJ_NN_NR_VA",
"桌 M_NN_VV",
"o CD_NN_NR",
"u NN_NR",
"辑 M_NN_VV",
"镀 JJ_NN_VV",
"退 NN_VV",
"屿 NN_NR",
"捞 NN_VV",
"芜 NR_VA",
"蟹 NN",
"鳗 NN",
"螺 NN",
"尾 AD_JJ_LC_M_NN_NR_VV",
"蜇 NN",
"锐 JJ_VA",
"暨 CC_NR",
"抱 NN_VV",
"冯 NR",
"猫 JJ_NN_NR",
"柴 NN_NR_VV",
"缸 M_NN",
"淹 NN_NR_VA_VV",
"腿 NN",
"肠 NN",
"嵬 NR",
"衬 NN_VV",
"砌 NN_VV",
"拱 NN_VV",
"脚 M_NN_VV",
"咸 NN_NR_VV",
"儒 NN_NR_VV",
"思 AD_JJ_NN_NR_VV",
"译 NN_VV",
"适 AD_NN_NR_VA_VV",
"刘 NR",
"艾 NR_VV",
"荷 NN_NR",
"藕 NN",
"渍 NN",
"汁 NN_VA",
"昨 NT",
"蒋 NR",
"藉 MSP_NN_P_VV",
"黄 JJ_NN_NR_VA",
"汕 NN",
"懋 NR",
"磁 NN",
"爆 JJ_NN_VA_VV",
"乘 JJ_VA_VV",
"驾 JJ_M_VV",
"俗 JJ_NN_VA_VV",
"厢 NN",
"寺 NN_NR_VV",
"闲 JJ_NN_VA_VV",
"脊 NN",
"嘎 NR",
"残 JJ_NN_VA_VV",
"液 NN",
"夏 NN_NR_NT_VV",
"鲍 JJ_NR",
"颖 NR_VA",
"橘 NN",
"奋 NN_VA_VV",
"後 AD_JJ_LC_NN_NT_VV",
"踏 NR_VV",
"冉 AD",
"礼 NN_NR_VV",
"警 NN_NR",
"颠 NR_VV",
"誓 NN_VV",
"监 JJ_NN_VV",
"谨 AD_NN_P_VA",
"洁 NN_NR_VA_VV",
"惧 NN_VA_VV",
"欺 NN_VA",
"恪 VV",
"劳 NN_NR_VA_VV",
"辱 NN",
"锚 VV",
"启 NN_NR_VV",
"宰 NN_VV",
"愉 NN",
"孀 NN",
"琳 NR_PN",
"绎 VV",
"娉 NR",
"谘 NN_VV",
"锺 NR_VV",
"赫 JJ_M_NN_NR_VA",
"荆 NN",
"绣 JJ_NN_VA_VV",
"晋 NN_NR_VV",
"箔 NN",
"尊 M_NN_VV",
"瓶 M_NN_VV",
"栽 NN_VV",
"嵌 NN_VV",
"砚 NN",
"蔚 VV",
"牡 NN",
"巍 JJ_VV",
"琅 NN",
"豫 NN_NR_VA_VV",
"鹤 NN_NR",
"涯 NN",
"蜀 NN_NR_VE",
"镶 JJ",
"洮 NN",
"涌 NN_NR_VA_VV",
"唱 NN_VA_VV",
"镭 JJ",
"吴 NN_NR",
"谱 NN_VV",
"董 JJ_NN_NR",
"悦 NN_NR_VV",
"遗 VV",
"侯 NN_NR",
"乙 NN_NR",
"墓 NN",
"尺 JJ_M_NN",
"兽 NN",
"槌 NN_VV",
"棒 M_NN_VA_VV",
"享 NN_VV",
"颁 NN_VV",
"诣 NN",
"傲 JJ_NN_VA_VV",
"毅 NN_NR",
"麟 NR",
"燕 NN_NR",
"镛 NR",
"钰 NR",
"蹈 NN_VV",
"幻 JJ_NN_VA_VV",
"荃 NR",
"徒 NN_VV",
"祷 NN_VV",
"鸽 NN_NR",
"迦 NN_NR",
"勋 JJ_NN_NR_VV",
"* PU",
"梓 NR",
"丞 NR",
"毋 AD",
"赦 NN_VV",
"卓 NR_VV",
"麽 AD_DT_PN_SP",
"寻 NN_NR_VV",
"柜 JJ_NN_NR_VV",
"污 NN_VV",
"琐 JJ_NN_VA",
"埔 NN_NR",
"仔 NN_NR",
"聿 NR",
"嘉 NN_NR_VV",
"某 DT_JJ_NN_NR",
"邮 NN",
"摺 NN",
"悫 NR",
"轩 NR",
"诗 NN_NR_VV",
"箕 NR",
"咀 NR",
"馀 JJ_NN_VA",
"罄 NN",
"勿 AD",
"描 NN_VV",
"裹 NN_VV",
"/ PU",
"泻 NN_VV",
"寮 NN_NR",
"塌 NN_VV",
"谁 PN",
"葺 NN",
"喻 NN_VV",
"厘 CD_VV",
"偕 NN_NR",
"匡 NR",
"概 AD_NN_VV",
"宪 NN_NR_VA_VV",
"狱 NN_VV",
"蜚 VV",
"阻 NN_VV",
"巡 NN_NT_VV",
"欲 NN_VV",
"佣 JJ_NN",
"雇 NN_VV",
"薪 NN_VV",
"婚 AD_JJ_NN_VA_VV",
"阅 NN_VV",
"父 NN_VV",
"丙 JJ_NN_NR",
"罔 NN_VV",
"蛇 NN",
"庸 NN_VA",
"聪 NN_NR",
"迳 AD_VV",
"卒 AD_NN_VA_VV",
"怡 NR",
"夥 NN",
"龛 NN",
"唆 VV",
"乃 AD_VC",
"禁 AD_NN_VV",
"鼠 NN",
"夸 VA",
"阱 NN_VV",
"怎 AD",
"衣 JJ_NN_NR_VV",
"荟 NN",
"什 AD_PN",
"梦 NN_NR_VV",
"醋 NN_VV",
"窳 NN",
"削 NN_VV",
"膏 NN",
"霜 NN_NR_VV",
"槛 NN",
"囤 VV",
"欢 NN_NR_VV",
"熬 VV",
"祸 NN_VV",
"邱 NR",
"唯 AD_VV",
"刺 DEC_NN_VV",
"扫 NN_VV",
"劫 NN_VV",
"赢 NN_VV",
"姐 NN",
"圜 NN",
"贬 NN_VV",
"呼 NN_VV",
"朋 VV",
"瞎 VV",
"拼 VV",
"捡 VV",
"勃 AD_VA_VV",
"q NR_VA",
"饰 JJ_NN_VV",
"贩 NN_VV",
"忆 NN_VV",
"惑 NN_VV",
"挫 NN_VV",
"皮 JJ_NN_NR_VA_VV",
"抢 DEC_NN_VV",
"拖 NN_VV",
"鸥 NN_NR",
"忿 AD_VA",
"玩 NN_VA_VV",
"挤 NN_VA_VV",
"薄 AD_JJ_NN_VA_VV",
"喘 NN_VV",
"敷 VV",
"乾 AD_NR",
"飙 NN_VV",
"垮 VV",
"敢 AD_VA_VV",
"澜 NN_VV",
"肆 AD",
"埋 NN_VV",
"丸 NN_NR_VV",
"耘 VV",
"慰 NN_NR_VA_VV",
"宏 NR_VA",
"寸 CD_M_NN",
"挟 VV",
"患 NN_VV",
"蚁 NN",
"竹 NN_NR_VV",
"迷 JJ_NN_VA_VV",
"咎 VV",
"殃 NN",
"觑 VV",
"摊 NN_VV",
"沌 JJ_NN_VA",
"崩 NN_VV",
"跑 NN_VV",
"跤 NN",
"帮 NN_NR_VV",
"涎 VV",
"钜 JJ_NN_NR_VA_VV",
"浇 VV",
"熄 VV",
"仲 NN",
"f CD_FW_NN_NR",
"耻 NN",
"遂 AD_NR_VV",
"阵 AD_M_NN_NT_VV",
"矣 SP",
"冒 NN_VV",
"闹 AD_JJ_NN_VA_VV",
"替 NN_P_VV",
"狂 AD_VA_VV",
"倚 VV",
"啊 DER_IJ_SP",
"蹉 NN",
"博 JJ_NN_NR_VA",
"磷 NN_NR",
"俭 NN_NR_VA_VV",
"频 AD_JJ_NN_VA_VV",
"滢 NR",
"锑 NN",
"泷 NR",
"叙 NR_VV",
"珉 NR",
"匙 NN",
"0 CD",
"汾 NR",
"埸 NN",
"浚 VV",
"冠 NN_NR_VV",
"凼 NR",
"9 CD_NT",
"葆 NR",
"炎 NN_NR_VA_VV",
"陕 NR",
"甘 NN_NR_VV",
"焦 NN_VV",
"碳 NN",
"镁 NN",
"钠 NN",
"锅 M_NN_NR_VV",
"迈 JJ_VA_VV",
"俑 NN",
"驰 NR_VV",
"蓟 NR",
"肖 NN_NR",
"厝 NN_NR",
"翅 VV",
"瘦 NN_VA_VV",
"耀 NN_NR_VV",
"烦 NN_VA_VV",
"< PU",
"> PU",
"钕 NN",
"硼 NN",
"鹿 NN_NR",
"茜 NR",
"兆 CD_M_NN",
"w M_NN_VV",
"犬 NN_VV",
"枪 NN",
"焰 NN",
"熊 NN_NR_VA",
"圈 M_NN_VV",
"摇 NN_VV",
"摸 NN_VV",
"迭 AD_NN_VV",
"赳 VA",
"剑 NN_NR",
"墙 JJ_NN_VV",
"崽 NN",
"偷 AD_VV",
"隐 AD_JJ_NN_NR_VA_VV",
"喝 AS_NN_VV",
"寂 JJ_NN_VA_VV",
"纲 NN_NR",
"僻 AD_JJ_NN_VA_VV",
"壮 BA_JJ_NR_VA_VV",
"搬 NN_VV",
"饭 NN_NR_VV",
"窖 NR",
"帼 VV",
"眉 DEC_NN_NR_VA_VV",
"锄 M_NN",
"垦 NN_NR_VV",
"衫 NN",
"缝 NN_VV",
"雁 NN_NR",
"灶 NN_NR_VV",
"滴 AD_M_NN_VV",
"麻 NN_NR",
"枭 NN",
"獗 VA",
"卿 NN_NR",
"徊 VV",
"堤 NN_NR",
"坑 NN_NR_VV",
"屡 AD_VV",
"芦 NN",
"茄 NN",
"朴 JJ_NN_NR_VA",
"躏 NN",
"拌 NN_VV",
"暄 NR_VV",
"刑 NN_VV",
"涝 NN",
"澧 NR",
"滥 NN_VV",
"垭 NR",
"垸 NN",
"觅 VV",
"哪 AD_DT_PN_SP_VV",
"唤 NN_VV",
"赶 NN_VV",
"娠 VV",
"妇 NN",
"爸 NN",
"婴 NN_NR",
"吸 NN_VV",
"泵 NN",
"奶 NN_VV",
"卵 NN_VV",
"捧 VV",
"仿 NN_VA_VV",
"挨 VV",
"摘 JJ_NN_VV",
"姑 AD_NN",
"熙 NR",
"诫 NN_VV",
"挖 JJ_NN_VV",
"匀 NN_VA_VV",
"稽 NN_VV",
"娃 DEG_NN_NR",
"沃 NR_VA_VV",
"逼 LC_VV",
"旋 LC_VV",
"卢 NR",
"茫 VA_VV",
"炮 M_NN_VV",
"蜂 AD_M_NN_NR_VV",
"蜜 JJ_NN_VA",
"瞄 VV",
"喂 VV",
"汊 NN",
"募 AS_NN_VV",
"觎 NN_VV",
"阿 NN_NR_VA",
"御 JJ_NN_VV",
"玲 NR",
"戴 NR_VV",
"执 JJ_NN_VA_VV",
"矛 NN",
"夺 NN_VV",
"野 ETC_JJ_NN_NR_VA_VV",
"贡 NN_NR",
"妆 NN_VV",
"矮 JJ_VV",
"穗 NR_VV",
"屯 NR",
"腹 JJ_NN_VV",
"倾 VV",
"舞 NN_VV",
"祭 NN_VV",
"萍 NN_NR",
"榕 NN_NR",
"哭 NN_VV",
"嫁 NN_VV",
"魂 NN_VV",
"膝 NN_VV",
"毙 VV",
"霖 NN_NR_VV",
"侮 NN",
"裸 VA",
"劾 NN_VV",
"虚 NN_VA_VV",
"帑 NN",
"覆 AD_NN_VV",
"诈 NN_VV",
"掘 NN_VV",
"腐 NN",
"惮 VV",
"糊 AD_NN_VA_VV",
"钩 NN_VV",
"穴 NN",
"坯 NN_VV",
"砖 NN",
"皿 NN",
"偶 AD_NN_NR_VV",
"埠 NN_NR",
"禹 NR",
"灿 NR",
"棋 LC_NN_NR_VV",
"逐 AD_NN_VV",
"昊 NR",
"睦 NR_VA",
"逸 JJ_NN_NR_VA",
"狠 AD_NN_VA_VV",
"弈 VV",
"辙 NN_NR_VV",
"铉 NR",
"罢 NN_VV",
"搏 NN_VV",
"虐 JJ_VV",
"渊 NR",
"滋 NN_NR_VA",
"灸 NN",
"婷 NR",
"` PU",
"挣 VV",
"笋 NN",
"墅 JJ",
"怨 NN_VV",
"镑 M",
"鼎 NN_NR_VV",
"丹 NN_NR",
"尕 NR",
"揉 NN_VV",
"杆 M_NN_VA_VV",
"纂 NN_VV",
"拍 AS_JJ_NN_VV",
"磊 NR",
"诞 NN",
"乳 NN",
"脏 NN_VA_VV",
"斩 VV",
"役 AD_JJ_NN_VV",
"苯 NN",
"腈 NN",
"烷 NN",
"墟 NN",
"烬 NN",
"咏 NR",
"眷 NN_VV",
"牍 NN_VA",
"舱 NN",
"匠 NN",
"盲 NN_VV",
"芬 NN_NR",
"瑜 NN_NR",
"庚 NR",
"煦 NR_VA_VV",
"刀 JJ_M_NN_VV",
"绑 NN_VV",
"抗 JJ_NN_VV",
"喊 NN_VV",
"瞒 VV",
"庇 NN",
"懂 VA_VV",
"违 NN_VV",
"巷 M_NN_NR",
"悟 NN_VV",
"悄 AD_VA",
"凉 NN_NR_VA_VV",
"榜 NN_VV",
"崎 NR",
"霸 BA_NN_NR_VV",
"弓 NN_NR",
"扑 NN_VV",
"慕 NR",
"孝 NN_NR_VA_VV",
"萱 NR",
"茉 NR",
"啻 AD",
"刷 NN",
"湛 VA",
"4 CD_NT",
"樱 NN_NR",
"韬 NR",
"贿 VV",
"郄 NR",
"摔 NN_VV",
"焱 NR",
"膺 VV",
"翁 NN_NR",
"俏 VA_VV",
"暇 NN_VV",
"辅 NN_NR_VV",
"驭 VV",
"沐 VV",
"栉 VV",
"扛 VV",
"暌 VV",
"柚 NN",
"详 VA_VV",
"邸 NN",
"扶 NR_VV",
"妻 NN",
"剿 NN_VV",
"耶 NN_NR",
"硫 NN",
"陀 NN_NR",
"透 AD_JJ_NN_NR_VA_VV",
"拳 NN_VV",
"揍 VV",
"窝 NN_VV",
"拾 VV",
"缠 NN_VV",
"伧 VA",
"捏 VV",
"寞 JJ_NN_VA_VV",
"腕 NN_VV",
"厉 AD_JJ_VA_VV",
"璐 NR",
"阪 NR",
"辰 NN_NR",
"丈 NR_VV",
"5 CD",
"冕 NN_VV",
"蒂 NR",
"兖 NR",
"葡 JJ_NN_NR",
"附 AS_JJ_VV",
"蚓 NN",
"矶 NR",
"简 NN_NR_VA_VV",
"惫 VA",
"疸 NN",
"毫 AD_JJ_M_NN_VV",
"怠 NN_VV",
"砍 VV",
"锂 NN",
"弯 NN_VV",
"胚 NN",
"聋 NN",
"晴 NN_VA",
"阜 NR",
"庙 NN_NR",
"浒 NR",
"逻 NN_VV",
"喉 NN_VV",
"匹 M_NN",
"猎 NN_VV",
"孕 NN_VV",
"吵 NN_VV",
"掌 NN_VV",
"锋 NN_NR_VV",
"眸 NN_VV",
"废 JJ_NN_VA_VV",
"囿 VV",
"莉 NR",
"岐 NR",
"李 NN_NR_VV",
"燮 NR",
"忡 VV",
"啸 NR",
"刮 NN_VV",
"彼 PN_VV",
"笛 NN",
"暗 AD_JJ_NN_VA",
"曙 NR",
"句 M_NN_VV",
"芗 NN",
"殿 NN",
"霏 JJ",
"筠 NR",
"纾 VV",
"彭 NR",
"携 JJ_VV",
"躺 VV",
"敲 NN_VV",
"狸 NN",
"奎 NR",
"逃 VV",
"臂 NN_VV",
"鞭 NN",
"芒 NN",
"浓 JJ_NN_NR_VA",
"溶 NN_VV",
"瘠 VA",
"铮 NR",
"菁 NN_NR",
"裤 NN",
"漾 NN_VV",
"浊 NN_NR_VA",
"赂 NN",
"惨 AD_NN_VA_VV",
"蝶 JJ_NN",
"娜 NR",
"饷 NN",
"盒 NN",
"潭 NR",
"昭 NR",
"祠 NN_NR",
"俐 NR_VA",
"勾 JJ_VV",
"濒 VV",
"臼 NN_NR",
"瘤 NN",
"氯 NN",
"桦 NR",
"邑 NN_NR_VV",
"铃 NN_NR",
"啤 NR",
"驴 NN",
"圾 NN",
"肩 NN_VV",
"巾 NN",
"昧 JJ_NN_VA_VV",
"斧 JJ_NN_VV",
"溃 NN",
"瓴 VV",
"竭 NN_VA_VV",
"丑 JJ_NN_VV",
"扮 NN_VV",
"缔 NR_VV",
"猩 NN",
"恐 AD_VA_VV",
"娣 NR",
"瞻 NN_VA_VV",
"闰 NN",
"绘 NN_VV",
"账 NN",
"弊 NN_VV",
"啡 NN",
"逛 VV",
"搭 AD_VV",
"忽 NN_VA_VV",
"铧 NR",
"凰 NN_NR",
"甄 NN",
"驱 JJ_VV",
"笈 NN_VV",
"稍 AD",
"倪 NN",
"碰 VV",
"渥 JJ_NR_VA_VV",
"揖 NN",
"稣 NN_NR",
"篱 NN",
"挞 NN",
"聊 VA_VV",
"咖 NN",
"哩 M_NN",
"煲 NN",
"妾 NN",
"凤 NN_NR",
"鬼 NN_NR",
"禧 NN_NR_NT",
"钓 NN_VV",
"妨 AD",
"罩 NN_VV",
"肤 NN_VV",
"爽 VA",
"湿 JJ_NN_VA_VV",
"屣 VV",
"掺 VV",
"臭 JJ_NN_VA_VV",
"蔽 NN_VV",
"扯 NN_VV",
"梆 NN_VA",
"洗 NN_VV",
"痒 NN_VA_VV",
"袜 NN",
"柔 JJ_NN_NR_VA_VV",
"皱 VV",
"褪 VV",
"魔 NN_VV",
"禅 NN_VV",
"跚 VV",
"躅 VV",
"酯 JJ_NN",
"疋 NN",
"浸 VV",
"淫 NN_VV",
"亟 AD_VV",
"膨 VA",
"寡 NN_VV",
"泄 NN_VV",
"岱 NR",
"拚 AD_NN_VV",
"渗 VV",
"瞰 NN_VV",
"奈 AD_NN_VA",
"篷 NN",
"疵 NN",
"糟 VA",
"黏 VA_VV",
"妙 AD_JJ_NN_VA_VV",
"追 NN_VV",
"磨 NN_VV",
"蛛 NN",
"韧 NN_VA_VV",
"窘 VA_VV",
"睁 AD_VV",
"羹 NN_VV",
"畦 M",
"鬈 NN",
"碱 NN",
"尘 JJ_NN_VV",
"潢 NN_NR_VV",
"扁 NN_NR_VA_VV",
"混 VV",
"惹 VV",
"孳 NN",
"婿 NN",
"婆 NN_VA",
"惶 AD_NN",
"稻 NN_VV",
"烤 NN_VV",
"蜢 NN",
"猴 NN",
"啼 NN",
"溪 NN_NR",
"碾 NN_VV",
"皇 AD_JJ_NN_NR_VA_VV",
"锣 NN_VV",
"憨 NR",
"叭 NN",
"仇 NN_VV",
"莎 NR_VV",
"哟 VV",
"腻 JJ_VA_VV",
"蝤 NR",
"酷 JJ_NN_NR_VA_VV",
"讽 NN_VV",
"曝 VV",
"哀 NN_NR_VA",
"怜 VA_VV",
"鸶 NN",
"噙 VV",
"烁 JJ",
"恨 NN_VV",
"啦 SP_VV",
"赐 NN_NR_VV",
"吼 NN_NR_VV",
"棼 NR",
"契 NN_NR",
"糙 VA",
"悲 JJ_NN_VA_VV",
"珂 NR",
"骂 JJ_NN_NR_VV",
"侠 NN",
"萤 NN",
"婉 VA_VV",
"淑 NR_VV",
"祟 NN",
"哗 VV",
"叱 VV",
"吒 VV",
"鄙 VA",
"陋 NN",
"涕 NN_VV",
"辣 JJ_NN_VA_VV",
"琰 NR",
"缀 NN_VV",
"插 VV",
"嫦 NR",
"茹 NR_VV",
"剔 NN_VV",
"骚 NN_VV",
"撼 JJ_NN_VV",
"嬷 NN",
"嚼 VV",
"卜 NN_NR",
"妈 NN",
"炒 JJ_NN_VV",
"粱 NN",
"腌 VV",
"蔗 NN",
"熏 NN_VV",
"澄 NR_VA",
"晒 NN_VV",
"肴 NN",
"搓 VV",
"沾 VV",
"泼 VA",
"糕 NN_VA",
"袤 VV",
"徙 VV",
"厨 NN",
"饼 NN",
"蒸 JJ_NN_VV",
"碌 VA",
"姨 NN",
"耍 VV",
"谟 NR",
"盏 M",
"粟 NN",
"犹 AD_VV",
"藩 NR",
"鬻 VV",
"蹄 AD",
"饪 NN",
"汤 NN_VV",
"孤 JJ_NN_NR_VA_VV",
"伶 VA",
"髦 JJ_NN_VA",
"葛 NN_NR_VV",
"擅 VV",
"娱 VV",
"阉 NN",
"柳 NN_VV",
"馨 JJ_NN_NR_VA",
"巢 NN",
"抖 VV",
"唇 NN",
"姊 NN_NR",
"疚 VV",
"洒 AD_VA_VV",
"倦 NN_VA",
"拘 VV",
"愁 NN_VA_VV",
"凋 NN_NT_VV",
"凄 NN_VA",
"暮 NN",
"缉 VV",
"氓 NN",
"锾 NN",
"蛀 VV",
"泡 NN_VV",
"逊 NN_VA_VV",
"蕉 NN",
"k JJ_NN_NR_NT_VV",
"妃 NN_NR",
"伫 VV",
"黍 NN",
"嘛 AD_NN_SP",
"履 NN_NR_VV",
"铎 NR",
"榔 NN",
"钉 NN_VV",
"拥 NN_VV",
"饯 NN",
"沆 NR",
"陪 VV",
"梨 NN_NR",
"鹄 VV",
"敌 NN_VV",
"俩 NN_PN",
"慌 NN_VV",
"绷 JJ",
"诡 NN_VA_VV",
"蹙 VV",
"咳 VV",
"痰 NN",
"宿 NN_VV",
"稚 JJ_NN_VV",
"恼 NN_VA_VV",
"靖 NN_NR",
"挹 NN_VV",
"媚 NN_VA_VV",
"棵 CD_M",
"俨 AD",
"挑 VA_VV",
"湄 NN",
"吓 NN_VV",
"灏 NR_VV",
"仰 NN_NR_VV",
"辨 NN_VV",
"崇 NN_NR_VV",
"邓 VV",
"赀 VV",
"邵 NN",
"阂 NN",
"薮 NN",
"悯 NN",
"蕃 JJ_NN",
"佐 NR_VV",
"冢 NR",
"癸 NR",
"淀 NN_VV",
"谤 NN_VV",
"嶙 NR",
"坟 NN",
"谲 VV",
"澎 NR",
"谍 NN",
"缪 VV",
"恺 NR",
"弋 JJ_NN",
"拦 NN_VV",
"皓 NR",
"漪 NN",
"荒 JJ_NN_VA_VV",
"硝 NN",
"痪 VA_VV",
"亢 JJ_VA",
"抛 VV",
"怖 NN_VA",
"酌 NN_VV",
"敖 NR",
"咒 NN",
"袍 NN",
"痕 NN_VV",
"肓 VV",
"凶 NN_VV",
"僚 NN",
"藻 NN",
"琢 VV",
"朔 NR",
"晦 JJ_VA",
"睫 VV",
"隙 NN",
"沫 JJ_NN_VV",
"尬 NN_VA",
"魇 NN",
"揆 NN",
"卯 VV",
"淦 NR",
"讦 VV",
"疤 NN",
"宣 NN_NR_VV",
"涅 NR",
"烛 NN",
"悔 NN_VA_VV",
"屉 NN",
"挪 NN_VV",
"跷 NN_VV",
"睡 JJ_VV",
"瞧 VV",
"竿 NN_NR_VV",
"隘 NR_VA",
"趟 M",
"蹲 NN_VV",
"枉 VA",
"峨 NR_VV",
"橥 VV",
"噜 AD",
"蹭 VV",
"亭 NN_NR",
"恋 JJ_NN_VV",
"痍 VV",
"趾 NN",
"皙 VA",
"齿 NN_VV",
"噪 VV",
"碧 NR_VV",
"陶 NN_NR_VE_VV",
"侈 NN_VA",
"廓 NN",
"汹 VV",
"抽 VV",
"= VV",
"疼 NN_VV",
"犷 JJ",
"梳 NN_VV",
"甯 NR",
"帅 NN_NR_VA_VV",
"姿 NN_NR",
"臀 NN",
"眈 VV",
"嫩 JJ_VA",
"厌 VA_VV",
"裙 NN",
"侬 NN_NR",
"枣 JJ",
"敛 NN_VV",
"懒 JJ_NN_VA",
"炫 JJ_NN_VA_VV",
"逆 NN_VV",
"钻 VV",
"妒 VV",
"庶 NN",
"伺 VV",
"梏 NN_VV",
"铿 NR",
"瞿 VA",
"铄 VA_VV",
"藐 VV",
"捻 NN_VV",
"漂 VA_VV",
"牢 AD_NN_VV",
"畏 AD_VA_VV",
"嚣 NN_VV",
"凑 VA_VV",
"褒 NR",
"旷 VA",
"兀 VA_VE_VV",
"娌 NN",
"哦 IJ_SP",
"眯 VA_VV",
"凌 NN_NR",
"赘 NN_VV",
"晃 NN_VV",
"咬 NN_VV",
"钥 NN",
"遵 VV",
"掩 VV",
"庞 NN_VA",
"汞 NN",
"霾 NN",
"漏 NN_VV",
"浅 JJ_NN_VA_VV",
"帛 NN_NR",
"琉 NN_NR",
"乍 VV",
"缇 NR",
"囱 NN",
"瑚 NN",
"谙 VV",
"礁 NN",
"鲨 NN",
"骸 NN",
"昏 NN_VA",
"亘 VV",
"曳 NN",
"伞 NN",
"飘 DEV_NN_VV",
"嗅 NN_VV",
"靡 VV",
"鲔 NN",
"捉 NN_VV",
"鲣 NN",
"嚷 NN_VV",
"抚 NN_VV",
"讥 VV",
"柄 NN",
"栗 NN_NR",
"仗 NN_VV",
"焚 VV",
"矽 NN",
"玺 NN_NR",
"谣 NN",
"恭 AD_NR",
"翎 NR",
"勉 NN_VV",
"弭 VV",
"卑 NR_VA",
"仆 NN_VV",
"祉 NN",
"沦 VV",
"蹴 VV",
"璀 VA",
"抹 VV",
"坷 VA",
"奠 VV",
"弥 AD_NN_NR_VV",
"蕞 NN",
"褓 NN",
"汀 NR",
"啕 NN_VV",
"咽 NN_VV",
"叔 NN_PN",
"疲 NN_VV",
"攒 VV",
"砸 VV",
"筋 NN",
"甥 NN",
"舅 NN",
"怼 VV",
"呛 VV",
"擦 NN_VV",
"恿 NN_VV",
"贪 NN_VV",
"窍 NN_VV",
"涡 NN",
"踵 AD",
"殷 AD_NN",
"尿 NN",
"淆 NN_VV",
"肪 NN",
"胖 NN",
"筛 NN_VV",
"侦 NN_VV",
"袖 NN",
"濂 NR",
"榻 VV",
"拒 NN_VV",
"葵 NN",
"擘 NN_VV",
"犊 NN",
"锯 NN_VV",
"撒 NN_NR_VV",
"诱 NN_VV",
"宕 VV",
"躁 NN_VA_VV",
"帖 M_NN",
"狭 VA",
"莹 NR_VA",
"麒 NR",
"汪 NR",
"梯 NN",
"寰 NR_VV",
"$ NN",
"肘 VV",
"隅 NN",
"栅 NR",
"镒 NR",
"搁 VV",
"痞 NN",
"泱 JJ",
"佬 NN",
"囝 NN",
"尤 AD_NN",
"醉 AD_NN_VA_VV",
"乖 AD_NN_VA",
"乞 NN_VV",
"窜 NN_VV",
"吻 NN_VV",
"胃 NN_VV",
"剀 VA",
"淼 NR",
"弦 NN_NR",
"弘 NN_NR_VV",
"瓣 NN",
"咪 NN_NR",
"邰 NR",
"庾 NR",
"& CC",
"佰 NR",
"谚 NN",
"纭 VV",
"碟 JJ_NN_NR",
"诵 VV",
"葬 NN_VV",
"佚 NN_VV",
"弗 VV",
"掂 VV",
"霄 NN",
"憬 NN_VV",
"礴 VA",
"箝 NN_VV",
"氧 NN",
"窃 NN_VV",
"窥 NN_VV",
"踢 VV",
"焉 AD_SP_VV",
"盔 NN",
"稠 VA_VV",
"缮 NN_VV",
"绵 NN_VA_VV",
"玮 NR",
"甜 JJ_NN_VA",
"啧 VV",
"剪 NN_VV",
"歹 AD_VA_VV",
"癖 VV",
"6 CD",
"匪 NN_VV",
"瑟 NR",
"渎 NN_VV",
"淮 NR",
"榷 VV",
"滞 NN_VV",
"蝇 NN",
"鳞 NN",
"慑 VV",
"爷 NN_NR",
"魄 NN",
"悍 JJ_VA",
"赭 JJ",
"闷 JJ_NN_VA_VV",
"燥 JJ_NN_VA",
"盯 VV",
"奔 NN_VV",
"躯 NN",
"喔 SP",
"镞 NN",
"舛 VV",
"雏 NN",
"湘 NR",
"婶 NN_PN",
"瘾 NN_VV",
"淋 NN",
"闯 VV",
"熹 NR",
"蠢 NN_VA_VV",
"拐 NR_VV",
"扇 NN",
"1 CD_NT",
"7 CD_NT",
"俯 VV",
"娴 NR",
"悠 AD_VA_VV",
"蛭 NN",
"嘻 VV",
"埂 NN",
"嗣 NN",
"翘 VA_VV",
"酥 NN",
"篙 NN",
"娆 VA",
"喇 AD",
"霓 NN",
"泣 NN_VV",
"凿 VV",
"籽 NN",
"鄞 NR",
"哉 AD_VA_VV",
"拭 VV",
"幽 VA_VV",
"谧 VA_VV",
"坌 NR",
"蛤 NN",
"贼 NN",
"廖 NR",
"阡 NR",
"盆 M_NN_NR",
"昔 NN_VV",
"孰 PN_VV",
"罟 NR",
"谑 VA",
"爹 NN",
"疯 NN_VV",
"绅 NN",
"娟 NR",
"徨 NN_VV",
"莓 NN",
"耿 VV",
"眩 VV",
"笙 NR",
"诀 NN",
"剥 JJ_VV",
"讫 VV",
"辩 NN_VV",
"杠 VV",
"讳 NN_VV",
"卧 NN_VV",
"峄 NR",
"昱 NR",
"咨 NN",
"秉 NR_VV",
"8 CD_NT",
"殴 VV",
"跎 VV",
"夹 NN_VV",
"杏 NR",
"铼 NR",
"允 VV",
"薇 NR",
"垂 AD_JJ_NN_NR_VV",
"冽 VA",
"拄 VV",
"町 NR",
"遽 NN_VA_VV",
"苟 VA_VV",
"惰 VA",
"珈 NN",
"肌 NN",
"踩 NN_VV",
"3 CD",
"浴 NN",
"薰 NN",
"柑 NN",
"瑰 NN",
"弛 VA_VV",
"澡 NN_VV",
"瀛 NR",
"沸 VV",
"喵 NR",
"蜍 NN",
"蟾 NN",
"呵 AD_SP_VV",
"棺 NN",
"唉 NN_SP",
"坠 VV",
"炯 NR",
"毓 NR",
"鲤 NN",
"鹉 NN",
"噢 IJ",
"歪 VA",
"兄 NN",
"暑 NN",
"琦 NR",
"傻 AD_JJ_VA_VV",
"绳 NN",
"拎 VV",
"啃 VV",
"哇 NR",
"呷 NN",
"丛 NN_NR",
"裳 NN_VV",
"泞 NN",
"秃 VA_VV",
"圃 NN",
"勘 VV",
"夙 VV",
"欷 NN_VV",
"嘘 IJ_NN_VV",
"轾 NN",
"溺 VV",
"惟 AD",
"迢 VV",
"辍 VV",
"冥 NN",
"轶 JJ",
"耽 VV",
"壶 M_NN",
"醺 NN",
"奕 NN_VV",
"摹 VV",
"汲 VV",
"髓 NN",
"赵 NN_NR",
"戎 VV",
"瘴 VA",
"疠 VA",
"猜 VV",
"沅 NR",
"篆 NN",
"韵 NN",
"夔 JJ",
"蜷 VV",
"颉 NR",
"儆 VV",
"蕴 NN_VV",
"涩 JJ_VA",
"绢 NN",
"氲 JJ_VV",
"斋 NN_NR",
"叟 NR",
"炙 NN_VV",
"匾 NN",
"拙 VA_VV",
"淘 NN_VV",
"漓 VA",
"瓮 NN",
"郑 NR",
"抬 NN",
"茑 NR",
"瑙 NN",
"髻 NN_NR",
"披 NN_VV",
"刨 NN_VV",
"菇 NN",
"炖 VV",
"苍 VA_VV",
"毂 NN",
"辘 NN",
"丢 VV",
"烙 NN_VV",
"喀 VV",
"桐 NN",
"杞 NN",
"暧 AD",
"砺 VV",
"鼻 NN_NR_VV",
"肾 NN",
"龟 NN",
"赤 JJ",
"饕 NN",
"凝 AD_NN",
"泌 NN_VV",
"腺 NN",
"栖 JJ_NN_NR",
"雌 JJ_NN",
"孵 VV",
"黯 VA",
"哑 VA",
"鞘 NN",
"秧 VV",
"歇 NR_VV",
"愣 AD",
"饿 NN_VA_VV",
"枕 NN_VV",
"逗 VV",
"嗨 IJ",
"魏 NR",
"惘 NN_VV",
"迄 VV",
"嬉 NN",
"鬓 NN",
"颊 NN",
"榨 VV",
"悸 VV",
"萌 VV",
"愕 NN_VV",
"隶 NN",
"憎 VV",
"妄 NN_VA",
"侃 VV",
"谆 AD",
"噬 VV",
"哽 VV",
"坜 NR",
"桂 NR",
"抿 VV",
"怯 VV",
"憋 VV",
"罹 VV",
"忒 AD",
"孜 AD_VV",
"侪 NN",
"娶 VV",
"抒 VV",
"枷 NN",
"缚 NN",
"桧 NN_VV",
"芥 NN",
"匐 VV",
"桃 NR",
"杉 NN_NR",
"蕨 NN",
"茁 VV",
"槽 NN_VV",
"榉 NN",
"耐 NN_VV",
"颓 VV",
"寝 VV",
"缙 NR",
"枯 VV",
"舌 AD_NN_VV",
"绫 NN",
"苛 VA",
"匿 NN",
"梵 NR",
"斫 VV",
"丧 NN_VA_VV",
"嘱 NN",
"舀 VV",
"銮 NR",
"鲑 NN",
"ㄇ NN",
"宸 NR",
"嚏 NN",
"椒 NN",
"珊 VV",
"黛 NN",
"蜒 VA_VV",
"瞪 NN_VV",
"熠 AD_VV",
"窟 NN_NR",
"夭 VV",
"烘 NN",
"磋 VV",
"厕 NN",
"茧 NN",
"胡 NN_NR",
"芎 NR",
"徉 VV",
"溜 M_VV",
"僧 NN",
"萝 NR",
"坞 JJ_NN_NR",
"谭 NN_NR",
"奸 VV",
"腥 JJ_NN_VA",
"寓 NN",
"剃 VV",
"庐 NN_VV",
"哄 VV",
"菘 NR",
"芭 NN",
"鞑 VV",
"愤 NN_VV",
"讪 VV",
"搂 VV",
"坎 NR",
"幄 VV",
"趸 NN",
"殆 AD_VV",
"篓 M",
"彝 NR",
"驿 VV",
"艰 VA_VV",
"灼 AD",
"撷 VV",
"缄 NR",
"娑 VV",
"镉 NN",
"吾 PN",
"扭 VV",
"弑 VV",
"祀 NN_VV",
"趴 VV",
"% CD_NN",
"缕 NN_VV",
"眶 NN",
"ㄈ NN",
"澹 AD",
"傩 NN",
"魅 NN_VV",
"矫 VA",
"渴 VV",
"菸 MSP_NN_VV",
"壬 NR",
"屎 NN",
"粪 NN",
"牯 NR",
"釉 NN",
"筒 NN",
"盗 NN_VV",
"屁 NN_VV",
"赌 VV",
"姬 NR",
"邪 NR",
"贞 NR",
"捶 NN_VV",
"贱 NN",
"碜 VV",
"杓 NN",
"跋 NN",
"堇 NR",
"丫 NN",
"湃 VA_VV",
"琶 NN_VV",
"箫 NN",
"筝 NN",
"呐 NN",
"籁 NN",
"狼 NN",
"淌 VV",
"侣 NN",
"缎 NN",
"淙 VV",
"嶂 VV",
"噶 NR",
"螟 NN",
"痴 VV",
"恙 VV",
"莽 NR",
"疏 NN",
"舒 NR",
"吏 NN",
"侍 NN",
"歆 NR",
"婢 NN",
"霍 NR",
"骞 NR",
"荽 NN",
"禾 NN",
"褐 JJ",
"畿 NN",
"桓 NR",
"纬 NN",
"轳 NN",
"槐 NN",
"咐 VV",
"藜 NN",
"煞 AD",
"膻 JJ",
"驼 NN",
"伎 NN",
"颐 NR",
"侄 NN",
"媳 NN",
"癞 NN",
"蟆 NN",
"斟 VV",
"塾 NN",
"劭 VV",
"胤 NR",
"汝 PN",
"拗 JJ",
"洵 NR",
"轼 NR",
"尧 NR",
"诌 VA",
"抡 VV",
"擂 VV",
"叛 NN_VV",
"萧 AD_NR",
"宦 NN",
"舵 VV",
"讧 NN",
"遮 NN_VV",
"蛊 VV",
"框 NN_VV",
"亵 JJ",
"滤 NN_VV",
"搜 VV",
"骇 VV",
"逮 VV",
"闵 NR",
"茵 NR_VV",
"疴 NN",
"笳 NN",
"蛰 VV",
"胧 VV",
"哮 NN",
"囚 NN",
"峋 VV",
"铐 NN",
"尸 VV",
"掷 VV",
"怆 NN",
"圄 NN",
"谛 NR",
"嗽 VV",
"榭 NR",
"撩 VV",
"咻 IJ",
"铛 NN",
"巫 NN",
"桨 NN",
"毡 NN",
"粼 JJ",
"鲫 NN",
"膘 NN",
"峪 NR",
"骏 NR",
"钙 NN",
"嘀 VV",
"咕 VV",
"拽 VV",
"悻 VV",
"综 NN",
"钮 VV",
"粽 NN",
"苔 NR",
"窦 NR",
"戮 NN",
"墉 NR",
"鸦 NN",
"寅 NR",
"嘲 VV",
"瀚 NR",
"吝 VV",
"噱 VV",
"喽 NN",
"烊 VV",
"玟 NR",
"雯 NR",
"兔 NN",
"娥 NN",
"蔬 NN",
"蹦 VV",
"啬 VV",
"笨 JJ",
"儡 NN",
"玄 NR",
"娼 NN",
"姗 NR",
"妓 NN",
"蔻 NR",
"螳 VV",
"谎 NN",
"螂 NN",
"蔼 VA",
"盂 NN",
"胱 NN",
"腆 VV",
"钝 NN",
"愧 NN",
"帘 NN",
"噘 VV",
"墩 JJ_NR",
"殛 NN",
"霈 NR",
"蛮 NN",
"渚 NR",
"掏 NN",
"璋 NN",
"夯 VV",
"酹 NN",
"燎 NN",
"咧 VV",
"腮 NN",
"蚕 NR",
"凫 NN_NR",
"饶 NN",
"跪 VV",
"韶 NR",
"垣 NN",
"羌 NN",
"勺 NN",
"箍 NN",
"锈 VV",
"札 NN",
"彷 VV",
"钊 NR",
"诛 VV",
"锢 VV",
"黼 NR",
"甩 VV",
"刃 VV",
"戟 NN",
"恃 VV",
"唛 AD",
"磅 M",
"焊 NN",
"糗 NN",
"堑 NR",
"烹 VV",
"郭 NR",
"炊 NN",
"馅 NN",
"焙 VV",
"嘟 VA",

#endregion
        };                 

    }
}
